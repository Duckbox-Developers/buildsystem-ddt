--- a/arch/sh/boards/mach-mb680/setup.c	2014-04-09 06:54:15.000000000 +0200
+++ b/arch/sh/boards/mach-mb680/setup.c	2014-03-20 18:46:14.000000000 +0100
@@ -22,22 +22,52 @@
 #include <linux/input.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7105.h>
-#include <linux/stm/pci-glue.h>
+#include <linux/stm/pci-glue.h> //pci_synopsys is now pci-glue, was renamed
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
+#include <linux/bpa2.h>
 #include <linux/spi/spi_gpio.h>
 #include <asm/irq-ilc.h>
 #include <mach/common.h>
 #include "../mach-st/mb705-epld.h"
+#include <linux/stm/pio.h> //j00zek spdif enable need it
 
 
+//#define PIO13_2 stm_gpio(x, y) //reset usb1
+#define PIO15_3 stm_gpio(15, 3) //reset dvb-t found by J....
 
-#define MB680_PIO_PHY_RESET stm_gpio(5, 5)
+#define MB680_PIO_PHY_RESET stm_gpio(15, 0) //found by J....
-#define MB680_PIO_PCI_SERR stm_gpio(6, 4)
+//#define MB680_PIO_PCI_SERR stm_gpio(6, 4)
-#define MB680_PIO_PCI_RESET stm_gpio(15, 6)
+//#define MB680_PIO_PCI_RESET stm_gpio(15, 6)
-#define MB680_PIO_MII_BUS_SWITCH stm_gpio(11, 2)
+//#define MB680_PIO_MII_BUS_SWITCH stm_gpio(11, 2)
 
+const char *LMI_IO_partalias[] = { "audio", "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+ 
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb) 
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    }, 
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x06000000, /* 92 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    }
+ };
 
 
 static void __init mb680_setup(char** cmdline_p)
@@ -46,72 +74,18 @@
 
 	stx7105_early_device_init();
 
-	stx7105_configure_asc(2, &(struct stx7105_asc_config) {
-			.routing.asc2 = stx7105_asc2_pio4,
-			.hw_flow_control = 1,
+	stx7105_configure_asc(3, &(struct stx7105_asc_config) { //j00zek pace communicates via PIO5
+			.hw_flow_control = 0,
 			.is_console = 1, });
-	stx7105_configure_asc(3, &(struct stx7105_asc_config) {
-			.hw_flow_control = 1,
-			.is_console = 0, });
-}
-
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 
-
-static struct platform_device mb680_leds = {
-	.name = "leds-gpio",
-	.id = 0,
-	.dev.platform_data = &(struct gpio_led_platform_data) {
-		.num_leds = 2,
-		.leds = (struct gpio_led[]) {
-			{
-				.name = "LD5",
-				.default_trigger = "heartbeat",
-				.gpio = stm_gpio(2, 4),
-			}, {
-				.name = "LD6",
-				.gpio = stm_gpio(2, 3),
-			},
-		},
-	},
-};
-
-/*
- * mb680 rev C added software control of the PHY reset, and buffers which
- * allow isolation of the MII pins so that their use as MODE pins is not
- * compromised by the PHY.
- */
-
-/*
- * When connected to the mb705, MII reset is controlled by an EPLD register
- * on the mb705.
- * When used standalone a PIO pin is used, and J47-C must be fitted.
- *
- * Timings:
- *    PHY         | Reset low | Post reset stabilisation
- *    ------------+-----------+-------------------------
- *    DB83865     |   150uS   |         20mS
- *    LAN8700     |   100uS   |         800nS
- */
-#ifdef CONFIG_SH_ST_MB705
-static void ll_phy_reset(void)
-{
-	mb705_reset(EPLD_EMI_RESET_SW0, 150);
 }
-#else
-static void ll_phy_reset(void)
-{
-	gpio_set_value(MB680_PIO_PHY_RESET, 0);
-	udelay(150);
-	gpio_set_value(MB680_PIO_PHY_RESET, 1);
-}
-#endif
 
 static int mb680_phy_reset(void *bus)
 {
-	gpio_set_value(MB680_PIO_MII_BUS_SWITCH, 1);
-	ll_phy_reset();
-	gpio_set_value(MB680_PIO_MII_BUS_SWITCH, 0);
-	mdelay(20);
+	gpio_set_value(MB680_PIO_PHY_RESET, 0);
+	udelay(150);
+	gpio_set_value(MB680_PIO_PHY_RESET, 1);
 
 	return 0;
 }
@@ -120,135 +104,58 @@
 	.phy_mask = 0,
 };
 
-static struct platform_device *mb680_devices[] __initdata = {
-	&mb680_leds,
-};
-
-/* PCI configuration */
-
-#ifdef CONFIG_SH_ST_MB705
-static void mb705_epld_pci_reset(void)
-{
-	mb705_reset(EPLD_EMI_RESET_SW1, 1000);
-
-	/* PCI spec says one second */
-	mdelay(10);
-}
-#endif
+// Nor Flash Configuration Pace 7241
+static struct mtd_partition nor_parts[] = {
+	{
+		.name   = "NOR uboot  0x000000000000-0x00000007FFFF (512KB)",
+		.size   = 0x00080000,	//512KB
+		.offset = 0,
+	}, {
+		.name   = "NOR kernel 0x000000080000-0x0000002FFFFF (2.5MB)",
+		.size   = 0x00280000,	//2.5MB
+		.offset = 0x00080000,
+	}, {
+		.name   = "NOR rootFS 0x000000300000-0x000004000000  (61MB)",
+		.size   = MTDPART_SIZ_FULL,
+		.offset = MTDPART_OFS_APPEND,
+	}
+};
 
-/*
- * J22-A must be removed, J22-B must be 2-3.
- */
-static struct stm_plat_pci_config mb680_pci_config = {
-	.pci_irq = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_DEFAULT,
-		[2] = PCI_PIN_DEFAULT,
-		[3] = PCI_PIN_UNUSED
+static struct platform_device pace7241_nor_device = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+	STM_PLAT_RESOURCE_MEM(0, 0x20000*512),
 	},
-	.serr_irq = PCI_PIN_UNUSED, /* Modified in mb680_device_init() below */
-	.idsel_lo = 30,
-	.idsel_hi = 30,
-	.req_gnt = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_UNUSED,
-		[2] = PCI_PIN_UNUSED,
-		[3] = PCI_PIN_UNUSED
+	.dev.platform_data = &(struct physmap_flash_data) {
+		.width		= 2,
+		.nr_parts	= ARRAY_SIZE(nor_parts),
+		.parts		= nor_parts
 	},
-	.pci_clk = 33333333,
-	/* When connected to the mb705, PCI reset is controlled by an EPLD
-	 * register on the mb705. When used standalone a PIO pin is used,
-	 * and J47-D, J9-G must be fitted. */
-#ifdef CONFIG_SH_ST_MB705
-	.pci_reset = mb705_epld_pci_reset,
-#else
-	.pci_reset_gpio = MB680_PIO_PCI_RESET,
-#endif
 };
 
-int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
-{
-       /* We can use the standard function on this board */
-       return stx7105_pcibios_map_platform_irq(&mb680_pci_config, pin);
-}
-
-void __init mbxxx_configure_audio_pins(int *pcm_reader, int *pcm_player)
-{
-	*pcm_reader = -1;
-	*pcm_player = 0;
-	stx7105_configure_audio(&(struct stx7105_audio_config) {
-			.pcm_player_0_output =
-					stx7105_pcm_player_0_output_6_channels,
-			.spdif_player_output_enabled = 1,
-			.pcm_reader_input_enabled =
-					cpu_data->type == CPU_STX7105, });
-}
-
-#ifdef CONFIG_SH_ST_MB705
-void __init mbxxx_configure_nand_flash(struct stm_nand_config *config)
-{
-	stx7105_configure_nand(config);
-}
-
-/* GPIO based SPI */
-static struct platform_device mb680_serial_flash_bus = {
-	.name           = "spi_gpio",
-	.id             = 8,
-	.num_resources  = 0,
-	.dev.platform_data = &(struct spi_gpio_platform_data) {
-		.sck = stm_gpio(15, 0),
-		.mosi = stm_gpio(15, 1),
-		.miso = stm_gpio(15, 3),
-		.num_chipselect = 1,
-	},
+static struct platform_device *mb680_devices[] __initdata = {
+	&pace7241_nor_device,
 };
 
-void __init mbxxx_configure_serial_flash(struct spi_board_info *serial_flash)
-{
-	/* Specify CSn and SPI bus */
-	serial_flash->bus_num = 8;
-	serial_flash->controller_data = (void *)stm_gpio(15, 2);
-
-	/* Register SPI bus and flash devices */
-	platform_device_register(&mb680_serial_flash_bus);
-	spi_register_board_info(serial_flash, 1);
-}
-#endif
-
 static int __init mb680_devices_init(void)
 {
-	/* Setup the PCI_SERR# PIO
-	 * J20-A - open, J27-E - closed */
-	if (gpio_request(MB680_PIO_PCI_SERR, "PCI_SERR#") == 0) {
-		gpio_direction_input(MB680_PIO_PCI_SERR);
-		mb680_pci_config.serr_irq = gpio_to_irq(MB680_PIO_PCI_SERR);
-		set_irq_type(mb680_pci_config.serr_irq, IRQ_TYPE_LEVEL_LOW);
-	} else {
-		printk(KERN_WARNING "mb680: Failed to claim PCI_SERR PIO!\n");
-	}
-	stx7105_configure_pci(&mb680_pci_config);
-
 	stx7105_configure_sata(0);
 
-	/* Valid only for mb680 rev. A & rev. B (they had two SATA lines) */
-	stx7105_configure_sata(1);
-
	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
-			.out0 = stx7105_pwm_out0_pio13_0,
-			.out1 = stx7105_pwm_out1_disabled, });
+			.out0 = stx7105_pwm_out0_disabled, // j00zek: nothing connected
+			.out1 = stx7105_pwm_out1_disabled, }); // j00zek: fan is connected to pio4.5, configured in the fan_ctrl driver
-
-	/* NIM CD I2C bus*/
-	stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
-			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
-			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
+	stx7105_configure_ssc_i2c(0, &(struct stx7105_ssc_config) {
+			.routing.ssc0.sclk = stx7105_ssc0_sclk_pio2_2,
+			.routing.ssc0.mtsr = stx7105_ssc0_mtsr_pio2_3, });
-	/* NIM AB/STRecord I2C bus*/
-	stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
+	stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
-			.routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
+			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
-			.routing.ssc2.mtsr = stx7105_ssc2_mtsr_pio3_5, });
+			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
-	/* HDMI I2C bus */
+ 	/* DVB-T I2C bus */
 	stx7105_configure_ssc_i2c(3, &(struct stx7105_ssc_config) {
-			.routing.ssc3.sclk = stx7105_ssc3_sclk_pio3_6,
+			.routing.ssc3.sclk = stx7105_ssc3_sclk_pio13_2,
-			.routing.ssc3.mtsr = stx7105_ssc3_mtsr_pio3_7, });
+			.routing.ssc3.mtsr = stx7105_ssc3_mtsr_pio13_3, });
-
+//j00zek end
 	/*
 	 * Note that USB port configuration depends on jumper
@@ -259,8 +275,9 @@
 	 * norm	|  4[5]	J5B:2-3			 4[7]	J10B:2-3
 	 * alt	| 12[6]	J5B:1-2  J6G:open	14[7]	J10B:1-2  J11H:open
 	 */
+
 	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
-			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
+			.ovrcur_mode = stx7105_usb_ovrcur_disabled,
 			.pwr_enabled = 1,
 			.routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
 			.routing.usb0.pwr = stx7105_usb0_pwr_pio4_5, });
@@ -242,8 +291,12 @@
 
 	gpio_request(MB680_PIO_PHY_RESET, "notPioResetMII");
 	gpio_direction_output(MB680_PIO_PHY_RESET, 1);
-	gpio_request(MB680_PIO_MII_BUS_SWITCH, "MIIBusSwitchnotOE");
-	gpio_direction_output(MB680_PIO_MII_BUS_SWITCH, 1);
+
+	//gpio_request(PIO16_2, "PIO16_2 Reset DVBS");
+	//gpio_direction_output(PIO16_2, 1);
+
+	gpio_request(PIO15_3, "PIO15_3 Reset DVBT");
+	gpio_direction_output(PIO15_3, 1);
 
 	stx7105_configure_ethernet(0, &(struct stx7105_ethernet_config) {
 			.mode = stx7105_ethernet_mode_mii,
@@ -253,22 +312,14 @@
 			.mdio_bus_data = &stmmac_mdio_bus,
 		});
 
-	/*
-	 * Check jumpers before using IR:
-	 * On the mb705:
-	 *	J25A : 1-2
-	 *	J25B : 1-2 (UHF), 2-3 (IR)
-	 * On the mb680:
-	 *	J15A : fitted
-	 */
+	/* enable optical out */
+	stpio_request_pin(10, 6, "opt_out", STPIO_ALT_OUT);
+
 	stx7105_configure_lirc(&(struct stx7105_lirc_config) {
-#ifdef CONFIG_LIRC_STM_UHF
-			.rx_mode = stx7105_lirc_rx_mode_uhf,
-#else
 			.rx_mode = stx7105_lirc_rx_mode_ir,
-#endif
-			.tx_enabled = 1,
-			.tx_od_enabled = 1, });
+			.tx_enabled = 0,
+			.tx_od_enabled = 0,
+			});
 
 	return platform_add_devices(mb680_devices, ARRAY_SIZE(mb680_devices));
 }
