--- ffmpeg/libavformat/hls.c
+++ ffmpeg/libavformat/hls.c
@@ -206,6 +206,8 @@
     int strict_std_compliance;
     char *allowed_extensions;
     int max_reload;
+    char *key_uri_replace_old;
+    char *key_uri_replace_new;
 } HLSContext;
 
 static int read_chomp_line(AVIOContext *s, char *buf, int maxlen)
@@ -1127,8 +1129,17 @@
         AVDictionary *opts2 = NULL;
         char iv[33], key[33], url[MAX_URL_SIZE];
         if (strcmp(seg->key, pls->key_url)) {
+            char *key_url = NULL;
             AVIOContext *pb;
-            if (open_url(pls->parent, &pb, seg->key, c->avio_opts, opts, NULL) == 0) {
+            
+            if (NULL != c->key_uri_replace_old && \
+                NULL != c-> key_uri_replace_new && \
+                '\0' != c->key_uri_replace_old[0]) {
+                key_url = av_strireplace(seg->key, c->key_uri_replace_old, c->key_uri_replace_new);
+            } else {
+                key_url = seg->key;
+            }
+            if (open_url(pls->parent, &pb, key_url, c->avio_opts, opts, NULL) == 0) {
                 ret = avio_read(pb, pls->key, sizeof(pls->key));
                 if (ret != sizeof(pls->key)) {
                     av_log(NULL, AV_LOG_ERROR, "Unable to read key file %s\n",
@@ -1140,6 +1151,8 @@
                        seg->key);
             }
             av_strlcpy(pls->key_url, seg->key, sizeof(pls->key_url));
+            if (key_url != seg->key)
+                av_free(key_url);
         }
         ff_data_to_hex(iv, seg->iv, sizeof(seg->iv), 0);
         ff_data_to_hex(key, pls->key, sizeof(pls->key), 0);
@@ -1846,7 +1859,7 @@
     for (i = 0; i < c->n_playlists; i++)
         c->playlists[i]->cur_needed = 0;
 
-    for (i = 0; i < s->nb_streams; i++) {
+    for (i = 0; i < s->nb_streams && s->streams[i]->id < c->n_playlists; i++) {
         AVStream *st = s->streams[i];
         struct playlist *pls = c->playlists[s->streams[i]->id];
         if (st->discard < AVDISCARD_ALL)
@@ -2159,6 +2172,8 @@
         INT_MIN, INT_MAX, FLAGS},
     {"max_reload", "Maximum number of times a insufficient list is attempted to be reloaded",
         OFFSET(max_reload), AV_OPT_TYPE_INT, {.i64 = 1000}, 0, INT_MAX, FLAGS},
+    { "key_uri_old", "allow to replace part of AES key uri - old", OFFSET(key_uri_replace_old), AV_OPT_TYPE_STRING, { .str = "" }, 0, 0, FLAGS },
+    { "key_uri_new", "allow to replace part of AES key uri - new", OFFSET(key_uri_replace_new), AV_OPT_TYPE_STRING, { .str = "" }, 0, 0, FLAGS },
     {NULL}
 };
 
