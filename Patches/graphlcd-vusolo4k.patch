diff --git a/Make.config b/Make.config
index 3ddedd2..c00baae 100644
--- a/Make.config
+++ b/Make.config
@@ -82,3 +82,7 @@ HAVE_DRIVER_VNCSERVER=1
 #HAVE_DRIVER_SSD1306=1
 
 #HAVE_DRIVER_ILI9341=1
+
+# uncomment this variable if you want to enable the experimental support for vusolo4k
+HAVE_DRIVER_VUSOLO4K=1
+
diff --git a/glcddrivers/Makefile b/glcddrivers/Makefile
index 8c2b3d6..43d813c 100644
--- a/glcddrivers/Makefile
+++ b/glcddrivers/Makefile
@@ -63,6 +63,11 @@
     LIBS += -lwiringPi
 endif
 
+ifeq ($(HAVE_DRIVER_VUSOLO4K), 1)
+    DEFINES += -DHAVE_DRIVER_VUSOLO4K
+    OBJS += vusolo4k.o
+endif
+
 ### Implicit rules:
 
 %.o: %.c
diff --git a/glcddrivers/drivers.c b/glcddrivers/drivers.c
index 4c7e67a..729fdfd 100644
--- a/glcddrivers/drivers.c
+++ b/glcddrivers/drivers.c
@@ -50,6 +50,9 @@
 #ifdef HAVE_DRIVER_ILI9341
 #include "ili9341.h"
 #endif
+#ifdef HAVE_DRIVER_VUSOLO4K
+#include "vusolo4k.h"
+#endif
 
 namespace GLCD
 {
@@ -93,6 +96,9 @@ tDriver drivers[] =
 #endif
 #ifdef HAVE_DRIVER_ILI9341
     {"ili9341",       kDriverILI9341},
+#endif
+#ifdef HAVE_DRIVER_VUSOLO4K
+    {"vusolo4k",      kDriverVUSOLO4K},
 #endif
     {"",              kDriverUnknown}
 };
@@ -179,6 +185,10 @@ cDriver * CreateDriver(int driverID, cDriverConfig * config)
 #ifdef HAVE_DRIVER_ILI9341
         case kDriverILI9341:
             return new cDriverILI9341(config);
+#endif
+#ifdef HAVE_DRIVER_VUSOLO4K
+        case kDriverVUSOLO4K:
+            return new cDriverVUSOLO4K(config);
 #endif
         case kDriverUnknown:
         default:
diff --git a/glcddrivers/drivers.h b/glcddrivers/drivers.h
index 970b01e..85f6292 100644
--- a/glcddrivers/drivers.h
+++ b/glcddrivers/drivers.h
@@ -58,6 +58,9 @@
 #endif
     kDriverUSBserLCD     = 23,
     kDriverST7565RReel   = 24,
+#ifdef HAVE_DRIVER_VUSOLO4K
+    kDriverVUSOLO4K      = 25,
+#endif
     kDriverSerDisp       = 100,
     kDriverG15daemon     = 200
 };
diff --git a/glcddrivers/vusolo4k.c b/glcddrivers/vusolo4k.c
new file mode 100644
index 0000000..826843c
--- /dev/null
+++ b/glcddrivers/vusolo4k.c
@@ -0,0 +1,249 @@
+/*
+ * GraphLCD driver library
+ *
+ * vusolo4k.c  -  VUSOLO4K OLED driver class
+ *
+ * This file is released under the GNU General Public License. Refer
+ * to the COPYING file distributed with this package.
+ *
+ * (c) redblue 2018
+ */
+
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <string.h>
+#include <stdint.h>
+#include <syslog.h>
+#include <cstring>
+#include <byteswap.h>
+
+#include "common.h"
+#include "config.h"
+#include "vusolo4k.h"
+
+namespace GLCD
+{
+
+cDriverVUSOLO4K::cDriverVUSOLO4K(cDriverConfig * config)
+:	cDriver(config),
+	fd(-1)
+{
+}
+
+cDriverVUSOLO4K::~cDriverVUSOLO4K()
+{
+	DeInit();
+}
+
+int lcd_read_value(const char *filename)
+{
+	int value = 0;
+	FILE *fd = fopen(filename, "r");
+	if (fd) {
+		int tmp;
+		if (fscanf(fd, "%x", &tmp) == 1)
+			value = tmp;
+		fclose(fd);
+	}
+	return value;
+}
+
+int cDriverVUSOLO4K::Init()
+{
+	int x;
+
+	width = config->width;
+	if (width <= 0)
+		width = lcd_read_value(XRES);
+
+	height = config->height;
+	if (height <= 0)
+		height = lcd_read_value(YRES);
+
+	bpp = lcd_read_value(BPP);
+
+	for (unsigned int i = 0; i < config->options.size(); i++)
+	{
+		if (config->options[i].name == "")
+		{
+		}
+	}
+
+	if (config->device == "")
+	{
+		fd = open("/dev/dbox/lcd0", O_RDWR);
+		if (fd == -1)
+			fd = open("/dev/lcd0", O_RDWR);
+		if (fd == -1)
+			fd = open("/dev/dbox/oled0", O_RDWR);
+		if (fd == -1)
+			fd = open("/dev/oled0", O_RDWR);
+	}
+	else
+	{
+		fd = open(config->device.c_str(), O_RDWR);
+	}
+
+	if (fd == -1) {
+		printf("cannot open lcd device\n");
+		return -1;
+	}
+
+	int tmp = LCD_MODE_BIN;
+	if (ioctl(fd, LCD_IOCTL_ASC_MODE, &tmp)) {
+		printf("failed to set lcd bin mode\n");
+	}
+
+	newLCD = new uint16_t[width * height * 4];
+	if (newLCD)
+		memset(newLCD, 0, width * height * 4);
+	oldLCD = new uint16_t[width * height * 4];
+	if (oldLCD)
+		memset(oldLCD, 0, width * height * 4);
+
+	syslog(LOG_INFO, "%s: current lcd is %dx%d, %dbpp, vusolo4k lcd device was opened successfully\n", config->name.c_str(), width, height, bpp);
+
+	*oldConfig = *config;
+
+	// clear display
+	Clear();
+	//Refresh(true);
+
+	syslog(LOG_INFO, "%s: VUSOLO4K initialized.\n", config->name.c_str());
+	return 0;
+}
+
+int cDriverVUSOLO4K::DeInit()
+{
+	if (newLCD)
+	{
+		delete[] newLCD;
+		newLCD = 0;
+	}
+	if (oldLCD)
+	{
+		delete[] oldLCD;
+		oldLCD = 0;
+	}
+	if (-1 != fd)
+	{
+        	close(fd);
+		fd=-1;
+	}
+	return 0;
+}
+
+int cDriverVUSOLO4K::CheckSetup()
+{
+	if (config->width != oldConfig->width ||
+		config->height != oldConfig->height)
+		{
+		DeInit();
+		Init();
+		return 0;
+	}
+
+	if (config->upsideDown != oldConfig->upsideDown ||
+		config->invert != oldConfig->invert)
+	{
+		oldConfig->upsideDown = config->upsideDown;
+		oldConfig->invert = config->invert;
+		return 1;
+	}
+	return 0;
+}
+
+void cDriverVUSOLO4K::Clear()
+{
+	memset(newLCD, 0, width * height);
+}
+
+void cDriverVUSOLO4K::SetPixel(int x, int y, uint32_t data)
+{
+	if (x >= width || y >= height)
+		return;
+
+	if (config->upsideDown)
+	{
+		x = width - 1 - x;
+		y = height - 1 - y;
+	}
+
+	uint32_t red, green, blue;
+	blue = (data & 0x000000FF) >> 0;
+	green = (data & 0x0000FF00) >> 8;
+	red = (data & 0x00FF0000) >> 16;
+
+	unsigned char* row_pointers_bit_shift = (unsigned char*) &newLCD[0];
+	int row_pointers_2_ptr = (y * width + x) * 4;
+
+ 	if (config->invert) {
+		blue = 255 - blue;
+		green = 255 - green;
+		red = 255 - red;
+	}
+
+	row_pointers_bit_shift[row_pointers_2_ptr+0]=blue;
+	row_pointers_bit_shift[row_pointers_2_ptr+1]=green;
+	row_pointers_bit_shift[row_pointers_2_ptr+2]=red;
+	row_pointers_bit_shift[row_pointers_2_ptr+3]=0xff;
+}
+
+void cDriverVUSOLO4K::Refresh(bool refreshAll)
+{
+	int i;
+	char fileName[256];
+	char str[32];
+	FILE * fp;
+	unsigned char c;
+
+	if (CheckSetup() > 0)
+		refreshAll = true;
+
+	for (i = 0; i < width * height * 4; i++)
+	{
+		if (newLCD[i] != oldLCD[i])
+		{
+			refreshAll = true;
+			break;
+		}
+	}
+
+	if (refreshAll)
+	{
+		for (i = 0; i < width * height * 4; i++)
+		{
+			oldLCD[i] = newLCD[i];
+		}
+		unsigned char* row_pointers_bit_shift = (unsigned char*) &newLCD[0];
+		{
+			int w=-1;
+			w = write(fd, row_pointers_bit_shift, height * width * 4);
+			printf("write ret : %d\n",w);
+			//ret = ioctl(lcdfd, 0);
+			printf("write to /dev/dbox/oled0 : %d\n",w);
+		}
+	}
+}
+
+void cDriverVUSOLO4K::SetBrightness(unsigned int brightness)
+{
+	int value = 0;
+	value = 255 * brightness / 100;
+
+	FILE *f = fopen("/proc/stb/lcd/oled_brightness", "w");
+	if (!f)
+		f = fopen("/proc/stb/fp/oled_brightness", "w");
+	if (f)
+	{
+		if (fprintf(f, "%d", value) == 0)
+			printf("write /proc/stb/lcd/oled_brightness failed!! (%m)\n");
+		fclose(f);
+	}
+}
+
+} // end of namespace
diff --git a/glcddrivers/vusolo4k.h b/glcddrivers/vusolo4k.h
new file mode 100644
index 0000000..fac8272
--- /dev/null
+++ b/glcddrivers/vusolo4k.h
@@ -0,0 +1,62 @@
+/*
+ * GraphLCD driver library
+ *
+ * vusolo4k.c  -  VUSOLO4K OLED driver class
+ *
+ * This file is released under the GNU General Public License. Refer
+ * to the COPYING file distributed with this package.
+ *
+ * (c) redblue
+ */
+
+
+#ifndef _GLCDDRIVERS_VUSOLO4K_H_
+#define _GLCDDRIVERS_VUSOLO4K_H_
+
+#include "driver.h"
+
+namespace GLCD
+{
+
+#define XRES "/proc/stb/lcd/xres"
+#define YRES "/proc/stb/lcd/yres"
+#define BPP "/proc/stb/lcd/bpp"
+
+#ifndef LCD_IOCTL_ASC_MODE
+#define LCDSET                                  0x1000
+#define LCD_IOCTL_ASC_MODE              (21|LCDSET)
+#define LCD_MODE_ASC                    0
+#define LCD_MODE_BIN                    1
+#endif
+
+#define FP_IOCTL_LCD_DIMM       3
+
+class cDriverConfig;
+
+class cDriverVUSOLO4K : public cDriver
+{
+private:
+	int fd;
+	uint16_t * newLCD;
+	uint16_t * oldLCD;
+	int bpp;
+
+	int CheckSetup();
+
+public:
+	cDriverVUSOLO4K(cDriverConfig * config);
+	virtual ~cDriverVUSOLO4K();
+
+	virtual int Init();
+	virtual int DeInit();
+
+	virtual void Clear();
+	virtual void SetPixel(int x, int y, uint32_t data);
+	//virtual void Set8Pixels(int x, int y, unsigned char data);
+	virtual void Refresh(bool refreshAll = false);
+	virtual void SetBrightness(unsigned int percent);
+};
+
+} // end of namespace
+
+#endif
diff --git a/graphlcd.conf b/graphlcd.conf
index 270cae8..d256e4b 100644
--- a/graphlcd.conf
+++ b/graphlcd.conf
@@ -253,3 +253,9 @@
 Device=/dev/ttyS0
 Brightness=100
 Contrast=80
+
+[vusolo4k]
+# Driver setting for the OLED VUSOLO4K (480x320 pixels)
+Driver=vusolo4k
+#Width=480
+#Height=320
