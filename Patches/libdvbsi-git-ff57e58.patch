--- a/include/dvbsi++/byte_stream.h
+++ b/include/dvbsi++/byte_stream.h
@@ -23,8 +23,14 @@
 #define w32(p,v)	do { *(uint32_t * const)(p) = ((const uint32_t)v) } while (0)
 #define w64(p,v)	do { *(uint64_t * const)(p) = ((const uint64_t)v) } while (0)
 #else
+#ifdef __sh__
+/* SuperH does not like unaligned accesses, so work around that */
+#define r16(p)		((((uint8_t *)p)[0]) <<  8 | (((uint8_t *)p)[1]))
+#define r32(p)		((((uint8_t *)p)[0]) << 24 | (((uint8_t *)p)[1]) << 16 | (((uint8_t *)p)[2]) << 8 | ((uint8_t *)p)[3])
+#else
 #define r16(p)		bswap_16(*(const uint16_t * const)p)
 #define r32(p)		bswap_32(*(const uint32_t * const)p)
+#endif
 #define r64(p)		bswap_64(*(const uint64_t * const)p)
 #define w16(p,v)	do { *(uint16_t * const)(p) = bswap_16((const uint16_t)v) } while (0)
 #define w32(p,v)	do { *(uint32_t * const)(p) = bswap_32((const uint32_t)v) } while (0)
--- a/src/time_date_section.cpp
+++ b/src/time_date_section.cpp
@@ -15,7 +15,7 @@
 
 TimeAndDateSection::TimeAndDateSection(const uint8_t * const buffer) : ShortSection(buffer)
 {
-	if (sectionLength > 8) {
+	if (sectionLength >= 5) {
 		utcTimeMjd = UINT16(&buffer[3]);
 		utcTimeBcd = (buffer[5] << 16) | UINT16(&buffer[6]);
 	}
--- a/include/dvbsi++/network_information_section.h
+++ b/include/dvbsi++/network_information_section.h
@@ -37,6 +37,7 @@ typedef TransportStreamInfoList::const_iterator TransportStreamInfoConstIterator
 class NetworkInformationSection : public LongCrcSection, public DescriptorContainer
 {
 	protected:
+		unsigned networkId				: 16;
 		unsigned networkDescriptorsLength		: 12;
 		unsigned transportStreamLoopLength		: 12;
 		TransportStreamInfoList tsInfo;
@@ -49,6 +50,7 @@ class NetworkInformationSection : public LongCrcSection, public DescriptorContai
 		static const enum TableId TID = TID_NIT_ACTUAL;
 		static const uint32_t TIMEOUT = 12000;
 
+		uint16_t getNetworkId(void) const;
 		const TransportStreamInfoList *getTsInfo(void) const;
 };
 
--- a/src/network_information_section.cpp
+++ b/src/network_information_section.cpp
@@ -35,6 +35,7 @@ uint16_t TransportStreamInfo::getOriginalNetworkId(void) const
 
 NetworkInformationSection::NetworkInformationSection(const uint8_t * const buffer) : LongCrcSection(buffer)
 {
+	networkId = UINT16(&buffer[3]);
 	networkDescriptorsLength = sectionLength > 9 ? DVB_LENGTH(&buffer[8]) : 0;
 	
 	uint16_t pos = 10;
@@ -68,6 +69,11 @@ NetworkInformationSection::~NetworkInformationSection(void)
 		delete *i;
 }
 
+uint16_t NetworkInformationSection::getNetworkId(void) const
+{
+	return networkId;
+}
+
 const TransportStreamInfoList *NetworkInformationSection::getTsInfo(void) const
 {
 	return &tsInfo;
--- a/src/ac3_descriptor.cpp
+++ b/src/ac3_descriptor.cpp
@@ -31,6 +31,16 @@ Ac3Descriptor::Ac3Descriptor(const uint8_t * const buffer) : Descriptor(buffer)
 	asvcFlag = (buffer[2] >> 4) & 0x01;
 
 	size_t headerLength = 1 + ac3TypeFlag + bsidFlag + mainidFlag + asvcFlag;
+
+	// broadcasters got it wrong again...
+	if (headerLength > descriptorLength) {
+		ac3TypeFlag = 0;
+		bsidFlag = 0;
+		mainidFlag = 0;
+		asvcFlag = 0;
+		return;
+	}
+
 	ASSERT_MIN_DLEN(headerLength);
 
 	size_t i = 3;
--- a/src/descriptor.cpp
+++ b/src/descriptor.cpp
@@ -17,6 +17,9 @@ Descriptor::Descriptor(const uint8_t * const buffer)
        descriptorTag = buffer[0];
        descriptorLength = buffer[1];
 
+       if(!descriptorLength)
+               descriptorLength = 1;
+
        dataBytes.resize(descriptorLength);
        memcpy(&dataBytes[0], &buffer[2], descriptorLength);
 
