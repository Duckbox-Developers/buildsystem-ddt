--- a/drivers/media/dvb/dvb-core/dmxdev.c
+++ b/drivers/media/dvb/dvb-core/dmxdev.c
@@ -132,11 +132,6 @@
 	if (mutex_lock_interruptible(&dmxdev->mutex))
 		return -ERESTARTSYS;
 
-	if (dmxdev->exit) {
-		mutex_unlock(&dmxdev->mutex);
-		return -ENODEV;
-	}
-
 	if ((file->f_flags & O_ACCMODE) == O_RDWR) {
 		if (!(dmxdev->capabilities & DMXDEV_CAP_DUPLEX)) {
 			mutex_unlock(&dmxdev->mutex);
@@ -176,7 +171,6 @@
 		dmxdev->demux->disconnect_frontend(dmxdev->demux);
 		dmxdev->demux->connect_frontend(dmxdev->demux, front);
 	}
-	dvbdev->users++;
 	mutex_unlock(&dmxdev->mutex);
 	return 0;
 }
@@ -204,15 +198,7 @@
 			vfree(mem);
 		}
 	}
-	/* TODO */
-	dvbdev->users--;
-	if(dvbdev->users==-1 && dmxdev->exit==1) {
-		fops_put(file->f_op);
-		file->f_op = NULL;
-		mutex_unlock(&dmxdev->mutex);
-		wake_up(&dvbdev->wait_queue);
-	} else
-		mutex_unlock(&dmxdev->mutex);
+	mutex_unlock(&dmxdev->mutex);
 
 	return 0;
 }
@@ -231,10 +217,6 @@
 	if (mutex_lock_interruptible(&dmxdev->mutex))
 		return -ERESTARTSYS;
 
-	if (dmxdev->exit) {
-		mutex_unlock(&dmxdev->mutex);
-		return -ENODEV;
-	}
 	ret = dmxdev->demux->write(dmxdev->demux, buf, count);
 	mutex_unlock(&dmxdev->mutex);
 	return ret;
@@ -245,9 +227,6 @@
 {
 	struct dvb_device *dvbdev = file->private_data;
 	struct dmxdev *dmxdev = dvbdev->priv;
-
-	if (dmxdev->exit)
-		return -ENODEV;
 
 	return dvb_dmxdev_buffer_read(&dmxdev->dvr_buffer,
 				      file->f_flags & O_NONBLOCK,
@@ -572,13 +551,13 @@
 	dmx_output_t otype;
 	int ret;
 	int ts_type;
-	enum dmx_ts_pes ts_pes;
+	dmx_pes_type_t ts_pes;
 	struct dmx_ts_feed *tsfeed;
 
 	feed->ts = NULL;
 	otype = para->output;
 
-	ts_pes = (enum dmx_ts_pes)para->pes_type;
+	ts_pes = para->pes_type;
 
 	if (ts_pes < DMX_PES_OTHER)
 		ts_type = TS_DECODER;
@@ -762,8 +741,6 @@
 	dmxdevfilter->type = DMXDEV_TYPE_NONE;
 	dvb_dmxdev_filter_state_set(dmxdevfilter, DMXDEV_STATE_ALLOCATED);
 	init_timer(&dmxdevfilter->timer);
-
-	dvbdev->users++;
 
 	mutex_unlock(&dmxdev->mutex);
 	return 0;
@@ -949,17 +926,18 @@
 	struct dmxdev_filter *dmxdevfilter = file->private_data;
 	int ret;
 
-	if (mutex_lock_interruptible(&dmxdevfilter->mutex))
-		return -ERESTARTSYS;
-
-	if (dmxdevfilter->type == DMXDEV_TYPE_SEC)
+	if (dmxdevfilter->type == DMXDEV_TYPE_SEC) {
+		if (mutex_lock_interruptible(&dmxdevfilter->mutex))
+			return -ERESTARTSYS;
+
 		ret = dvb_dmxdev_read_sec(dmxdevfilter, file, buf, count, ppos);
+		mutex_unlock(&dmxdevfilter->mutex);
+	}
 	else
 		ret = dvb_dmxdev_buffer_read(&dmxdevfilter->buffer,
 					     file->f_flags & O_NONBLOCK,
 					     buf, count, ppos);
 
-	mutex_unlock(&dmxdevfilter->mutex);
 	return ret;
 }
 
@@ -1119,21 +1097,7 @@
 	struct dmxdev_filter *dmxdevfilter = file->private_data;
 	struct dmxdev *dmxdev = dmxdevfilter->dev;
 
-	int ret;
-
-	ret = dvb_dmxdev_filter_free(dmxdev, dmxdevfilter);
-
-	mutex_lock(&dmxdev->mutex);
-	dmxdev->dvbdev->users--;
-	if(dmxdev->dvbdev->users==1 && dmxdev->exit==1) {
-		fops_put(file->f_op);
-		file->f_op = NULL;
-		mutex_unlock(&dmxdev->mutex);
-		wake_up(&dmxdev->dvbdev->wait_queue);
-	} else
-		mutex_unlock(&dmxdev->mutex);
-
-	return ret;
+	return dvb_dmxdev_filter_free(dmxdev, dmxdevfilter);
 }
 
 static const struct file_operations dvb_demux_fops = {
@@ -1217,7 +1181,6 @@
 static struct dvb_device dvbdev_dvr = {
 	.priv = NULL,
 	.readers = 1,
-	.users = 1,
 	.fops = &dvb_dvr_fops
 };
 
@@ -1255,16 +1218,6 @@
 
 void dvb_dmxdev_release(struct dmxdev *dmxdev)
 {
-	dmxdev->exit=1;
-	if (dmxdev->dvbdev->users > 1) {
-		wait_event(dmxdev->dvbdev->wait_queue,
-				dmxdev->dvbdev->users==1);
-	}
-	if (dmxdev->dvr_dvbdev->users > 1) {
-		wait_event(dmxdev->dvr_dvbdev->wait_queue,
-				dmxdev->dvr_dvbdev->users==1);
-	}
-
 	dvb_unregister_device(dmxdev->dvbdev);
 	dvb_unregister_device(dmxdev->dvr_dvbdev);
 
--- a/drivers/media/dvb/dvb-core/dmxdev.h
+++ b/drivers/media/dvb/dvb-core/dmxdev.h
@@ -99,7 +99,6 @@
 	int filternum;
 	int capabilities;
 
-	unsigned int exit:1;
 #define DMXDEV_CAP_DUPLEX 1
 	struct dmx_frontend *dvr_orig_fe;
 
--- a/drivers/media/dvb/dvb-core/dvb_ca_en50221.c
+++ b/drivers/media/dvb/dvb-core/dvb_ca_en50221.c
@@ -41,14 +41,15 @@
 #include "dvb_ca_en50221.h"
 #include "dvb_ringbuffer.h"
 
-static int dvb_ca_en50221_debug;
+static int dvb_ca_en50221_debug = 0;
 
 module_param_named(cam_debug, dvb_ca_en50221_debug, int, 0644);
 MODULE_PARM_DESC(cam_debug, "enable verbose debug messages");
 
 #define dprintk if (dvb_ca_en50221_debug) printk
 
-#define INIT_TIMEOUT_SECS 10
+static int INIT_TIMEOUT_SECS = 10;
+static int WAIT_FREE_TIMEOUT_SECS = 3;
 
 #define HOST_LINK_BUF_SIZE 0x200
 
@@ -117,8 +118,17 @@
 	/* buffer for incoming packets */
 	struct dvb_ringbuffer rx_buffer;
 
+	/* wait queues for read() and write() operations */
+	wait_queue_head_t wait_queue;
+
 	/* timer used during various states of the slot */
 	unsigned long timeout;
+
+	int pollTime;
+
+	int waitWrite;
+	int camPollin;
+	int camPollout;
 };
 
 /* Private CA-interface information */
@@ -130,6 +140,10 @@
 	/* the DVB device */
 	struct dvb_device *dvbdev;
 
+	/* the DVB CI devices */
+	struct dvb_device *dvbdev_ci[2];
+	int slot_states[2];
+
 	/* Flags describing the interface (DVB_CA_FLAG_*) */
 	u32 flags;
 
@@ -144,6 +158,9 @@
 
 	/* PID of the monitoring thread */
 	struct task_struct *thread;
+
+	/* since we have multiple (logical) devices, we should protect them */
+	struct mutex io_mutex;
 
 	/* Flag indicating if the CA device is open */
 	unsigned int open:1;
@@ -162,6 +179,11 @@
 static int dvb_ca_en50221_read_data(struct dvb_ca_private *ca, int slot, u8 * ebuf, int ecount);
 static int dvb_ca_en50221_write_data(struct dvb_ca_private *ca, int slot, u8 * ebuf, int ecount);
 
+// Hack
+struct proc_dir_entry *ci_dir;
+
+struct dvb_ca_slot *ci0;
+struct dvb_ca_slot *ci1;
 
 /**
  * Safely find needle in haystack.
@@ -592,6 +614,8 @@
 
 	dprintk("%s\n", __func__);
 
+	mutex_lock(&ca->io_mutex);
+
 	/* check if we have space for a link buf in the rx_buffer */
 	if (ebuf == NULL) {
 		int buf_free;
@@ -664,6 +688,7 @@
 	if ((status = ca->pub->read_cam_control(ca->pub, slot, CTRLIF_STATUS)) < 0)
 		goto exit;
 	if (status & STATUSREG_RE) {
+		printk("read on slot %d failed ->state now linkinit\n", slot);
 		ca->slot_info[slot].slot_state = DVB_CA_SLOTSTATE_LINKINIT;
 		status = -EIO;
 		goto exit;
@@ -685,11 +710,13 @@
 
 	/* wake up readers when a last_fragment is received */
 	if ((buf[1] & 0x80) == 0x00) {
+		wake_up_interruptible(&ca->slot_info[slot].wait_queue);
 		wake_up_interruptible(&ca->wait_queue);
 	}
 	status = bytes_read;
 
 exit:
+	mutex_unlock(&ca->io_mutex);
 	return status;
 }
 
@@ -717,6 +744,8 @@
 	/* sanity check */
 	if (bytes_write > ca->slot_info[slot].link_buf_size)
 		return -EINVAL;
+
+	mutex_lock(&ca->io_mutex);
 
 	/* it is possible we are dealing with a single buffer implementation,
 	   thus if there is data available for read or if there is even a read
@@ -763,6 +792,7 @@
 	if ((status = ca->pub->read_cam_control(ca->pub, slot, CTRLIF_STATUS)) < 0)
 		goto exit;
 	if (status & STATUSREG_WE) {
+		printk("write on slot %d failed ->state now linkinit\n", slot);
 		ca->slot_info[slot].slot_state = DVB_CA_SLOTSTATE_LINKINIT;
 		status = -EIO;
 		goto exit;
@@ -776,6 +806,7 @@
 	ca->pub->write_cam_control(ca->pub, slot, CTRLIF_COMMAND, IRQEN);
 
 exitnowrite:
+	mutex_unlock(&ca->io_mutex);
 	return status;
 }
 EXPORT_SYMBOL(dvb_ca_en50221_camchange_irq);
@@ -801,6 +832,7 @@
 
 	/* need to wake up all processes to check if they're now
 	   trying to write to a defunct CAM */
+	wake_up_interruptible(&ca->slot_info[slot].wait_queue);
 	wake_up_interruptible(&ca->wait_queue);
 
 	dprintk("Slot %i shutdown\n", slot);
@@ -1039,6 +1071,13 @@
 				break;
 
 			case DVB_CA_SLOTSTATE_VALIDATE:
+				printk("DVB_CA_SLOTSTATE_VALIDATE %d\n", slot);
+
+				/*GustavGans: it seems that the validation process comes to early
+				  if MPEG stream is turned on and MPEG bypassing is disabled
+				  (the first tuple is invalid) */
+				mdelay(100);
+
 				if (dvb_ca_en50221_parse_attributes(ca, slot) != 0) {
 					/* we need this extra check for annoying interfaces like the budget-av */
 					if ((!(ca->flags & DVB_CA_EN50221_FLAG_IRQ_CAMCHANGE)) &&
@@ -1138,6 +1177,10 @@
 				// poll slots for data
 				pktcount = 0;
 				while ((status = dvb_ca_en50221_read_data(ca, slot, NULL, 0)) > 0) {
+					mutex_lock(&ca->io_mutex);
+					ca->slot_info[slot].camPollin = 1;
+					mutex_unlock(&ca->io_mutex);
+
 					if (!ca->open)
 						break;
 
@@ -1155,6 +1198,22 @@
 						break;
 					}
 				}
+
+				/* wg pollwri: wake up poll waiters if there is nothing todo, so he can write some data */
+				if ((status = ca->pub->read_cam_control(ca->pub, slot, CTRLIF_STATUS)) >= 0)
+				{
+					if (!(status & STATUSREG_DA))
+						if (!(status & STATUSREG_RE))
+							if (status & STATUSREG_FR)
+							{
+								mutex_lock(&ca->io_mutex);
+								ca->slot_info[slot].camPollout = 1;
+								mutex_unlock(&ca->io_mutex);
+
+								wake_up_interruptible(&ca->slot_info[slot].wait_queue);
+								wake_up_interruptible(&ca->wait_queue);
+							}
+				}
 				break;
 			}
 
@@ -1193,6 +1252,9 @@
 
 	switch (cmd) {
 	case CA_RESET:
+
+// Resetting only requested slot is good idea maybe :-/
+#ifdef alt
 		for (slot = 0; slot < ca->slot_count; slot++) {
 			mutex_lock(&ca->slot_info[slot].slot_lock);
 			if (ca->slot_info[slot].slot_state != DVB_CA_SLOTSTATE_NONE) {
@@ -1204,6 +1266,21 @@
 			}
 			mutex_unlock(&ca->slot_info[slot].slot_lock);
 		}
+#else
+		for (slot = 0; slot < ca->slot_count; slot++) {
+			int mySlot = ((int) parg);
+
+			dprintk("mySlot = %d, searched %d\n", mySlot, slot);
+
+			if (mySlot != slot)
+				continue;
+
+			dprintk("->reset %d\n", mySlot);
+
+			//dagobert: rest will be done in loop
+			ca->slot_info[slot].slot_state = DVB_CA_SLOTSTATE_UNINITIALISED;
+		}
+#endif
 		ca->next_read_slot = 0;
 		dvb_ca_en50221_thread_wakeup(ca);
 		break;
@@ -1345,9 +1422,40 @@
 	status = count + 2;
 
 exit:
+	ca->slot_info[slot].waitWrite = 0;
 	return status;
 }
 
+static int dvb_ca_en50221_io_read_condition_for_slot(struct dvb_ca_private *ca, int slot)
+{
+	int idx;
+	size_t fraglen;
+	int connection_id = -1;
+	int found = 0;
+	u8 hdr[2];
+
+	if (ca->slot_info[slot].slot_state != DVB_CA_SLOTSTATE_RUNNING)
+		return 0;
+
+	if (ca->slot_info[slot].rx_buffer.data == NULL) {
+		return 0;
+	}
+
+	idx = dvb_ringbuffer_pkt_next(&ca->slot_info[slot].rx_buffer, -1, &fraglen);
+	while (idx != -1) {
+		dvb_ringbuffer_pkt_read(&ca->slot_info[slot].rx_buffer, idx, 0, hdr, 2);
+		if (connection_id == -1)
+			connection_id = hdr[0];
+		if ((hdr[0] == connection_id) && ((hdr[1] & 0x80) == 0)) {
+			found = 1;
+			break;
+		}
+
+		idx = dvb_ringbuffer_pkt_next(&ca->slot_info[slot].rx_buffer, idx, &fraglen);
+	}
+
+	return found;
+}
 
 /**
  * Condition for waking up in dvb_ca_en50221_io_read_condition
@@ -1421,12 +1529,94 @@
 	size_t fraglen;
 	int pktlen;
 	int dispose = 0;
+	int ci_slot = -1;
 
 	dprintk("%s\n", __func__);
 
 	/* Outgoing packet has a 2 byte header. hdr[0] = slot_id, hdr[1] = connection_id */
 	if (count < 2)
 		return -EINVAL;
+
+	if (dvbdev == ca->dvbdev_ci[0])
+		ci_slot = 0;
+	else
+	if (dvbdev == ca->dvbdev_ci[1])
+		ci_slot = 1;
+
+	if (ci_slot != -1)
+	{
+		/* is there something to read ? */
+		if ((status = dvb_ca_en50221_io_read_condition_for_slot(ca, ci_slot)) == 0) {
+			/* if we're in nonblocking mode, exit immediately */
+			if (file->f_flags & O_NONBLOCK)
+			{
+				return -EWOULDBLOCK;
+			}
+
+			/* wait for some data */
+			status = wait_event_interruptible(ca->slot_info[ci_slot].wait_queue,
+							  dvb_ca_en50221_io_read_condition_for_slot
+							  (ca, ci_slot));
+			dprintk("status = %d\n", status);
+		}
+
+		if ((status < 0)) {
+			return status;
+		}
+
+		slot = ci_slot;
+
+		idx = dvb_ringbuffer_pkt_next(&ca->slot_info[slot].rx_buffer, -1, &fraglen);
+		pktlen = 2;
+		do {
+			if (idx == -1) {
+				printk("dvb_ca adapter %d: BUG: read packet ended before last_fragment encountered\n", ca->dvbdev->adapter->num);
+
+				printk("pktlen = %d, fraglen = %d, count = %d, con_id = %d\n", pktlen, fraglen, count, connection_id);	
+		
+				status = -EIO;
+				goto exit;
+			}
+
+			dvb_ringbuffer_pkt_read(&ca->slot_info[slot].rx_buffer, idx, 0, hdr, 2);
+			if (connection_id == -1)
+				connection_id = hdr[0];
+			if (hdr[0] == connection_id) {
+				if (pktlen < count) {
+					if ((pktlen + fraglen - 2) > count) {
+						fraglen = count - pktlen;
+					} else {
+						fraglen -= 2;
+					}
+
+					if ((status = dvb_ringbuffer_pkt_read(&ca->slot_info[slot].rx_buffer, idx, 2, buf + pktlen, fraglen)) < 0) {
+						goto exit;
+					}
+					pktlen += fraglen;
+				}
+
+				if ((hdr[1] & 0x80) == 0)
+					last_fragment = 1;
+				dispose = 1;
+			}
+
+			idx2 = dvb_ringbuffer_pkt_next(&ca->slot_info[slot].rx_buffer, idx, &fraglen);
+			if (dispose)
+				dvb_ringbuffer_pkt_dispose(&ca->slot_info[slot].rx_buffer, idx);
+			idx = idx2;
+			dispose = 0;
+		} while (!last_fragment);
+
+		hdr[0] = slot;
+		hdr[1] = connection_id;
+
+		if ((status = copy_to_user(buf, hdr, 2)) != 0)
+			goto exit;
+
+		status = pktlen;
+
+		return status;
+	}
 
 	/* wait for some data */
 	if ((status = dvb_ca_en50221_io_read_condition(ca, &result, &slot)) == 0) {
@@ -1584,6 +1774,121 @@
 	unsigned int mask = 0;
 	int slot;
 	int result = 0;
+	int ci_slot = -1;
+
+#ifdef x_debug
+	//dprintk("%s\n", __FUNCTION__);
+#endif
+	/* Dagobert */
+	if (dvbdev == ca->dvbdev_ci[0])
+		ci_slot = 0;
+	else
+	if (dvbdev == ca->dvbdev_ci[1])
+		ci_slot = 1;
+
+	if (ci_slot != -1)
+	{
+#ifdef x_debug
+		//dprintk("CI Slot = %d\n", ci_slot);
+		//dprintk("%d ", ci_slot);
+#endif
+
+		/* get the desired slot from list and check for changed status
+		 * ->e2 seems to want this only on removal of module and on errors
+		 */
+		if (ca->slot_info[ci_slot].slot_state != ca->slot_states[ci_slot])
+		{
+#ifdef x_debug
+			//dprintk("old %d, new %d (type %d)\n", ca->slot_states[ci_slot], ca->slot_info[ci_slot].slot_state, ca->slot_info[ci_slot].camchange_type);
+#endif
+			ca->slot_states[ci_slot] = ca->slot_info[ci_slot].slot_state;
+
+			if (ca->slot_info[ci_slot].camchange_type == DVB_CA_EN50221_CAMCHANGE_REMOVED)
+			{
+				mask |= POLLPRI;
+#ifdef x_debug
+				printk("return POLLPRI on slot %d ->removed\n", ci_slot);
+#endif
+				return mask;
+			} else
+			if (ca->slot_info[ci_slot].camchange_type == DVB_CA_EN50221_CAMCHANGE_INSERTED)
+			{
+				if (ca->slot_info[ci_slot].slot_state == DVB_CA_SLOTSTATE_RUNNING)
+				{
+					mask |= POLLPRI;
+#ifdef x_debug
+					printk("return POLLPRI on slot %d ->inserted\n", ci_slot);
+#endif
+					return mask;
+				}
+			}
+		}
+
+		mutex_lock(&ca->io_mutex);
+		if(ca->slot_info[ci_slot].camPollout)
+			mask |= POLLOUT;
+
+		if(ca->slot_info[ci_slot].camPollin)
+			mask |= POLLIN;
+
+		ca->slot_info[ci_slot].camPollin = 0;
+		ca->slot_info[ci_slot].camPollout = 0;
+		mutex_unlock(&ca->io_mutex);
+
+		if(mask != 0)
+		{
+			return mask;
+		}
+
+		/* wait for something to happen */
+		poll_wait(file, &ca->slot_info[ci_slot].wait_queue, wait);
+
+		/* get the desired slot from list and check for changed status
+		 * ->e2 seems to want this only on removal of module and on errors
+		 */
+		if (ca->slot_info[ci_slot].slot_state != ca->slot_states[ci_slot])
+		{
+#ifdef x_debug
+			dprintk("old %d, new %d (type %d)\n", ca->slot_states[ci_slot], ca->slot_info[ci_slot].slot_state, ca->slot_info[ci_slot].camchange_type);
+#endif
+			ca->slot_states[ci_slot] = ca->slot_info[ci_slot].slot_state;
+
+			if (ca->slot_info[ci_slot].camchange_type == DVB_CA_EN50221_CAMCHANGE_REMOVED)
+			{
+				mask |= POLLPRI;
+#ifdef x_debug
+				printk("return POLLPRI on slot %d ->removed\n", ci_slot);
+#endif
+				return mask;
+			} else
+			if (ca->slot_info[ci_slot].camchange_type == DVB_CA_EN50221_CAMCHANGE_INSERTED)
+			{
+				if (ca->slot_info[ci_slot].slot_state == DVB_CA_SLOTSTATE_RUNNING)
+				{
+					mask |= POLLPRI;
+#ifdef x_debug
+					printk("return POLLPRI on slot %d ->inserted\n", ci_slot);
+#endif
+					return mask;
+				}
+			}
+		}
+
+		mutex_lock(&ca->io_mutex);
+		if(ca->slot_info[ci_slot].camPollout)
+			mask |= POLLOUT;
+
+		if(ca->slot_info[ci_slot].camPollin)
+			mask |= POLLIN;
+
+		ca->slot_info[ci_slot].camPollin = 0;
+		ca->slot_info[ci_slot].camPollout = 0;
+		mutex_unlock(&ca->io_mutex);
+
+		return mask;
+	}
+
+	/* normal caN handling */
 
 	dprintk("%s\n", __func__);
 
@@ -1625,6 +1930,22 @@
 	.fops = &dvb_ca_fops,
 };
 
+static struct dvb_device dvbdev_ci[2] = {
+{
+	.priv = NULL,
+	.users = 1,
+	.readers = 1,
+	.writers = 1,
+	.fops = &dvb_ca_fops,
+},
+{
+	.priv = NULL,
+	.users = 1,
+	.readers = 1,
+	.writers = 1,
+	.fops = &dvb_ca_fops,
+}};
+
 
 /* ******************************************************************************** */
 /* Initialisation/shutdown functions */
@@ -1664,6 +1985,9 @@
 		ret = -ENOMEM;
 		goto error;
 	}
+
+	mutex_init(&ca->io_mutex);
+
 	init_waitqueue_head(&ca->wait_queue);
 	ca->open = 0;
 	ca->wakeup = 0;
@@ -1678,10 +2002,19 @@
 	/* now initialise each slot */
 	for (i = 0; i < slot_count; i++) {
 		memset(&ca->slot_info[i], 0, sizeof(struct dvb_ca_slot));
+
+		init_waitqueue_head(&ca->slot_info[i].wait_queue);
 		ca->slot_info[i].slot_state = DVB_CA_SLOTSTATE_NONE;
 		atomic_set(&ca->slot_info[i].camchange_count, 0);
 		ca->slot_info[i].camchange_type = DVB_CA_EN50221_CAMCHANGE_REMOVED;
 		mutex_init(&ca->slot_info[i].slot_lock);
+
+		/* add a ci device entry */
+		ret = dvb_register_device(dvb_adapter, &ca->dvbdev_ci[i], &dvbdev_ci[i], ca, DVB_DEVICE_CI);
+		ca->slot_states[i] = DVB_CA_EN50221_CAMCHANGE_REMOVED;
+		if (ret)
+			printk("error creating ci device for slot %d\n", i);
+
 	}
 
 	if (signal_pending(current)) {
--- a/drivers/media/dvb/dvb-core/dvbdev.c
+++ b/drivers/media/dvb/dvb-core/dvbdev.c
@@ -47,7 +47,7 @@
 
 static const char * const dnames[] = {
 	"video", "audio", "sec", "frontend", "demux", "dvr", "ca",
-	"net", "osd"
+	"net", "osd", "ci"
 };
 
 #ifdef CONFIG_DVB_DYNAMIC_MINORS
--- a/drivers/media/dvb/dvb-core/dvbdev.h
+++ b/drivers/media/dvb/dvb-core/dvbdev.h
@@ -47,6 +47,7 @@
 #define DVB_DEVICE_CA         6
 #define DVB_DEVICE_NET        7
 #define DVB_DEVICE_OSD        8
+#define DVB_DEVICE_CI         9
 
 #define DVB_DEFINE_MOD_OPT_ADAPTER_NR(adapter_nr) \
 	static short adapter_nr[] = \
--- a/include/linux/dvb/video.h
+++ b/include/linux/dvb/video.h
@@ -120,6 +120,11 @@
 		struct {
 			__u32 data[16];
 		} raw;
+
+		struct {
+			unsigned int    option; /* really dvb_option_t but like this so don't modify kernel sources too much */
+			unsigned int    value;
+		} option;
 	};
 };
 
--- a/include/linux/dvb/frontend.h
+++ b/include/linux/dvb/frontend.h
@@ -62,6 +62,8 @@
 	FE_CAN_8VSB			= 0x200000,
 	FE_CAN_16VSB			= 0x400000,
 	FE_HAS_EXTENDED_CAPS		= 0x800000,   /* We need more bitspace for newer APIs, indicate this. */
+	FE_CAN_MULTISTREAM		= 0x4000000,  /* frontend supports multistream filtering */
+	FE_CAN_TURBO_FEC		= 0x8000000,  /* frontend supports "turbo fec modulation" */
 	FE_CAN_2G_MODULATION		= 0x10000000, /* frontend supports "2nd generation modulation" (DVB-S2) */
 	FE_NEEDS_BENDING		= 0x20000000, /* not supported anymore, don't use (frontend requires frequency bending) */
 	FE_CAN_RECOVER			= 0x40000000, /* frontend can recover from a cable unplug automatically */
@@ -174,14 +176,20 @@
 	TRANSMISSION_MODE_2K,
 	TRANSMISSION_MODE_8K,
 	TRANSMISSION_MODE_AUTO,
-	TRANSMISSION_MODE_4K
+	TRANSMISSION_MODE_4K,
+	TRANSMISSION_MODE_1K,
+	TRANSMISSION_MODE_16K,
+	TRANSMISSION_MODE_32K,
 } fe_transmit_mode_t;
 
 typedef enum fe_bandwidth {
 	BANDWIDTH_8_MHZ,
 	BANDWIDTH_7_MHZ,
 	BANDWIDTH_6_MHZ,
-	BANDWIDTH_AUTO
+	BANDWIDTH_AUTO,
+	BANDWIDTH_5_MHZ,
+	BANDWIDTH_10_MHZ,
+	BANDWIDTH_1_712_MHZ,
 } fe_bandwidth_t;
 
 
@@ -190,7 +198,10 @@
 	GUARD_INTERVAL_1_16,
 	GUARD_INTERVAL_1_8,
 	GUARD_INTERVAL_1_4,
-	GUARD_INTERVAL_AUTO
+	GUARD_INTERVAL_AUTO,
+	GUARD_INTERVAL_1_128,
+	GUARD_INTERVAL_19_128,
+	GUARD_INTERVAL_19_256,
 } fe_guard_interval_t;
 
 
@@ -302,9 +313,12 @@
 
 #define DTV_ISDBT_LAYER_ENABLED	41
 
-#define DTV_ISDBS_TS_ID		42
-
-#define DTV_MAX_COMMAND				DTV_ISDBS_TS_ID
+#define DTV_STREAM_ID		42
+#define DTV_ISDBS_TS_ID		DTV_STREAM_ID
+#define DTV_DVBT2_PLP_ID	43
+#define DTV_DVBS2_MIS_ID	DTV_DVBT2_PLP_ID
+
+#define DTV_MAX_COMMAND		DTV_DVBT2_PLP_ID
 
 typedef enum fe_pilot {
 	PILOT_ON,
@@ -336,7 +350,10 @@
 	SYS_DMBTH,
 	SYS_CMMB,
 	SYS_DAB,
+	SYS_DVBT2,
 } fe_delivery_system_t;
+
+#define NO_STREAM_ID_FILTER	(~0U)
 
 struct dtv_cmds_h {
 	char	*name;		/* A display name for debugging purposes */
--- a/include/linux/dvb/version.h
+++ b/include/linux/dvb/version.h
@@ -24,6 +24,6 @@
 #define _DVBVERSION_H_
 
 #define DVB_API_VERSION 5
-#define DVB_API_VERSION_MINOR 1
+#define DVB_API_VERSION_MINOR 3
 
 #endif /*_DVBVERSION_H_*/
--- a/drivers/media/dvb/dvb-core/dvb_frontend.h
+++ b/drivers/media/dvb/dvb-core/dvb_frontend.h
@@ -356,8 +356,8 @@
 	    u8			interleaving;
 	} layer[3];
 
-	/* ISDB-T specifics */
-	u32			isdbs_ts_id;
+	/* Multistream specifics */
+	u32			stream_id;
 };
 
 struct dvb_frontend {
--- a/drivers/media/dvb/dvb-core/dvb_frontend.c
+++ b/drivers/media/dvb/dvb-core/dvb_frontend.c
@@ -883,6 +883,8 @@
 		fe->dtv_property_cache.layer[i].segment_count = -1;
 	}
 
+	fe->dtv_property_cache.stream_id = -1;
+
 	return 0;
 }
 
@@ -1032,7 +1034,8 @@
 	_DTV_CMD(DTV_ISDBT_LAYERC_SEGMENT_COUNT, 0, 0),
 	_DTV_CMD(DTV_ISDBT_LAYERC_TIME_INTERLEAVING, 0, 0),
 
-	_DTV_CMD(DTV_ISDBS_TS_ID, 1, 0),
+	_DTV_CMD(DTV_STREAM_ID, 1, 0),
+	_DTV_CMD(DTV_DVBT2_PLP_ID, 1, 0),
 
 	/* Get */
 	[DTV_DISEQC_SLAVE_REPLY] = {
@@ -1248,10 +1251,8 @@
 		break;
 	}
 
-	if(c->delivery_system == SYS_ISDBT) {
+	if ((c->delivery_system == SYS_ISDBT) || (c->delivery_system == SYS_DVBT2)) {
 		/* Fake out a generic DVB-T request so we pass validation in the ioctl */
-		p->frequency = c->frequency;
-		p->inversion = c->inversion;
 		p->u.ofdm.constellation = QAM_AUTO;
 		p->u.ofdm.code_rate_HP = FEC_AUTO;
 		p->u.ofdm.code_rate_LP = FEC_AUTO;
@@ -1423,8 +1424,11 @@
 	case DTV_ISDBT_LAYERC_TIME_INTERLEAVING:
 		tvp->u.data = fe->dtv_property_cache.layer[2].interleaving;
 		break;
-	case DTV_ISDBS_TS_ID:
-		tvp->u.data = fe->dtv_property_cache.isdbs_ts_id;
+	case DTV_STREAM_ID:
+		tvp->u.data = fe->dtv_property_cache.stream_id;
+		break;
+	case DTV_DVBT2_PLP_ID:
+		tvp->u.data = fe->dtv_property_cache.stream_id;
 		break;
 	default:
 		r = -1;
@@ -1577,8 +1581,11 @@
 	case DTV_ISDBT_LAYERC_TIME_INTERLEAVING:
 		fe->dtv_property_cache.layer[2].interleaving = tvp->u.data;
 		break;
-	case DTV_ISDBS_TS_ID:
-		fe->dtv_property_cache.isdbs_ts_id = tvp->u.data;
+	case DTV_STREAM_ID:
+		fe->dtv_property_cache.stream_id = tvp->u.data;
+		break;
+	case DTV_DVBT2_PLP_ID:
+		fe->dtv_property_cache.stream_id = tvp->u.data;
 		break;
 	default:
 		r = -1;
--- a/include/linux/dvb/ca.h
+++ b/include/linux/dvb/ca.h
@@ -78,6 +78,24 @@
 	int index;		/* -1 == disable*/
 } ca_pid_t;
 
+enum ca_descr_data_type {
+	CA_DATA_IV,
+	CA_DATA_KEY
+};
+
+enum ca_descr_parity {
+	CA_PARITY_EVEN,
+	CA_PARITY_ODD
+};
+
+typedef struct ca_descr_data {
+	unsigned int index;
+	enum ca_descr_parity parity;
+	enum ca_descr_data_type data_type;
+	unsigned int length;
+	unsigned char *data;
+}ca_descr_data_t;
+
 #define CA_RESET          _IO('o', 128)
 #define CA_GET_CAP        _IOR('o', 129, ca_caps_t)
 #define CA_GET_SLOT_INFO  _IOR('o', 130, ca_slot_info_t)
@@ -86,5 +104,6 @@
 #define CA_SEND_MSG       _IOW('o', 133, ca_msg_t)
 #define CA_SET_DESCR      _IOW('o', 134, ca_descr_t)
 #define CA_SET_PID        _IOW('o', 135, ca_pid_t)
+#define CA_SET_DESCR_DATA _IOW('o', 137, ca_descr_data_t)
 
 #endif
