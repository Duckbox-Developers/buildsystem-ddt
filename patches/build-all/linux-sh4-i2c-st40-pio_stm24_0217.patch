--- /dev/null
+++ b/drivers/i2c/busses/i2c-st40-pio.c
@@ -0,0 +1,221 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/i2c.h>
+#include <linux/i2c-algo-bit.h>
+#include <asm/io.h>
+#include <asm/param.h>
+#include <linux/stm/platform.h>
+#include <linux/stm/ssc.h>
+#include <linux/stm/pio.h>
+
+#define NAME "i2c_st40_pio"
+
+struct pio_data
+{
+	struct stpio_pin *scl;
+	struct stpio_pin *sda;
+	struct sysconf_field **sysconfigs;
+	struct i2c_adapter *i2c_bus;
+};
+
+static void bit_st40_pio_setscl(void *data, int state)
+{
+	struct pio_data *pio = (struct pio_data *)data;
+	stpio_set_pin(pio->scl, state);
+	stpio_get_pin(pio->scl);
+}
+
+static void bit_st40_pio_setsda(void *data, int state)
+{
+	struct pio_data *pio = (struct pio_data *)data;
+	stpio_set_pin(pio->sda, state);
+	stpio_get_pin(pio->sda);
+}
+
+static int bit_st40_pio_getscl(void *data)
+{
+	struct pio_data *pio = (struct pio_data *)data;
+	return stpio_get_pin(pio->scl);
+}
+
+static int bit_st40_pio_getsda(void *data)
+{
+	struct pio_data *pio = (struct pio_data *)data;
+	return stpio_get_pin(pio->sda);
+}
+
+static int __init i2c_st40_probe(struct platform_device *pdev)
+{
+	struct stm_plat_ssc_data *plat_data = pdev->dev.platform_data;
+	struct i2c_adapter *i2c_bus;
+	struct i2c_algo_bit_data *algo;
+	struct pio_data *pio;
+	int i;
+	unsigned pin;
+
+	i2c_bus = devm_kzalloc(&pdev->dev, sizeof(struct i2c_adapter),
+			GFP_KERNEL);
+	if (!i2c_bus)
+		return -1;
+
+	algo = devm_kzalloc(&pdev->dev, sizeof(struct i2c_algo_bit_data),
+			GFP_KERNEL);
+	if (!algo)
+		return -1;
+		
+	pio = devm_kzalloc(&pdev->dev, sizeof(struct pio_data),
+			GFP_KERNEL);
+	if(!pio)
+		return -1;
+	
+	pio->sysconfigs = devm_kzalloc(&pdev->dev, sizeof(struct sysconf_field *) * plat_data->pad_config->sysconfs_num,
+			GFP_KERNEL);
+	if(!pio->sysconfigs)
+		return -1;
+		
+		
+	// @stm why don't you provide a get_pins_from_pad and de-deprecate the stpio api?
+	pin = stpio_request_pin(	stm_gpio_port(plat_data->pad_config->gpios[0].gpio), 
+					stm_gpio_pin(plat_data->pad_config->gpios[0].gpio),
+					plat_data->pad_config->gpios[0].name,
+					STM_GPIO_DIRECTION_BIDIR);
+	if(plat_data->pad_config->gpios[0].name[1] == 'C')  // SCL or SDA
+		pio->scl = pin;
+	else
+		pio->sda = pin;
+		
+	pin = stpio_request_pin(	stm_gpio_port(plat_data->pad_config->gpios[1].gpio), 
+					stm_gpio_pin(plat_data->pad_config->gpios[1].gpio),
+					plat_data->pad_config->gpios[1].name,
+					STM_GPIO_DIRECTION_BIDIR);
+	if(plat_data->pad_config->gpios[1].name[1] == 'C') // SCL or SDA
+		pio->scl = pin;
+	else
+		pio->sda = pin;					
+					
+	// WHY do we have to do that here? again get_pins_from_pad would be nice ^_^
+	for (i = 0; i < plat_data->pad_config->sysconfs_num; i++) 
+	{
+		struct stm_pad_sysconf *sysconf = &plat_data->pad_config->sysconfs[i];
+		struct sysconf_field* sc;
+		pio->sysconfigs[i] = sysconf_claim(sysconf->regtype, sysconf->regnum, sysconf->lsb, sysconf->msb, "i2c-st40");
+		if(!pio->sysconfigs[i])
+		{
+			printk("error: cannot claim i2c sysconfig\n");
+			return -1;
+		}
+		sysconf_write(pio->sysconfigs[i], sysconf->value);
+	}
+
+	sprintf(i2c_bus->name, "i2c-st40-%d", pdev->id);
+	i2c_bus->nr = pdev->id;
+	i2c_bus->algo_data = algo;
+	i2c_bus->dev.parent = &pdev->dev;
+	i2c_bus->class = I2C_CLASS_HWMON | I2C_CLASS_TV_ANALOG | I2C_CLASS_TV_DIGITAL | I2C_CLASS_DDC | I2C_CLASS_SPD;
+
+	algo->data = pio;
+	algo->setsda = bit_st40_pio_setsda;
+	algo->setscl = bit_st40_pio_setscl;
+	algo->getsda = bit_st40_pio_getsda;
+	algo->getscl = bit_st40_pio_getscl;
+	algo->udelay = 5;
+	algo->timeout = HZ;
+
+	pio->i2c_bus = i2c_bus;
+	platform_set_drvdata(pdev, pio);
+	if (i2c_bit_add_numbered_bus(i2c_bus) < 0) 
+	{
+		printk(KERN_ERR NAME "The I2C Core refuses the i2c-pio adapter\n");
+		return -1;
+	}
+
+	return 0;
+}
+
+static int i2c_st40_remove(struct platform_device *pdev)
+{
+	struct stm_plat_ssc_data *plat_data = pdev->dev.platform_data;
+	struct pio_data *pio = (struct pio_data *)platform_get_drvdata(pdev);
+	struct i2c_algo_bit_data *algo = pio->i2c_bus->algo_data;
+	int i;
+
+	i2c_del_adapter(pio->i2c_bus);
+
+	stpio_free_pin(pio->scl);
+	stpio_free_pin(pio->sda);
+	devm_kfree(&pdev->dev, algo);
+	devm_kfree(&pdev->dev, pio->i2c_bus);
+	devm_kfree(&pdev->dev, pio->i2c_bus);
+		
+	for (i = 0; i < plat_data->pad_config->sysconfs_num; i++) 
+		sysconf_release(pio->sysconfigs[i]);
+		
+	devm_kfree(&pdev->dev, pio->sysconfigs);
+	devm_kfree(&pdev->dev, pio);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int i2c_st40_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	struct pio_data *pio = (struct pio_data *)platform_get_drvdata(pdev);
+	stpio_configure_pin(pio->scl, STPIO_IN);
+	stpio_configure_pin(pio->sda, STPIO_IN);
+	return 0;
+}
+static int i2c_st40_resume(struct platform_device *pdev)
+{
+	struct pio_data *pio = (struct pio_data *)platform_get_drvdata(pdev);
+	stpio_configure_pin(pio->scl, STPIO_BIDIR);
+	stpio_configure_pin(pio->sda, STPIO_BIDIR);
+
+	stpio_set_pin(pio_info->scl, 1);
+	stpio_set_pin(pio_info->sda, 1);
+	return 0;
+}
+#else
+  #define i2c_st40_suspend	NULL
+  #define i2c_st40_resume	NULL
+#endif
+
+static struct dev_pm_ops i2c_pm_ops = {
+	.suspend = i2c_st40_suspend,
+	.resume = i2c_st40_resume,
+	.freeze = i2c_st40_suspend,
+	.restore = i2c_st40_resume,
+	.runtime_suspend = i2c_st40_suspend,
+	.runtime_resume = i2c_st40_resume,
+};
+
+static struct platform_driver i2c_sw_driver = {
+	.driver.name = "i2c-st40",
+	.driver.owner = THIS_MODULE,
+	.driver.pm = &i2c_pm_ops,
+	.probe = i2c_st40_probe,
+	.remove= i2c_st40_remove,
+};
+
+static int __init i2c_st40_pio_init(void)
+{
+	printk(KERN_INFO NAME": ST40 PIO based I2C Driver for STM24\n");
+
+	platform_driver_register(&i2c_sw_driver);
+
+	return 0;
+}
+
+static void __exit i2c_st40_pio_exit(void)
+{
+	platform_driver_unregister(&i2c_sw_driver);
+}
+
+MODULE_AUTHOR("Oxygen-1");
+MODULE_DESCRIPTION("ST40 PIO based I2C Driver for stm24");
+MODULE_LICENSE("GPL");
+
+module_init(i2c_st40_pio_init);
+module_exit(i2c_st40_pio_exit);
--- a/drivers/i2c/busses/Kconfig	2011-04-23 13:14:08.000000000 +0200
+++ b/drivers/i2c/busses/Kconfig	2011-04-25 21:24:50.107433000 +0200
@@ -540,6 +540,16 @@
 
 	  This driver can also be built as a module. If so, the module
 	  will be called i2c-simtec.
+	  
+config I2C_ST40_PIO
+	tristate "Team Ducktales STM I2C Controller in PIO Mode"
+	depends on CPU_SUBTYPE_ST40
+	help
+	  Enable this option to add support for STMicroelectronics SoCs
+	  hardware SSC (Synchronous Serial Controller) as a I2C controller.
+
+	  i2c-stm will not work on some platforms and a st40-pio like driver was
+	  developed for stlinux 2.4
 
 config I2C_STM
 	tristate "STMicroelectronics SSC I2C support"
--- a/drivers/i2c/busses/Makefile	2011-04-25 20:16:47.254646000 +0200
+++ b/drivers/i2c/busses/Makefile	2011-04-25 21:22:30.870834000 +0200
@@ -75,6 +75,7 @@
 obj-$(CONFIG_SCx200_ACB)	+= scx200_acb.o
 obj-$(CONFIG_SCx200_I2C)	+= scx200_i2c.o
 obj-$(CONFIG_I2C_STM)		+= i2c-stm.o
+obj-$(CONFIG_I2C_ST40_PIO)	+= i2c-st40-pio.o
 
 ifeq ($(CONFIG_I2C_DEBUG_BUS),y)
 EXTRA_CFLAGS += -DDEBUG
