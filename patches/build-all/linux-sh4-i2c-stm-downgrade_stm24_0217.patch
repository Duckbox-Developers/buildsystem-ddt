--- a/drivers/i2c/busses/i2c-stm.c
+++ b/drivers/i2c/busses/i2c-stm.c
@@ -48,19 +48,10 @@
  *     can help with spurious noise glitches on the SCK line and in the
  *     case where SCK rise times are marginal due to capacitance on the
  *     bus.
- * Version 2.6 (1 Apr 2010) Francesco Virlinzi <francesco.virlinzi@st.com>
- *   + Added the new state (IDLE) in the i2c fsm.
- *		Now each transaction completed with a STOP condition
- *		leaves the SSC in I2C-Slave more. In this state the SSC
- *		seems less sensible to the noise on the bus.
- * Version 2.7  (01 Jun 2010) Bruno Strudel <bruno.strudel@st.com>
- *   + Fixed the IIC_FSM_REPSTART_ADDR to wait in case of clock stretching
- * Version 2.8  (28 Oct 2011) Francesco Virlinzi <francesco.virlinzi@st.com>
- *   + Fixed Idle state to avoid glitch on SDA
  *
  * --------------------------------------------------------------------
  *
- *  Copyright (C) 2006 - 2010 STMicroelectronics
+ *  Copyright (C) 2006 - 2008 STMicroelectronics
  *  Author: Francesco Virlinzi     <francesco.virlinzi@st.com>
  *
  * May be copied or modified under the terms of the GNU General Public
@@ -81,6 +72,7 @@
 #include <linux/errno.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/ssc.h>
+#include "i2c-stm.h"
 
 #undef dbg_print
 
@@ -141,15 +133,10 @@
 #endif
 
 #ifdef CONFIG_I2C_STM_HW_GLITCH
-#if CONFIG_HW_GLITCH_CLK_WIDTH > 0
-#define HW_GLITCH_CLK_WIDTH			CONFIG_HW_GLITCH_CLK_WIDTH
+#if CONFIG_HW_GLITCH_WIDTH > 0
+#define HW_GLITCH_WIDTH			CONFIG_HW_GLITCH_WIDTH
 #else
-#define HW_GLITCH_CLK_WIDTH			0	/* in microseconds */
-#endif
-#if CONFIG_HW_GLITCH_DATA_WIDTH > 0
-#define HW_GLITCH_DATA_WIDTH			CONFIG_HW_GLITCH_DATA_WIDTH
-#else
-#define HW_GLITCH_DATA_WIDTH			5	/* in microseconds */
+#define HW_GLITCH_WIDTH			1	/* in microseconds */
 #endif
 #endif
 
@@ -161,7 +148,6 @@
 
 enum iic_state_machine {
 	IIC_FSM_VOID = 0,
-	IIC_FSM_IDLE,
 	IIC_FSM_PREPARE,
 	IIC_FSM_NOREPSTART,
 	IIC_FSM_START,
@@ -210,7 +196,6 @@
 
 struct iic_ssc {
 	void __iomem *base;
-	struct clk *clk;
 	struct iic_transaction *trns;
 	struct i2c_adapter adapter;
 	unsigned long config;
@@ -237,7 +222,7 @@
 
 #define clear_ready_fastmode(adap) ((adap)->config &= ~IIC_STM_READY_SPEED_FAST)
 
-static void iic_stm_setup_timing(struct iic_ssc *adap);
+static void iic_stm_setup_timing(struct iic_ssc *adap, unsigned long rate);
 
 static irqreturn_t iic_state_machine(int this_irq, void *data)
 {
@@ -257,7 +242,6 @@
 	} tmp;
 	unsigned short txbuff[SSC_TXFIFO_SIZE];
 	unsigned int txbuffcount;
-	unsigned int cnt = 0;
 
 	fast_mode = check_fastmode(adap);
 	pmsg = trsc->msgs_queue + trsc->current_msg;
@@ -314,7 +298,9 @@
 		 */
 		if ((check_fastmode(adap) && !check_ready_fastmode(adap)) ||
 		    (!check_fastmode(adap) && check_ready_fastmode(adap)))
-			iic_stm_setup_timing(adap);
+			iic_stm_setup_timing(adap,
+					     clk_get_rate(clk_get
+							  (NULL, "comms_clk")));
 
 		trsc->start_state = IIC_FSM_START;
 
@@ -408,14 +394,6 @@
 	case IIC_FSM_REPSTART_ADDR:
 		dbg_print2("-Rep Start addr 0x%x\n", pmsg->addr);
 
-		/* Check that slave is not doing a clock stretch */
-		while (((ssc_load32(adap, SSC_STA) & SSC_STA_CLST)
-					!= SSC_STA_CLST) && (cnt++ < 1000))
-			ndelay(100);
-
-		if (cnt >= 1000)
-			jump_on_fsm_abort(trsc);
-
 		/* Clear NACK */
 		ssc_store32(adap, SSC_CLR, 0xdc0);
 
@@ -555,7 +533,7 @@
 		trsc->status_error |= IIC_E_NOTACK;
 
 		ssc_store32(adap, SSC_CLR, 0xdc0);
-		trsc->next_state = IIC_FSM_IDLE;
+		trsc->next_state = IIC_FSM_COMPLETE;
 
 		ssc_store32(adap, SSC_IEN, SSC_IEN_STOPEN | SSC_IEN_ARBLEN);
 		ssc_store32(adap, SSC_I2C, SSC_I2C_I2CM | SSC_I2C_STOPG);
@@ -591,7 +569,7 @@
 		} else {
 			/* stop */
 			dbg_print2(" STOP - STOP\n");
-			trsc->next_state = IIC_FSM_IDLE;
+			trsc->next_state = IIC_FSM_COMPLETE;
 			ssc_store32(adap, SSC_I2C,
 				    SSC_I2C_I2CM | SSC_I2C_TXENB |
 				    SSC_I2C_STOPG);
@@ -600,20 +578,7 @@
 		}
 
 		break;
-	case IIC_FSM_IDLE:
-		/* In Idle state the SSC still remains
-		 * in I2C mode but with the SSC_CTL.Master mode disabled.
-		 * In this configuration it seems much more stable
-		 * during a plugging/unplugging of HDMI-cable
-		 * i.e.: it is much less sensible to the noice on the cable
-		 */
-		dbg_print2("-Idle\n");
-		/* push the data line high */
-		ssc_store32(adap, SSC_TBUF, 0x1ff);
-		ssc_store32(adap, SSC_I2C, SSC_I2C_I2CM);
-		ssc_store32(adap, SSC_CTL, SSC_CTL_EN |
-			    SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8);
-		/* No break here! */
+
 	case IIC_FSM_COMPLETE:
 		dbg_print2("-Complete\n");
 
@@ -969,7 +934,7 @@
 }
 #endif
 
-static void iic_stm_setup_timing(struct iic_ssc *adap)
+static void iic_stm_setup_timing(struct iic_ssc *adap, unsigned long clock)
 {
 	unsigned long iic_baudrate;
 	unsigned short iic_rep_start_hold;
@@ -985,11 +950,11 @@
 	unsigned char iic_prescaler;
 	unsigned short iic_prescaler_dataout;
 #endif
-	unsigned long ns_per_clk, clock ;
+	unsigned long ns_per_clk;
 
-	clock = clk_get_rate(adap->clk) + 500000; /* +0.5 Mhz for rounding */
 	dbg_print("Assuming %lu MHz for the Timing Setup\n", clock / 1000000);
 
+	clock += 500000;	/* +0.5 Mhz for rounding */
 	ns_per_clk = NANOSEC_PER_SEC / clock;
 
 	if (check_fastmode(adap)) {
@@ -1050,20 +1015,21 @@
 	ssc_store32(adap, SSC_STOP_SETUP, iic_stop_setup);
 	ssc_store32(adap, SSC_BUS_FREE, iic_bus_free);
 
-	/*
-	 * Set Slave Address to allow 'General Call'
-	 */
-	ssc_store32(adap, SSC_SLAD, 0x7f);
-
 #ifdef CONFIG_I2C_STM_HW_GLITCH
-	/* Apply I2C settings for glitch filter as suggested by Validation team
-	   Refer to Bugzilla 14906 */
-	iic_prescaler = clock / 10000000;
-	/* glicth widths (clk/data) are expressed in uS */
-	iic_glitch_width = HW_GLITCH_CLK_WIDTH * clock / 100000000;
-	iic_glitch_width_dataout = HW_GLITCH_DATA_WIDTH * clock / 100000000;
+	/* See DDTS GNBvd40668 */
+	iic_prescaler = 1;
+	iic_glitch_width = HW_GLITCH_WIDTH * clock / 100000000;	/* in uS */
+	iic_glitch_width_dataout = 1;
 	iic_prescaler_dataout = clock / 10000000;
 
+/*  This should work, but causes lock-up after repstart
+    iic_prescaler = clock / 10000000;
+    iic_glitch_width = HW_GLITCH_WIDTH;
+    iic_glitch_width_dataout = 1;
+    iic_prescaler_dataout = clock / 10000000;
+    printk("*** iic_prescaler = %d *** \n", iic_prescaler);
+*/
+
 	ssc_store32(adap, SSC_PRSCALER, iic_prescaler);
 	ssc_store32(adap, SSC_NOISE_SUPP_WIDTH, iic_glitch_width);
 	ssc_store32(adap, SSC_NOISE_SUPP_WIDTH_DATAOUT,
@@ -1080,6 +1046,26 @@
 	return;
 }
 
+static int iic_stm_control(struct i2c_adapter *adapter,
+			   unsigned int cmd, unsigned long arg)
+{
+	struct iic_ssc *iic_adap =
+	    container_of(adapter, struct iic_ssc, adapter);
+	switch (cmd) {
+	case I2C_STM_IOCTL_FAST:
+		dbg_print("ioctl fast 0x%lx\n", arg);
+		iic_adap->config &= ~IIC_STM_CONFIG_SPEED_MASK;
+		if (arg)
+			iic_adap->config |= IIC_STM_CONFIG_SPEED_FAST;
+		break;
+	default:
+		printk(KERN_WARNING " %s: i2c-ioctl not managed\n",
+		       __func__);
+	}
+
+	return 0;
+}
+
 static u32 iic_stm_func(struct i2c_adapter *adap)
 {
 	return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL;
@@ -1088,6 +1074,7 @@
 static struct i2c_algorithm iic_stm_algo = {
 	.master_xfer = iic_stm_xfer,
 	.functionality = iic_stm_func,
+/*	.algo_control = iic_stm_control */
 };
 
 static ssize_t iic_bus_show_fastmode(struct device *dev,
@@ -1106,19 +1093,9 @@
 {
 	struct i2c_adapter *adapter =
 	    container_of(dev, struct i2c_adapter, dev);
-	struct iic_ssc *iic_adap =
-	    container_of(adapter, struct iic_ssc, adapter);
-	unsigned long val;
-	int ret;
+	unsigned long val = strict_strtoul(buf, 10, NULL);
 
-	ret = strict_strtoul(buf, 10, &val);
-	if (ret)
-		return ret;
-
-	if (val)
-		iic_adap->config |= IIC_STM_CONFIG_SPEED_FAST;
-	else
-		iic_adap->config &= ~IIC_STM_CONFIG_SPEED_MASK;
+	iic_stm_control(adapter, I2C_STM_IOCTL_FAST, val);
 
 	return count;
 }
@@ -1185,17 +1162,7 @@
 	i2c_stm->adapter.nr = pdev->id;
 	i2c_stm->adapter.algo = &iic_stm_algo;
 	i2c_stm->adapter.dev.parent = &(pdev->dev);
-	if (plat_data->i2c_fastmode)
-		i2c_stm->config = IIC_STM_CONFIG_SPEED_FAST;
-	i2c_stm->clk = clk_get(&(pdev->dev), "comms_clk");
-	if (!i2c_stm->clk) {
-		dev_err(&pdev->dev, "Comms clock not found!\n");
-		return -ENODEV;
-	}
-
-	clk_enable(i2c_stm->clk);
-
-	iic_stm_setup_timing(i2c_stm);
+	iic_stm_setup_timing(i2c_stm, clk_get_rate(clk_get(NULL, "comms_clk")));
 	init_waitqueue_head(&(i2c_stm->wait_queue));
 	if (i2c_add_numbered_adapter(&(i2c_stm->adapter)) < 0) {
 		dev_err(&pdev->dev, "I2C core refuses the i2c/stm adapter\n");
@@ -1221,8 +1188,6 @@
 	struct resource *res;
 	struct iic_ssc *iic_stm = platform_get_drvdata(pdev);
 
-	clk_disable(iic_stm->clk);
-
 	i2c_del_adapter(&iic_stm->adapter);
 	/* irq */
 	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
@@ -1235,6 +1200,7 @@
 }
 
 #ifdef CONFIG_PM
+#warning [STM]: I2C-PM disabled
 static int iic_stm_suspend(struct device *dev)
 {
 	struct platform_device *pdev =
@@ -1250,7 +1216,6 @@
 #endif
 	ssc_store32(i2c_bus, SSC_IEN, 0);
 	ssc_store32(i2c_bus, SSC_CTL, 0);
-	clk_disable(i2c_bus->clk);
 
 	return 0;
 }
@@ -1270,12 +1235,11 @@
 		stpio_configure_pin(pio_info->sdout, STPIO_ALT_BIDIR);
 	}
 #endif
-	clk_enable(i2c_bus->clk);
 	/* enable RX, TX FIFOs - clear SR bit */
 	ssc_store32(i2c_bus, SSC_CTL, SSC_CTL_EN |
 		    SSC_CTL_PO | SSC_CTL_PH | SSC_CTL_HB | 0x8);
 	ssc_store32(i2c_bus, SSC_I2C, SSC_I2C_I2CM);
-	iic_stm_setup_timing(i2c_bus);
+	iic_stm_setup_timing(i2c_bus, clk_get_rate(clk_get(NULL, "comms_clk")));
 	return 0;
 }
 #else

--- linux-sh4/drivers/i2c/busses/i2c-stm.h.org	2013-04-07 02:13:52.000000000 +0200
+++ linux-sh4/drivers/i2c/busses/i2c-stm.h	2012-10-20 18:48:53.000000000 +0200
@@ -0,0 +1,6 @@
+#ifndef I2C_STM
+#define I2C_STM
+
+#define I2C_STM_IOCTL_FAST           0xfa57
+
+#endif
