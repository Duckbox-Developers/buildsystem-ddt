--- a/sound/core/oss/pcm_oss.c
+++ b/sound/core/oss/pcm_oss.c
@@ -218,6 +218,7 @@
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(snd_pcm_hw_param_mask);
 
 static int _snd_pcm_hw_param_min(struct snd_pcm_hw_params *params,
 				 snd_pcm_hw_param_t var, unsigned int val,
@@ -249,6 +250,7 @@
 	}
 	return changed;
 }
+EXPORT_SYMBOL_GPL(_snd_pcm_hw_param_min);
 
 /**
  * snd_pcm_hw_param_min
@@ -466,6 +468,7 @@
 	snd_BUG_ON(v < 0);
 	return v;
 }
+EXPORT_SYMBOL_GPL(snd_pcm_hw_param_near);
 
 static int _snd_pcm_hw_param_set(struct snd_pcm_hw_params *params,
 				 snd_pcm_hw_param_t var, unsigned int val,
@@ -542,6 +545,7 @@
 	}
 	return snd_pcm_hw_param_value(params, var, NULL);
 }
+EXPORT_SYMBOL_GPL(snd_pcm_hw_param_set);
 
 static int _snd_pcm_hw_param_setinteger(struct snd_pcm_hw_params *params,
 					snd_pcm_hw_param_t var)
@@ -554,6 +558,7 @@
 	}
 	return changed;
 }
+EXPORT_SYMBOL_GPL(_snd_pcm_hw_param_setinteger);
 	
 /*
  * plugin
--- a/sound/core/pcm_lib.c
+++ b/sound/core/pcm_lib.c
@@ -433,6 +433,7 @@
 
 	return snd_pcm_update_hw_ptr_post(substream, runtime);
 }
+EXPORT_SYMBOL(snd_pcm_update_hw_ptr);
 
 /**
  * snd_pcm_set_ops - set the PCM operators
--- a/sound/core/pcm_native.c
+++ b/sound/core/pcm_native.c
@@ -884,6 +884,7 @@
 	return snd_pcm_action(&snd_pcm_action_start, substream,
 			      SNDRV_PCM_STATE_RUNNING);
 }
+EXPORT_SYMBOL(snd_pcm_start);
 
 /*
  * stop callbacks
@@ -1882,6 +1883,7 @@
 		return err;
 	return 0;
 }
+EXPORT_SYMBOL_GPL(snd_pcm_hw_constraints_init);
 
 int snd_pcm_hw_constraints_complete(struct snd_pcm_substream *substream)
 {
@@ -1965,6 +1967,7 @@
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(snd_pcm_hw_constraints_complete);
 
 static void pcm_release_private(struct snd_pcm_substream *substream)
 {
--- a/sound/core/sound.c
+++ b/sound/core/sound.c
@@ -312,6 +312,12 @@
 	return -1;
 }
 
+int snd_get_minor(int type, int card, int dev)
+{
+	return find_snd_minor(type, snd_cards[card], dev);
+}
+EXPORT_SYMBOL(snd_get_minor);
+
 /**
  * snd_unregister_device - unregister the device on the given card
  * @type: the device type, SNDRV_DEVICE_TYPE_XXX
--- a/sound/stm/common.h
+++ b/sound/stm/common.h
@@ -173,9 +173,23 @@
 						__FILE__, __LINE__, ##args); \
 		} while (0)
 
+#define snd_stm_assert(expr, args...) \
+		do { \
+			if (unlikely(!(expr))) { \
+				printk(KERN_ERR "snd-stm:%s:%d: BUG? " \
+						"(%s)\n", \
+						__snd_stm_component, \
+						__LINE__, \
+						__stringify(expr)); \
+				dump_stack(); \
+				args; \
+			} \
+		} while (0)
+
 #else
 
 #define snd_stm_printd(...) /* nothing */
+#define snd_stm_assert snd_assert
 
 #endif

--- a/include/sound/core.h
+++ b/include/sound/core.h
@@ -251,6 +251,7 @@
 void *snd_lookup_minor_data(unsigned int minor, int type);
 int snd_add_device_sysfs_file(int type, struct snd_card *card, int dev,
 			      struct device_attribute *attr);
+int snd_get_minor(int type, int card, int dev);
 
 #ifdef CONFIG_SND_OSSEMUL
 int snd_register_oss_device(int type, struct snd_card *card, int dev,
@@ -364,6 +365,23 @@
 	__snd_printk(1, __FILE__, __LINE__, fmt, ##args)
 
 /**
+ * snd_assert - run-time assertion macro
+ * @expr: expression
+ *
+ * This macro checks the expression in run-time and invokes the commands
+ * given in the rest arguments if the assertion is failed.
+ * When CONFIG_SND_DEBUG is not set, the expression is executed but
+ * not checked.
+ */
+#define snd_assert(expr, args...) do {					\
+	if (unlikely(!(expr))) {					\
+		snd_printk(KERN_ERR "BUG? (%s)\n", __ASTRING__(expr));	\
+		dump_stack();						\
+		args;							\
+	}								\
+} while (0)
+
+/**
  * snd_BUG - give a BUG warning message and stack trace
  *
  * Calls WARN() if CONFIG_SND_DEBUG is set.
@@ -391,6 +409,7 @@
 #else /* !CONFIG_SND_DEBUG */
 
 #define snd_printd(fmt, args...)	do { } while (0)
+#define snd_assert(expr, args...)	(void)(expr)
 #define snd_BUG()			do { } while (0)
 static inline int __snd_bug_on(int cond)
 {
