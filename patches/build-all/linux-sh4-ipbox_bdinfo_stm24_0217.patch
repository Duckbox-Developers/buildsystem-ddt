--- a/arch/sh/include/asm/setup.h
+++ b/arch/sh/include/asm/setup.h
@@ -15,9 +15,45 @@
 #define LOADER_TYPE (*(unsigned long *) (PARAM+0x00c))
 #define INITRD_START (*(unsigned long *) (PARAM+0x010))
 #define INITRD_SIZE (*(unsigned long *) (PARAM+0x014))
+#define BDINFO                  ((char*)PARAM+0x018)
 /* ... */
 #define COMMAND_LINE ((char *) (PARAM+0x100))
 
+typedef struct bd_info
+{
+	int bi_baudrate;        /* serial console baudrate */
+	unsigned long bi_ip_addr;       /* IP Address */
+	unsigned char bi_enetaddr[6];   /* Ethernet adress */
+	unsigned long bi_arch_number;   /* unique id for this board */
+	unsigned long bi_boot_params;   /* where this board expects params */
+	unsigned long bi_memstart;      /* start of DRAM memory */
+	unsigned long bi_memsize;       /* size  of DRAM memory in bytes */
+	unsigned long bi_flashstart;    /* start of FLASH memory */
+	unsigned long bi_flashsize;     /* size  of FLASH memory */
+	unsigned long bi_flashoffset;   /* reserved area for startup monitor */
+#if defined(CONFIG_CPU_SUBTYPE_STB7100)
+	unsigned long bi_devid;
+	unsigned long bi_pll0frq;
+	unsigned long bi_pll1frq;
+	unsigned long bi_st40cpufrq;
+	unsigned long bi_st40busfrq;
+	unsigned long bi_st40perfrq;
+	unsigned long bi_st231frq;
+	unsigned long bi_stbusfrq;
+	unsigned long bi_emifrq;
+	unsigned long bi_lmifrq;
+#elif defined(CONFIG_CPU_SUBTYPE_STI5528)
+	unsigned long bi_pll1frq;
+	unsigned long bi_st40cpufrq;
+	unsigned long bi_st40busfrq;
+	unsigned long bi_st40perfrq;
+	unsigned long bi_emifrq;
+#endif
+}__attribute__ ((packed)) bd_t;
+
+extern bd_t bd; 
+
+
 int setup_early_printk(char *);
 void sh_mv_setup(void);
 
--- a/arch/sh/kernel/setup.c
+++ b/arch/sh/kernel/setup.c
@@ -89,6 +89,7 @@
 	.flags	= IORESOURCE_BUSY | IORESOURCE_MEM,
 };
 
+bd_t bd;
 unsigned long memory_start;
 EXPORT_SYMBOL(memory_start);
 unsigned long memory_end = 0;
@@ -424,6 +425,8 @@
 	parse_early_param();
 
 	plat_early_device_setup();
+        /* copy bdinfo */
+ 	memcpy((char*)&bd, BDINFO, sizeof(bd));
 
 	sh_mv_setup();
 
--- linux-sh4/drivers/net/stmmac/stmmac_main.c	2011-08-16 18:57:59.000000000 +0200
+++ b/stmmac_main.c	2011-10-01 10:27:41.761164284 +0200
@@ -44,6 +44,7 @@
 #include <linux/debugfs.h>
 #include <linux/seq_file.h>
 #endif
+#include <asm/setup.h>
 #include "stmmac.h"
 
 #undef STMMAC_DEBUG
@@ -958,14 +958,35 @@
 	return hw_cap;
 }
 
+static inline void print_mac_addr(u8 addr[6])
+{
+	int i;
+	for (i = 0; i < 5; i++)
+		printk("%2.2x:", addr[i]);
+	printk("%2.2x\n", addr[5]);
+	return;
+}
+
 static void stmmac_check_ether_addr(struct stmmac_priv *priv)
 {
 	/* verify if the MAC address is valid, in case of failures it
 	 * generates a random MAC address */
 	if (!is_valid_ether_addr(priv->dev->dev_addr)) {
+/*
 		priv->hw->mac->get_umac_addr((void __iomem *)
 					     priv->dev->base_addr,
 					     priv->dev->dev_addr, 0);
+*/
+		printk(KERN_INFO "\tHW MAC address from bdinfo: ");
+		/* copy mac address from u-boot */
+		priv->dev->dev_addr[0] = bd.bi_enetaddr[0];
+		priv->dev->dev_addr[1] = bd.bi_enetaddr[1];
+		priv->dev->dev_addr[2] = bd.bi_enetaddr[2];
+		priv->dev->dev_addr[3] = bd.bi_enetaddr[3];
+		priv->dev->dev_addr[4] = bd.bi_enetaddr[4];
+		priv->dev->dev_addr[5] = bd.bi_enetaddr[5];
+		print_mac_addr(priv->dev->dev_addr);
+
 		if  (!is_valid_ether_addr(priv->dev->dev_addr))
 			random_ether_addr(priv->dev->dev_addr);
 	}
