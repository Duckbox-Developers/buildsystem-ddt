--- a/arch/sh/kernel/process_32.c
+++ b/arch/sh/kernel/process_32.c
@@ -44,43 +44,15 @@
 
 int ubc_usercnt = 0;
 
-static void watchdog_trigger_immediate(void)
-{
-	sh_wdt_write_cnt(0xFF);
-	sh_wdt_write_csr(0xC2);
-}
-
-LIST_HEAD(restart_prep_handler_list);
-
-void register_prepare_restart_handler(void (*prepare_restart)(void))
-{
-	struct restart_prep_handler *s = (struct restart_prep_handler *)
-				kmalloc(sizeof(struct restart_prep_handler),
-				GFP_KERNEL);
-	s->prepare_restart = prepare_restart;
-	list_add(&(s->list), &(restart_prep_handler_list));
-}
-
 void machine_restart(char * __unused)
 {
-	struct restart_prep_handler *tmp;
-	struct list_head *pos, *q;
-
-	/* Run any "prepare restart" handlers */
-	list_for_each_safe(pos, q, &restart_prep_handler_list) {
-		tmp = list_entry(pos, struct restart_prep_handler, list);
-		tmp->prepare_restart();
-		list_del(pos);
-		kfree(tmp);
-	}
-
-	local_irq_disable();
-
-	/* Use watchdog timer to trigger reset */
-	watchdog_trigger_immediate();
-
-	while (1)
-		cpu_sleep();
+	/* Taken from stlinux22 because stlinux24
+	 * handling does not work on ufs910.
+	 */
+	
+	/* SR.BL=1 and invoke address error to let CPU reset (manual reset) */
+	asm volatile ("ldc %0, sr\n\t"
+		      "mov.l @%1, %0"::"r" (0x10000000), "r"(0x80000001));
 }
 
 void machine_halt(void)
