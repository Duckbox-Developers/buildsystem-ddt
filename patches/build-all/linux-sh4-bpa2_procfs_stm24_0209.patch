--- a/mm/bpa2.c
+++ b/mm/bpa2.c
***************
*** 64,70 ****
  #include <linux/kernel.h>
  #include <linux/init.h>
  #include <linux/pci.h>
! #include <linux/debugfs.h>
  #include <linux/seq_file.h>
  #include <linux/string.h>
  #include <linux/mm.h>
--- 64,70 ----
  #include <linux/kernel.h>
  #include <linux/init.h>
  #include <linux/pci.h>
! #include <linux/proc_fs.h>
  #include <linux/seq_file.h>
  #include <linux/string.h>
  #include <linux/mm.h>
***************
*** 676,682 ****
  
  
  
! #ifdef CONFIG_DEBUG_FS
  
  static void *bpa2_seq_start(struct seq_file *s, loff_t *pos)
  {
--- 676,682 ----
  
  
  
! #ifdef CONFIG_PROC_FS
  
  static void *bpa2_seq_start(struct seq_file *s, loff_t *pos)
  {
***************
*** 767,796 ****
  	.show = bpa2_seq_show,
  };
  
! static int bpa2_debugfs_open(struct inode *inode, struct file *file)
  {
  	return seq_open(file, &bpa2_seq_ops);
  }
  
! static const struct file_operations bpa2_debugfs_ops = {
  	.owner = THIS_MODULE,
! 	.open = bpa2_debugfs_open,
  	.read = seq_read,
  	.llseek = seq_lseek,
  	.release = seq_release,
  };
  
! static int __init bpa2_debugfs_init(void)
  {
! 	debugfs_create_file("bpa2", S_IFREG | S_IRUGO,
! 			NULL, NULL, &bpa2_debugfs_ops);
  
  	return 0;
  }
! subsys_initcall(bpa2_debugfs_init);
! 
! #endif /* CONFIG_DEBUG_FS */
  
  
  
  void bpa2_memory(struct bpa2_part *part, unsigned long *base,
--- 767,797 ----
  	.show = bpa2_seq_show,
  };
  
! static int bpa2_proc_open(struct inode *inode, struct file *file)
  {
  	return seq_open(file, &bpa2_seq_ops);
  }
  
! static struct file_operations bpa2_proc_ops = {
  	.owner = THIS_MODULE,
! 	.open = bpa2_proc_open,
  	.read = seq_read,
  	.llseek = seq_lseek,
  	.release = seq_release,
  };
  
! static int __init bpa2_proc_init(void)
  {
! 	struct proc_dir_entry *entry = create_proc_entry("bpa2", 0, NULL);
! 
! 	if (entry)
! 		entry->proc_fops = &bpa2_proc_ops;
  
  	return 0;
  }
! subsys_initcall(bpa2_proc_init);
  
+ #endif /* CONFIG_PROC_FS */
  
  
  void bpa2_memory(struct bpa2_part *part, unsigned long *base,
