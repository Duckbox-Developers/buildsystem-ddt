diff -Naurp linux-2.6.34/arch/arm/mach-kronos/gcs.c linux-2.6.34_nand/arch/arm/mach-kronos/gcs.c
--- linux-2.6.34/arch/arm/mach-kronos/gcs.c	2011-09-08 17:18:20.607687000 +0530
+++ linux-2.6.34_nand/arch/arm/mach-kronos/gcs.c	2011-09-08 17:24:58.245526000 +0530
@@ -57,7 +57,6 @@ static int __init apollo_gcs_init(void)
    apollo_configure_gcs(base, gcs_base);
    #endif
 
-
    if (PCI_HOST_MODE_ENABLED)
    {
       writel(0x1, gcs_base + 0x0);   /* GCS PCI mode  */
@@ -73,7 +72,6 @@ static int __init apollo_gcs_init(void)
       writel(0x2, gcs_base + 0x008);
       writel(0x01, gcs_base + 0x064); /* setup to SFC GCS Clock Mux */
    }
-
    /*return platform_add_devices(apollo_gcs_platform_devs, ARRAY_SIZE(apollo_gcs_platform_devs));*/
    return 0;
 
diff -Naurp linux-2.6.34/arch/arm/mach-kronos/nand.c linux-2.6.34_nand/arch/arm/mach-kronos/nand.c
--- linux-2.6.34/arch/arm/mach-kronos/nand.c	2011-09-08 17:18:20.748691000 +0530
+++ linux-2.6.34_nand/arch/arm/mach-kronos/nand.c	2011-09-05 15:39:06.149234000 +0530
@@ -37,29 +37,6 @@ static struct platform_device apollo_ip2
 
 static int __init apollo_nand_init(void)
 {
-#if 1
-	/**
-	 * FIXME: This configuration must come from bootloader
-	 **/
-	void * __iomem base = ioremap(apollo_ip2017_resources[0].start,
-			APOLLO_IP2017_LEN);
-	if (base == NULL) {
-		printk(KERN_ERR "NAND_DEVICE: out of memory?!\n");
-		return -ENOMEM;
-	}
-	writel(0x014, base + 0x04C);
-#ifdef CONFIG_EXECUTE_ON_EMULATOR
-	writel(0x02644448, base + 0x050); /* Set timings */
-	writel(0x00108444, base + 0x054);
-#endif
-
-   if (PCI_HOST_MODE_ENABLED)
-      writel(0x3FE, base + 0x010);
-   else
-      writel(0x3F, base + 0x010);
-
-	iounmap(base);
-#endif /* FIXME: Remove it once the bootloader is updated */
 	return platform_device_register (&apollo_ip2017_device);
 }
 arch_initcall(apollo_nand_init);
diff -Naurp linux-2.6.34/drivers/mtd/nand/nx_nand/nx_nand.c linux-2.6.34_nand/drivers/mtd/nand/nx_nand/nx_nand.c
--- linux-2.6.34/drivers/mtd/nand/nx_nand/nx_nand.c	2011-09-08 17:18:21.861606000 +0530
+++ linux-2.6.34_nand/drivers/mtd/nand/nx_nand/nx_nand.c	2011-09-08 14:51:52.011389000 +0530
@@ -52,7 +52,7 @@
 #define  NUM_OOB_OVERLAP_DATA (16 * 3)
 
 #ifdef CONFIG_MTD_NX_NAND_HWECC
-#if defined (CONFIG_ARCH_APOLLO)
+#ifdef CONFIG_ARCH_APOLLO
 /**
  *  OOB structure
  */
@@ -111,8 +111,10 @@ static struct nand_ecclayout nx_nand_oob
       }
 };
 #else
+#if 0
 static struct nand_ecclayout nx_nand_oob;
 #endif
+#endif 
 #endif
 
 /**
@@ -344,8 +346,8 @@ static inline void nx_nand_dmac_init(str
             stgt[i].src_brst = nx_dmac_128;
             stgt[i].dst_brst = nx_dmac_128;
          }
-            stgt[i].src_width = nx_dmac_width_32;
-            stgt[i].dst_width = nx_dmac_width_32;
+         stgt[i].src_width = nx_dmac_width_32;
+         stgt[i].dst_width = nx_dmac_width_32;
       }
    }
 
@@ -551,10 +553,10 @@ static void nx_nand_read_buf(struct mtd_
 static int nx_nand_read_page_raw(struct mtd_info *mtd, struct nand_chip *chip,
    uint8_t *buf, int page)
 {
-chip->read_buf(mtd, buf, mtd->writesize);
-chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
+   chip->read_buf(mtd, buf, mtd->writesize);
+   chip->read_buf(mtd, chip->oob_poi, mtd->oobsize);
 
-return 0;
+   return 0;
 }
 
 #ifdef CONFIG_MTD_NX_NAND_HWECC
@@ -572,7 +574,7 @@ static int nx_nand_read_page(struct mtd_
    int i, stat=0;
    struct nx_nand_ctrl *nc = container_of(mtd, struct nx_nand_ctrl, mtd);
    int eccsteps = chip->ecc.steps;
-#if defined (CONFIG_ARCH_APOLLO)
+#ifdef CONFIG_ARCH_APOLLO
    uint32_t j;
    int no_all_ffs=0;
 #endif
@@ -582,7 +584,7 @@ static int nx_nand_read_page(struct mtd_
 
    /* Check ECC status */
    for (i = 0 ; i<eccsteps; i++) {
-#if defined (CONFIG_ARCH_APOLLO)
+#ifdef CONFIG_ARCH_APOLLO
       if(nc->ecc_status[i] == NX_NAND_INT_DEC_UNCOR) {
 
          for(j=0; j < mtd->writesize; j++) {
@@ -630,13 +632,13 @@ static int nx_nand_read_page(struct mtd_
 #else /* CONFIG_ARCH_KRONOS */
       if (nc->page_rw_status_fifo.PageRdStatus[i].uncorrectable) {
 
+         printk(KERN_ERR "step %d:uncorrectable ecc [cur_page=%x] \r\n", i, nc->cur_page);
          mtd->ecc_stats.failed++;
 
       } 
       else if (nc->page_rw_status_fifo.PageRdStatus[i].corrected) {
-
          stat = nc->page_rw_status_fifo.PageRdStatus[i].num_errors;
-         printk(KERN_INFO "step %d:ECC %d bits corrected \r\n", i, stat);
+         printk(KERN_ERR "step %d:ECC %d bits corrected [cur_page=%x] \r\n", i, stat,nc->cur_page );
          mtd->ecc_stats.corrected += stat;
       }
 #endif
@@ -1014,9 +1016,12 @@ static void nx_nand_write_page(struct mt
 }
 #endif
 
+#ifdef CONFIG_ARCH_APOLLO
 static u_char temp_buf[NAND_MAX_PAGESIZE+NAND_MAX_OOBSIZE];
+#endif
 #define  OOB_BYTES_PER_BLK  (mtd->oobsize/nc->num_blks)
 
+#ifdef CONFIG_ARCH_APOLLO
 /**
  * nx_nand_write_oob - Write OOB data
  * @mtd: MTD information structure
@@ -1128,8 +1133,18 @@ static int nx_nand_write_oob(struct mtd_
       nx_nand_cmd_addr(nc, 1, NAND_CMD_PAGEPROG, 1);
    }
    else {
+#if 0
+      /* Initialise temp_buf */
+      memset(temp_buf, 0xff, (mtd->writesize + mtd->oobsize));
+
+      /* Send SEQIN command */
+      chip->cmdfunc(mtd, NAND_CMD_SEQIN, 0, page);
+
+      /* Call write page raw */
+      nx_nand_write_page_raw(mtd, chip, temp_buf);
+#else      
       /* Use IP_2017 OOB layout - write page */
-      /* Store ECC,AES values & Disbale */   
+      /* Store ECC,AES values & Disable */   
       ecc_old = nc->hwecc;
       aes_old = nc->aes;
       oob_poi_orig = chip->oob_poi;
@@ -1165,8 +1180,9 @@ static int nx_nand_write_oob(struct mtd_
       chip->oob_poi = oob_poi_orig;
       nc->hwecc = ecc_old;
       nc->aes = aes_old;
+#endif      
    }
-
+   
    /* Send command to program the OOB data */
    chip->cmdfunc(mtd, NAND_CMD_PAGEPROG, -1, -1);
 
@@ -1174,6 +1190,7 @@ static int nx_nand_write_oob(struct mtd_
 
    return status & NAND_STATUS_FAIL ? -EIO : 0;
 }
+#endif
 
 /**
  * nx_nand_command - Command function for small page chips
@@ -1225,6 +1242,17 @@ static void nx_nand_command(struct mtd_i
          break;
 
       case NAND_CMD_RESET:
+         /* No page operation */
+         page_cfg.includeOOB = false;
+         page_cfg.operType = tmhwEfmc_Nothing;
+         page_cfg.includeAES = false;
+         page_cfg.includeECC = false;
+         tmhwEfmc_InitPageOp(nc->unitid, &page_cfg);
+
+         nx_nand_cmd_addr(nc, 1, cmd, 1);
+         udelay(20); /* FIXME */
+         break;
+
       case NAND_CMD_STATUS:
          /* No page operation */
          page_cfg.includeOOB = false;
@@ -1567,6 +1595,17 @@ static void nx_nand_command_lp(struct mt
          break;
 
       case NAND_CMD_RESET:
+         /* No page operation */
+         page_cfg.includeOOB = false;
+         page_cfg.operType = tmhwEfmc_Nothing;
+         page_cfg.includeAES = false;
+         page_cfg.includeECC = false;
+         tmhwEfmc_InitPageOp(nc->unitid, &page_cfg);
+
+         nx_nand_cmd_addr(nc, 1, cmd, 1);
+         udelay(20); /* FIXME */
+         break;
+
       case NAND_CMD_STATUS:
          /* No page operation */
          page_cfg.includeOOB = false;
@@ -1677,7 +1716,7 @@ static void nx_nand_command_lp(struct mt
 
          if (nc->chip.chipsize >= (1 << 28)) {
             addr = (nc->cur_page >> 16) & NX_NAND_SP_ADDR_MASK;
-            nx_nand_cmd_addr(nc, 0, addr, 0);
+            nx_nand_cmd_addr(nc, 0, addr, 0); 
          }
 
          nx_nand_cmd_addr(nc, 1, NAND_CMD_READSTART, 1);
@@ -1948,7 +1987,7 @@ static irqreturn_t nx_nand_ctrl_isr(int 
          (int_ena & (1 << (NX_NAND_INT_READY_START + nc->slotid)))) {
          tmhwEfmc_IntClear(nc->unitid, 
             (1 << (NX_NAND_INT_READY_START + nc->slotid)));
-#if defined (CONFIG_ARCH_KRONOS)
+#ifdef CONFIG_ARCH_KRONOS
          tmhwEfmc_GetPageRWStatusFifo(nc->unitid, &nc->page_rw_status_fifo);
 #endif
          nc->done = true;
@@ -2076,7 +2115,7 @@ static int nx_nand_probe(struct platform
    struct mtd_info         *mtd;
    tmhwEfmc_Capabilities_t pcaps;
    tmhwEfmc_FlashConfig_t  pconfig;
-#if defined (CONFIG_ARCH_KRONOS)
+#ifdef CONFIG_ARCH_KRONOS
    tmhwEfmc_ModeCtrl_t     pModeCtrl;
    tmhwEfmc_FlashConfig_t  FlashConfig;
    tmhwEfmc_OobInfo_t      pOobInfo;
@@ -2149,14 +2188,14 @@ static int nx_nand_probe(struct platform
    nx_nc->aes = pcaps.supportAES;
    nx_nc->slots = pcaps.maxDevices;
    nx_nc->slotid = 0;
-   nx_nc->blk_size = 512; /* default block size */
+   nx_nc->blk_size = SZ_512; /* default block size */
    nx_nc->lb_chip = 0;    /* initialise the lbchip flag to false */
 
    /* Flash configuration -- REVISIT */
    ret = tmhwEfmc_GetFlashConfig(nx_nc->unitid, nx_nc->slotid, &pconfig);
-#if defined (CONFIG_ARCH_KRONOS)
+#ifdef CONFIG_ARCH_KRONOS
    pModeCtrl.rb_n_bypass = TM_FALSE;
-   pModeCtrl.rd_stall = TM_TRUE;
+   pModeCtrl.rd_stall = TM_FALSE;
    ret = tmhwEfmc_SetModeCtrl(nx_nc->unitid, &pModeCtrl);
    ret = tmhwEfmc_GetOobInfo(nx_nc->unitid, nx_nc->slotid, &pOobInfo);
 #endif
@@ -2222,7 +2261,7 @@ static int nx_nand_probe(struct platform
       nx_nc->dmabuf,
       nx_nc->dmabuf_phy);
 
-#if defined (CONFIG_ARCH_KRONOS)
+#ifdef CONFIG_ARCH_KRONOS
    memset(&FlashConfig, 0, sizeof(FlashConfig));
 
    FlashConfig.dataWidth = pconfig.dataWidth; /* REVISIT */
@@ -2253,19 +2292,18 @@ static int nx_nand_probe(struct platform
          BUG();
    }
    FlashConfig.oobSize =  mtd->oobsize;
-   FlashConfig.eccLevel = 4; /* REVISIT */
-   FlashConfig.erasedPageThres = FlashConfig.eccLevel/2;
-   memset(&FlashConfig.devTiming, 0xF, sizeof(FlashConfig.devTiming));
-
+   FlashConfig.eccLevel = 4; /* FIXME */
+   FlashConfig.erasedPageThres = FlashConfig.eccLevel/2; /* FIXME */
+   memset(&FlashConfig.devTiming, 0xFF, sizeof(FlashConfig.devTiming));
    tmhwEfmc_SetFlashConfig(nx_nc->unitid,nx_nc->slotid, &FlashConfig);
 
-   nx_nc->blk_size = FlashConfig.subpageSize;
+   nx_nc->blk_size = (SZ_512 << FlashConfig.subpageSize);
 #endif
 
    /* Calculate number of 512 or 1024 byte blocks in a page */
    nx_nc->num_blks = mtd->writesize/nx_nc->blk_size;
 
-#if defined (CONFIG_ARCH_APOLLO)
+#ifdef CONFIG_ARCH_APOLLO
    /* Allocate ECC status array */
    nx_nc->ecc_status = kzalloc(sizeof(int) * nx_nc->num_blks, GFP_KERNEL);
    if(!nx_nc->ecc_status) {
@@ -2285,7 +2323,7 @@ static int nx_nand_probe(struct platform
       goto out_free1;
    }
 
-   if(mtd->writesize > 512) {
+   if(mtd->writesize > SZ_512) {
       chip->cmdfunc = nx_nand_command_lp;
       nx_nc->lb_chip = 1;
    }
@@ -2296,7 +2334,9 @@ static int nx_nand_probe(struct platform
    chip->ecc.read_page_raw = nx_nand_read_page_raw;
    chip->ecc.write_page_raw = nx_nand_write_page_raw;
    chip->ecc.read_oob = nx_nand_read_oob;
+#ifdef CONFIG_ARCH_APOLLO
    chip->ecc.write_oob = nx_nand_write_oob;
+#endif
 
 #ifdef CONFIG_MTD_NX_NAND_HWECC
    nx_nc->hwecc = true;
@@ -2307,9 +2347,10 @@ static int nx_nand_probe(struct platform
    chip->ecc.correct = nx_nand_correct_data;
    chip->ecc.hwctl = nx_nand_hwctl;
    chip->ecc.size = nx_nc->blk_size;
-#if defined (CONFIG_ARCH_KRONOS)
+#ifdef CONFIG_ARCH_KRONOS
    /* formula to calculate no. of parity bytes for a given ecc level */
-   chip->ecc.bytes = pOobInfo.parity_bytes; 
+   pOobInfo.parity_bytes = 8; /* FIXME */
+   chip->ecc.bytes = pOobInfo.parity_bytes;
 #else
    chip->ecc.bytes = 12;
 #endif
@@ -2347,12 +2388,14 @@ static int nx_nand_probe(struct platform
          BUG();
    }
 #else
-   nx_nand_oob.eccbytes = (pOobInfo.parity_bytes)*(nx_nc->num_blks);
+#if 0   
+   nx_nand_oob.eccbytes = 64; /*(pOobInfo.parity_bytes)*(nx_nc->num_blks);*/
 
-   nx_nand_oob.oobfree[0].offset = 0;
-   nx_nand_oob.oobfree[0].length = (nx_nc->blk_size - (pOobInfo.parity_bytes));
+   nx_nand_oob.oobfree[0].offset = 4;
+   nx_nand_oob.oobfree[0].length = 12; /*(nx_nc->blk_size - (pOobInfo.parity_bytes));*/
 
    chip->ecc.layout = &nx_nand_oob;
+#endif   
 #endif
 #endif
 
diff -Naurp linux-2.6.34/drivers/mtd/nand/nx_nand/tmhwEfmc/src/tmhwEfmc.c linux-2.6.34_nand/drivers/mtd/nand/nx_nand/tmhwEfmc/src/tmhwEfmc.c
--- linux-2.6.34/drivers/mtd/nand/nx_nand/tmhwEfmc/src/tmhwEfmc.c	2011-09-08 17:18:21.818605000 +0530
+++ linux-2.6.34_nand/drivers/mtd/nand/nx_nand/tmhwEfmc/src/tmhwEfmc.c	2011-09-05 15:39:06.156235000 +0530
@@ -289,7 +289,8 @@ tmhwEfmc_SetFlashConfig(
    {
       regVal |= (UInt32) (TMVH_EFMC_DEV_TYPE0_WP_MSK);
    }
-   regVal |= (UInt32) (pFlashConfig->pageSize) ;
+   regVal |= ((UInt32) (pFlashConfig->pageSize) << 
+      TMVH_EFMC_DEV_TYPE0_PAGE_SIZE_POS ) ;
 
 #if defined (CONFIG_ARCH_KRONOS)
    /* -- Kronos specific definitions starts -- */
