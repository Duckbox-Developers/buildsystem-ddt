diff -Naur linux-2.6.34.org/drivers/mtd/sfc/nx_sfc.c linux-2.6.34_mod/drivers/mtd/sfc/nx_sfc.c
--- linux-2.6.34.org/drivers/mtd/sfc/nx_sfc.c	2010-11-02 09:34:22.000000000 -0500
+++ linux-2.6.34_mod/drivers/mtd/sfc/nx_sfc.c	2010-11-02 09:27:47.000000000 -0500
@@ -28,6 +28,7 @@
 #include <linux/mutex.h>
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/partitions.h>
+#include <linux/sched.h>
 #include "nx_sfc.h"
 
 #define FLASH_PAGESIZE        256
@@ -56,7 +57,10 @@
 #define  SR_SRWD        0x80  /* SR write protect */
 
 /* Define max times to check status register before we give up. */
-#define  MAX_READY_WAIT_COUNT 100000
+#define	MAX_READY_WAIT_JIFFIES	(10 * HZ) 
+#define	MAX_READY_WAIT_CHIP_ERASE_JIFFIES	(400 * HZ)	/* MX25L25635E specs 400s max chip erase */
+
+
 #define  CMD_SIZE    4
 
 #ifdef CONFIG_M25PXX_USE_FAST_READ
@@ -89,7 +93,7 @@
 /****************************************************************************/
 /* IP2070 GCS: SFC Routines                                                 */
 /****************************************************************************/
-
+ 
 ssize_t nx_sfc_prefetch_read(struct nx_sfc_mtd *flash) 
 {
    volatile unsigned long *prefetch_buf_base;
@@ -427,47 +431,49 @@
    return 0;
 }
 
-
 /*
  * Service routine to read status register until ready, or timeout occurs.
  * Returns non-zero if error.
  */
 int wait_till_ready(struct nx_sfc_mtd *flash)
 {
-   int count;
+   unsigned long deadline;
    int sr;
 
-   /* one chip guarantees max 5 msec wait here after page writes,
-    * but potentially three seconds (!) after page erase.
-    */
-   for (count = 0; count < MAX_READY_WAIT_COUNT; count++) {
+   if(flash->cd.command[0] == OPCODE_CHIP_ERASE)
+	  deadline = jiffies + MAX_READY_WAIT_CHIP_ERASE_JIFFIES;
+   else
+      deadline = jiffies + MAX_READY_WAIT_JIFFIES;
+
+   do {
       if ((sr = read_sr(flash)) < 0)
          break;
       else if (!(sr & SR_WIP))
          return 0;
+      cond_resched();
+   } while (!time_after_eq(jiffies, deadline));
 
-      /* REVISIT sometimes sleeping would be best */
-   }
 
    return 1;
 }
 
 int wait_till_ready_wr(struct nx_sfc_mtd *flash)
 {
-   int count;
+   unsigned long deadline;
    int sr;
 
-   /* one chip guarantees max 5 msec wait here after page writes,
-    * but potentially three seconds (!) after page erase.
-    */
-   for (count = 0; count < MAX_READY_WAIT_COUNT; count++) {
+   if(flash->cd.command[0] == OPCODE_CHIP_ERASE)
+	  deadline = jiffies + MAX_READY_WAIT_CHIP_ERASE_JIFFIES;
+   else
+      deadline = jiffies + MAX_READY_WAIT_JIFFIES;
+
+   do {
       if ((sr = read_sr(flash)) < 0)
          break;
       else if ((sr & SR_WEL))
          return 0;
-
-      /* REVISIT sometimes sleeping would be best */
-   }
+      cond_resched();
+   } while (!time_after_eq(jiffies, deadline));
 
    return 1;
 }
@@ -620,6 +626,8 @@
    }
 }
 
+
+
 /*
  * Read an address range from the flash chip.  The address range
  * may be any size provided it is within the physical boundaries.
