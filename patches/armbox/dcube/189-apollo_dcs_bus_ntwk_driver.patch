diff -Naurp linux-2.6.34_orig/arch/arm/mach-apollo/include/mach/pnx8492.h linux-2.6.34/arch/arm/mach-apollo/include/mach/pnx8492.h
--- linux-2.6.34_orig/arch/arm/mach-apollo/include/mach/pnx8492.h	2011-11-08 19:21:30.634230000 +0530
+++ linux-2.6.34/arch/arm/mach-apollo/include/mach/pnx8492.h	2011-11-08 15:12:20.589502000 +0530
@@ -54,6 +54,14 @@
 #define HOST_ARM_MMIO_APERTURE			0x1FFFFF
 
 /*
+ * DCS Network Controller
+ */
+#define DCS_AO_REGS_BASE      (ARM_A9_HOST_MMIO_BASE + 0x0D4000)
+#define DCS_HOST_REGS_BASE    (ARM_A9_HOST_MMIO_BASE + 0x039000)
+#define DCS_AVDSP_REGS_BASE   (ARM_A9_HOST_MMIO_BASE + 0x103000)
+#define DCS_FMVD_REGS_BASE    (ARM_A9_HOST_MMIO_BASE + 0x1FF000)
+
+/*
  * Device port addresses
  */
 #define MMIO_SEC_FUSE_CTRL       (ARM_A9_HOST_MMIO_BASE + 0x28000)
diff -Naurp linux-2.6.34_orig/arch/arm/mach-kronos/include/mach/pnx8492.h linux-2.6.34/arch/arm/mach-kronos/include/mach/pnx8492.h
--- linux-2.6.34_orig/arch/arm/mach-kronos/include/mach/pnx8492.h	2011-11-08 19:21:32.255063000 +0530
+++ linux-2.6.34/arch/arm/mach-kronos/include/mach/pnx8492.h	2011-11-08 15:10:34.991201000 +0530
@@ -70,6 +70,14 @@
 #define HOST_ARM_MMIO_APERTURE			0x1FFFFF
 
 /*
+ * DCS Network Controller
+ */
+#define DCS_AO_REGS_BASE      (ARM_A9_HOST_MMIO_BASE + 0x0AD000)
+#define DCS_HOST_REGS_BASE    (ARM_A9_HOST_MMIO_BASE + 0x039000)
+#define DCS_AVDSP_REGS_BASE   (ARM_A9_HOST_MMIO_BASE + 0x103000)
+#define DCS_FMVD_REGS_BASE    (ARM_A9_HOST_MMIO_BASE + 0x1FF000)
+
+/*
  * Device port addresses
  */
 #define MMIO_GCS_BASE            (ARM_A9_HOST_MMIO_BASE + 0x30000)
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/dcs_net.c linux-2.6.34/drivers/dcs_net/dcs_net.c
--- linux-2.6.34_orig/drivers/dcs_net/dcs_net.c	1970-01-01 05:30:00.000000000 +0530
+++ linux-2.6.34/drivers/dcs_net/dcs_net.c	2011-11-08 18:55:05.761031000 +0530
@@ -0,0 +1,404 @@
+/*
+ * dcs.c
+ *
+ * (C) Copyright 2011 Andre McCurdy, Trident Microsystems
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/string.h>
+#include <linux/init.h>
+#include <linux/proc_fs.h>
+#include <linux/delay.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <asm/uaccess.h>
+
+#define DRV_VERSION  "1.0"
+
+struct dcs_regs
+{
+   volatile unsigned int ctrl;               /* 0x000 : */
+   unsigned int _pad_0[(0x00C - 0x004) / 4];
+   volatile unsigned int addr;               /* 0x00C : */
+   volatile unsigned int stat;               /* 0x010 : */
+   unsigned int _pad_1[(0x040 - 0x014) / 4];
+   volatile unsigned int features;           /* 0x040 : */
+   unsigned int _pad_2[(0xFD8 - 0x044) / 4];
+   volatile unsigned int int_clr_enable;     /* 0xFD8 : */
+   volatile unsigned int int_set_enable;     /* 0xFDC : */
+   volatile unsigned int int_status;         /* 0xFE0 : */
+   volatile unsigned int int_enable;         /* 0xFE4 : */
+   volatile unsigned int int_clr_status;     /* 0xFE8 : */
+   volatile unsigned int int_set_status;     /* 0xFEC : */
+   unsigned int _pad_3[(0xFFC - 0xFF0) / 4];
+   volatile unsigned int module_id;          /* 0xFFC : */
+};
+
+#define DCS_CTRL_PWR_MGMNT_ENABLE   (1 << 5)
+#define DCS_CTRL_PWR_MGMNT_DISABLE  (0 << 5)
+#define DCS_CTRL_PWR_MGMNT_MASK     (1 << 5)
+
+#define DCS_CTRL_TOUT_SEL_7         (0x02 << 1)
+#define DCS_CTRL_TOUT_SEL_15        (0x03 << 1)
+#define DCS_CTRL_TOUT_SEL_31        (0x04 << 1)
+#define DCS_CTRL_TOUT_SEL_63        (0x05 << 1)
+#define DCS_CTRL_TOUT_SEL_127       (0x06 << 1)
+#define DCS_CTRL_TOUT_SEL_255       (0x07 << 1)
+#define DCS_CTRL_TOUT_SEL_511       (0x08 << 1)
+#define DCS_CTRL_TOUT_SEL_1023      (0x09 << 1)
+#define DCS_CTRL_TOUT_SEL_2047      (0x0A << 1)
+#define DCS_CTRL_TOUT_SEL_4095      (0x0B << 1)
+#define DCS_CTRL_TOUT_SEL_8191      (0x0C << 1)
+#define DCS_CTRL_TOUT_SEL_16383     (0x0D << 1)
+#define DCS_CTRL_TOUT_SEL_32767     (0x0E << 1)
+#define DCS_CTRL_TOUT_SEL_65535     (0x0F << 1)
+#define DCS_CTRL_TOUT_MASK          (0x0F << 1)
+#define DCS_CTRL_TOUT_MAX           (DCS_CTRL_TOUT_SEL_65535)
+
+#define DCS_CTRL_TIMEOUT_ENABLE     (0 << 0)
+#define DCS_CTRL_TIMEOUT_DISABLE    (1 << 0)
+#define DCS_CTRL_TIMEOUT_MASK       (1 << 0)
+
+#define IRQ_ERROR                   (1 << 0)
+#define IRQ_TIMEOUT                 (1 << 1)
+
+
+/*****************************************************************************
+*****************************************************************************/
+
+static const struct
+{
+   char *name;
+   unsigned long base;
+   int irq;
+} 
+dcs_networks[] =
+{
+   { "DCS_AlwaysOn", DCS_AO_REGS_BASE,    IRQ_SDCN },
+   { "DCS_Host",     DCS_HOST_REGS_BASE,  IRQ_ADCN },
+   { "DCS_AVDSP",    DCS_AVDSP_REGS_BASE, IRQ_AVDSN },
+   { "DCS_FMVD",     DCS_FMVD_REGS_BASE,  -1 },
+};
+
+#define NUM_DCS_NETWORKS      (sizeof(dcs_networks)/sizeof(dcs_networks[0]))
+
+static spinlock_t dcs_regs_lock;
+
+/*****************************************************************************
+*****************************************************************************/
+static irqreturn_t dcs_isr (int cpl, void *dev_id)
+{
+   int i;
+   int timeout = 0;
+   unsigned int status;
+   unsigned int irq_status;
+   unsigned long flags;
+   struct dcs_regs *dcs;
+
+   spin_lock_irqsave (&dcs_regs_lock, flags);
+
+   printk ("\n--------------------\n");
+
+   for (i = 0; i < NUM_DCS_NETWORKS; i++) {
+      dcs = (struct dcs_regs *) dcs_networks[i].base;
+      irq_status = dcs->int_status;
+      if (irq_status) {
+         status = dcs->stat;
+         printk ("%s : ctrl %04X, addr %08X, stat %08X, features %08X, int_stat %02X, int_en %02X\n",
+            dcs_networks[i].name, dcs->ctrl, dcs->addr, status, dcs->features, irq_status, dcs->int_enable);
+         printk ("%s : status: %s, bytemask 0x%02X%02X%02X%02X, %s, %s, Target ID %d, Initiator ID %d\n",
+            dcs_networks[i].name, (status & (1 << 1)) ? "Error" : "Timeout",
+            (status & (1 << 7)) ? 0xFF : 0x00, (status & (1 << 6)) ? 0xFF : 0x00,
+            (status & (1 << 5)) ? 0xFF : 0x00, (status & (1 << 4)) ? 0xFF : 0x00,
+            (status & (1 << 8)) ? "Read" : "Write",
+            (status & (1 << 9)) ? "Secure" : "Non-secure",
+            ((status >> 10) & 0x7F),
+            ((status >> 24) & 0x1F));
+         if (irq_status & IRQ_TIMEOUT)
+            timeout = 1;
+         dcs->int_clr_status = (IRQ_ERROR | IRQ_TIMEOUT);
+      }
+   }
+
+   printk ("--------------------\n\n");
+
+   /*
+    * Panic for timeouts only. Errors seem to happen sometimes, typically
+    * as reads initiated by the Audio Trimedia. Theory is that they're
+    * speculative reads from unmapped IO registers. Anyway they don't seem
+    * to do any harm. More interesting are DCS timeouts, which would be
+    * hangs in the default state with DCS timeouts disabled.
+    */
+   if (timeout)
+      panic ("DCS Timeout interrupt\n");
+
+   spin_unlock_irqrestore (&dcs_regs_lock, flags);
+
+   return IRQ_HANDLED;
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static void dcs_timeouts_enable (int enable)
+{
+   int i;
+   unsigned int ctrl;
+   unsigned long flags;
+   struct dcs_regs *dcs;
+
+   printk ("%s: %d\n", __FUNCTION__, enable);
+
+   spin_lock_irqsave (&dcs_regs_lock, flags);
+
+   for (i = 0; i < NUM_DCS_NETWORKS; i++) {
+      dcs = (struct dcs_regs *) dcs_networks[i].base;
+      ctrl = dcs->ctrl;
+      if (enable) {
+         ctrl &= ~(DCS_CTRL_TOUT_MASK); /* timeout clock cycles */
+         ctrl &= ~(DCS_CTRL_TIMEOUT_MASK); /* timeout enable/disable flag */
+         ctrl |= (DCS_CTRL_TOUT_MAX | DCS_CTRL_TIMEOUT_ENABLE);
+      }
+      else {
+         ctrl &= ~(DCS_CTRL_TIMEOUT_MASK); /* timeout enable/disable flag */
+         ctrl |= DCS_CTRL_TIMEOUT_DISABLE;
+      }
+      dcs->ctrl = ctrl;
+   }
+
+   spin_unlock_irqrestore (&dcs_regs_lock, flags);
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static void dcs_interrupts_enable (int enable)
+{
+   int i;
+   unsigned long flags;
+   struct dcs_regs *dcs;
+   static int irq_disabled[NUM_DCS_NETWORKS];
+
+   printk ("%s: %d \n", __FUNCTION__, enable);
+
+#if 1
+   /*
+    * Debug test: force a fake timeout or error interrupt from Host DCS network
+    */
+   if ((enable == 2) || (enable == 3)) {
+      dcs = (struct dcs_regs *) dcs_networks[1].base;
+      if (dcs->int_enable != (IRQ_ERROR | IRQ_TIMEOUT))
+         printk ("%s: irqs not yet enabled\n", __FUNCTION__);
+      else
+         dcs->int_set_status = (enable == 2) ? IRQ_TIMEOUT : IRQ_ERROR;
+      return;
+   }
+#endif
+
+   spin_lock_irqsave (&dcs_regs_lock, flags);
+
+   for (i = 0; i < NUM_DCS_NETWORKS; i++) {
+   
+      dcs = (struct dcs_regs *) dcs_networks[i].base;
+
+      if (dcs_networks[i].irq == -1)
+         continue;
+
+      if (enable) {
+         if (dcs->int_enable != (IRQ_ERROR | IRQ_TIMEOUT)) {
+            dcs->int_clr_status = (IRQ_ERROR | IRQ_TIMEOUT);
+            dcs->int_set_enable = (IRQ_ERROR | IRQ_TIMEOUT);
+            if (irq_disabled[i]) {
+               enable_irq (dcs_networks[i].irq);
+               irq_disabled[i] = 0;
+            }
+         }
+         else
+            printk ("%s: irqs already enabled\n", dcs_networks[i].name);
+      }
+      else {
+         if (dcs->int_enable == (IRQ_ERROR | IRQ_TIMEOUT)) {
+            disable_irq (dcs_networks[i].irq);
+            dcs->int_clr_enable = (IRQ_ERROR | IRQ_TIMEOUT);
+            irq_disabled[i] = 1;
+         }
+         else
+            printk ("%s: irqs already disabled\n", dcs_networks[i].name);
+      }
+   }
+
+   spin_unlock_irqrestore (&dcs_regs_lock, flags);
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static void dcs_interrupts_register (int registered)
+{
+   int i;
+   int result;
+   unsigned long flags;
+   struct dcs_regs *dcs;
+
+   printk ("%s: %d\n", __FUNCTION__, registered);
+
+   spin_lock_irqsave (&dcs_regs_lock, flags);
+
+   for (i = 0; i < NUM_DCS_NETWORKS; i++) {
+
+      dcs = (struct dcs_regs *) dcs_networks[i].base;
+
+      if (dcs_networks[i].irq == -1)
+         continue;
+
+      dcs->int_clr_enable = (IRQ_ERROR | IRQ_TIMEOUT);
+
+      if (!registered) {
+         result = request_irq (dcs_networks[i].irq, dcs_isr, IRQF_DISABLED, 
+            dcs_networks[i].name, NULL);
+         if (result < 0) {
+            printk ("%s: Failed to register irq %d\n", dcs_networks[i].name, 
+               dcs_networks[i].irq);
+            continue;
+         }
+      } 
+      else 
+         free_irq (dcs_networks[i].irq, NULL);
+   }
+   
+   spin_unlock_irqrestore (&dcs_regs_lock, flags);
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static int proc_dcs_status_read (char *page, char **start, off_t off, int count, int *eof, void *data)
+{
+   int i;
+   int len;
+   char *p = page;
+   unsigned long flags;
+   struct dcs_regs *dcs;
+
+   p += sprintf (p, "\n");
+
+   spin_lock_irqsave (&dcs_regs_lock, flags);
+
+   for (i = 0; i < NUM_DCS_NETWORKS; i++) {
+      dcs = (struct dcs_regs *) dcs_networks[i].base;
+      p+= sprintf (p, "%-13s: ctrl %04X, addr %08X, stat %08X, features %08X, int_stat %02X, int_en %02X\n",
+            dcs_networks[i].name, dcs->ctrl, dcs->addr, dcs->stat, 
+            dcs->features, dcs->int_status, dcs->int_enable);
+   }
+
+   spin_unlock_irqrestore (&dcs_regs_lock, flags);
+
+   p += sprintf (p, "\n");
+
+   if ((len = (p - page) - off) < 0)
+      len = 0;
+   *eof = (len <= count) ? 1 : 0;
+   *start = page + off;
+   return len;
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static int proc_dcs_timeouts_write (struct file *file, const char *buffer, unsigned long count, void *data)
+{
+   char sbuf[16 + 1];
+   int value;
+   int len;
+
+   if (count > 0) {
+      len = (count > (sizeof(sbuf) - 1)) ? (sizeof(sbuf) - 1) : count;
+      memset (sbuf, 0, sizeof(sbuf));
+      if (copy_from_user (sbuf, buffer, len))
+         return -EFAULT;
+      if (sscanf (sbuf, "%d", &value) == 1)
+         dcs_timeouts_enable (value);
+   }
+
+   return count;
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static int proc_dcs_interrupts_write (struct file *file, const char *buffer, unsigned long count, void *data)
+{
+   char sbuf[16 + 1];
+   int value;
+   int len;
+
+   if (count > 0) {
+      len = (count > (sizeof(sbuf) - 1)) ? (sizeof(sbuf) - 1) : count;
+      memset (sbuf, 0, sizeof(sbuf));
+      if (copy_from_user (sbuf, buffer, len))
+         return -EFAULT;
+      if (sscanf (sbuf, "%d", &value) == 1)
+         dcs_interrupts_enable (value);
+   }
+
+   return count;
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static int __init dcs_init (void)
+{
+   struct proc_dir_entry *res;
+
+   spin_lock_init (&dcs_regs_lock);
+
+   if ((res = create_proc_entry ("dcs_status", S_IRUGO, NULL)) == NULL)
+      return -ENOMEM;
+   res->read_proc = proc_dcs_status_read;
+
+   if ((res = create_proc_entry ("dcs_timeouts", S_IWUSR, NULL)) == NULL)
+      return -ENOMEM;
+   res->write_proc = proc_dcs_timeouts_write;
+
+   if ((res = create_proc_entry ("dcs_interrupts", S_IWUSR, NULL)) == NULL)
+      return -ENOMEM;
+   res->write_proc = proc_dcs_interrupts_write;
+
+   dcs_interrupts_register(0);
+   
+   return 0;
+}
+
+/*****************************************************************************
+*****************************************************************************/
+static void __exit dcs_exit (void)
+{
+   dcs_interrupts_register(1);
+
+   remove_proc_entry ("dcs_status", NULL);
+   remove_proc_entry ("dcs_timeouts", NULL);
+   remove_proc_entry ("dcs_interrupts", NULL);
+}
+
+MODULE_AUTHOR("Andre McCurdy");
+MODULE_DESCRIPTION("Trident DCS bus network controller driver");
+MODULE_LICENSE("GPL");
+MODULE_VERSION(DRV_VERSION);
+
+module_init(dcs_init);
+module_exit(dcs_exit);
+
+
+/*****************************************************************************
+*****************************************************************************/
+
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/Kconfig linux-2.6.34/drivers/dcs_net/Kconfig
--- linux-2.6.34_orig/drivers/dcs_net/Kconfig	2011-11-08 19:21:29.686307000 +0530
+++ linux-2.6.34/drivers/dcs_net/Kconfig	2011-11-08 15:16:50.767367000 +0530
@@ -1,107 +1,15 @@
+
 #
-# DCS Network driver configuration
+# DCS bus network driver configuration
 #
 
-menu "DCS Network driver support"
+menu "DCS bus network controller driver support"
 
 config DCS_NETWORK_SUPPORT
-  tristate "Enable support for DCS Network controller"
+  tristate "Enable support for DCS bus network controller"
   depends on ARCH_APOLLO || ARCH_KRONOS
   help
-    The DCS Network controller should be enabled if the driver/kernel
+    The DCS bus network controller should be enabled if the driver/kernel 
     wants to configure the timeout value and access rights for all the targets.
 
-config DCS_DEBUG
-  bool "Enable debugging messages to be generated by the driver"
-  depends on DCS_NETWORK_SUPPORT
-  default y
-  help
-    Set this option to enable debug prints of DCS network core APIs. It is
-    highly recommended to say 'Y' here during development/testing phase.
-
-config DCS_USE_WORKQUEUE
-  bool "Enable dcs event log printing on UART"
-  depends on DCS_DEBUG
-  default y
-  help
-    If this option is enabled, DCS Network driver will print the events to UART
-    after a small delay using a  work queue. If not selected it will print the messages
-    to dmesg buffer immidiately (From the ISR).
-
-    It is recommended to say 'Y' here.
-
-config DCS_LOG_WRAPAROUND
-  bool "Enable Buffer wrap around"
-  depends on DCS_NETWORK_SUPPORT
-  default n
-  help
-    DCS Network driver maintains a small buffer to keep the log of the events.
-    If this option is selected the new messages will overwrite the old messages
-    when the buffer is full. Say 'N' here if the old messages are critial than
-    the new ones.
-
-config MDCS_TOUT_IN_DRIVER
-  bool "Enable MDCS timeout setting from driver"
-  depends on DCS_NETWORK_SUPPORT
-  help
-    Lets the driver to set the default timeout value for MIPS DCS network.
-
-config MDCSN_DEFAULT_TOUT
-  hex "MIPS DCS timeout (Check help for possible value)"
-  depends on MDCS_TOUT_IN_DRIVER
-  default "0x0F"
-  help
-    Sets the default timeout value for MIPS DCS network controller. The following
-    are the possible valid values
-    
-        Value                   Cycles to wait
-        =====                   ==============
-        0x00                         7
-        0x03                         15
-        0x04                         31
-        0x05                         63
-        0x06                         127
-        0x07                         255
-        0x08                         511
-        0x09                         1023
-        0x0A                         2047
-        0x0B                         4095
-        0x0C                         8191
-        0x0D                         16383
-        0x0E                         32767
-        0x0F                         65535
-        0x10                       No timeout till rd/wr event completes
-
-config TDCS_TOUT_IN_DRIVER
-  bool "Enable TDCS timeout setting from driver"
-  depends on DCS_NETWORK_SUPPORT
-  help
-    Lets the driver to set the default timeout value for Tri-Media DCS network.
-
-config TDCSN_DEFAULT_TOUT
-  hex "Tri-Media DCS timeout (Check help for possible value)"
-  depends on TDCS_TOUT_IN_DRIVER
-  default "0x0F"
-  help
-    Sets the default timeout value for Tri-Media DCS network controller. The following
-    are the possible valid values
-    
-        Value                   Cycles to wait
-        =====                   ==============
-        0x00                         7
-        0x03                         15
-        0x04                         31
-        0x05                         63
-        0x06                         127
-        0x07                         255
-        0x08                         511
-        0x09                         1023
-        0x0A                         2047
-        0x0B                         4095
-        0x0C                         8191
-        0x0D                         16383
-        0x0E                         32767
-        0x0F                         65535
-        0x10                       No timeout till rd/wr event completes
-
 endmenu
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/Makefile linux-2.6.34/drivers/dcs_net/Makefile
--- linux-2.6.34_orig/drivers/dcs_net/Makefile	2011-11-08 19:21:27.888407000 +0530
+++ linux-2.6.34/drivers/dcs_net/Makefile	2011-11-08 15:00:28.456892000 +0530
@@ -1,26 +1 @@
-obj-$(CONFIG_DCS_NETWORK_SUPPORT) += pnx-dcs.o
-pnx-dcs-y += pnx_dcs.o tmhwDcsNetwork/src/tmhwDcsNetwork.o tmhwDcsNetwork/cfg/tmhwDcsNetwork_DvpNoBslCfg.o
-
-nx_dcsn_flag-$(CONFIG_SOC_PNX8550) := -DTMFL_PNX_ID=8550
-nx_dcsn_flag-$(CONFIG_SOC_PNX8535) := -DTMFL_PNX_ID=8535
-nx_dcsn_flag-$(CONFIG_SOC_PNX8542) := -DTMFL_PNX_ID=8542
-nx_dcsn_flag-$(CONFIG_SOC_PNX8543) := -DTMFL_PNX_ID=8543
-nx_dcsn_flag-$(CONFIG_SOC_PNX85500) := -DTMFL_PNX_ID=85500
-nx_dcsn_flag-$(CONFIG_ARCH_APOLLO) := -DTMFL_PNX_ID=0000 \
-	-DTMHW_DCSNETWORK_TCONFIG_HWMODULE_ID=0xA06D\
-	-DTMHW_DCSNETWORK_TSECURITY_HWMODULE_ID=0xA06E	\
-	-DTMHW_DCSNETWORK_MCONFIG_HWMODULE_ID=0xA06D\
-	-DTMHW_DCSNETWORK_MSECURITY_HWMODULE_ID=0xA06E	\
-	-DTMHW_DCSNETWORK_TCONFIG_MAJOR_VERSION=0x3\
-	-DTMHW_DCSNETWORK_TSECURITY_MAJOR_VERSION=0x3		\
-	-DTMHW_DCSNETWORK_MCONFIG_MAJOR_VERSION=0x3	\
-	-DTMHW_DCSNETWORK_MSECURITY_MAJOR_VERSION=0x3	\
-	-DTMHW_DCSNETWORK_MDCS_A06E_LIST2	  \
-	-DTMHW_DCSNETWORK_TDCS_A06E_LIST2\
-	-DTMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS=5    \
-	-DTMHW_DCSNETWORK_MDCS_NO_OF_TARGETS=52   \
-	-DTMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS=3    \
-	-DTMHW_DCSNETWORK_TDCS_NO_OF_TARGETS=30 
-
-EXTRA_CFLAGS = $(nx_dcsn_flag-y) -DMIPSEL -DTMFL_CPU_IS_MIPS=1 -DMONTAVISTA_GNU -DLINUX -DTMFL_OS_IS_HPUNIX=0 -Iinclude/HwAPI \
-	-Idrivers/dcs_net/tmhwDcsNetwork/inc -Idrivers/dcs_net/tmhwDcsNetwork/cfg -Iarch/mips/include/asm
+obj-$(CONFIG_DCS_NETWORK_SUPPORT) += dcs_net.o
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/pnx_dcs.c linux-2.6.34/drivers/dcs_net/pnx_dcs.c
--- linux-2.6.34_orig/drivers/dcs_net/pnx_dcs.c	2011-11-08 19:21:27.890415000 +0530
+++ linux-2.6.34/drivers/dcs_net/pnx_dcs.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,754 +0,0 @@
-/*
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
- *
- * Copyright (C) 2007 NXP B.V.
- * All Rights Reserved.
- *
- * DCS Network support for NXP Nexperia SoC.
- *
- * Revision History
- * Version  Author             Date          Remarks
- * 0.1.0    Sundarapandian A   03/22/2006    Proposal
- * 1.0      Sundarapandian A   01/11/2007    Updated for new requirements
- * 1.1      Sundarapandian A   02/22/2007    Updated for eh24#6389
- * 1.2.0    Bangaragiri G      07/10/2007    Updated for PB5#346
- * 1.3.0    Bangaragiri G      08/06/2007    Updates for PB5#348(oslinux 6.0)
- * 1.4.0    Bangaragiri G      12/03/2007    Updates for PNX8543
- * 1.5.0    Bangaragiri G      03/10/2008    Updates for EA kernel
- * 1.6.0    Bangaragiri G      09/19/2008    Updates for VectorCAST (PB5#416)
- * 1.7.0    Bangaragiri G      02/10/2009    Updates for 2.6.27.9
- *
- */
-
-#include <linux/autoconf.h>
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/interrupt.h>
-#include <linux/types.h>
-#include <linux/init.h>
-#include <asm/io.h>
-#include <linux/pnx_dcs.h>
-#include <linux/wait.h>
-#include <linux/workqueue.h>
-#include <linux/delay.h>
-#include <tmhwDcsNetwork.h>
-#include <tmhwDcsNetwork_CfgLocal.h>
-
-/* Define DCS_DEBUG to generate debug outputs */
-#ifdef CONFIG_DCS_DEBUG
-#define dbg_print(a...) printk(KERN_DEBUG a)
-#else
-#define dbg_print(a...)
-#endif
-
-#define DCS_LOG_BUF_SIZE   (1 << DCS_LOG_BUF_CNT)
-
-#if defined(CONFIG_PNX8543) || defined(CONFIG_PNX85500) || defined(CONFIG_ARCH_APOLLO)
-/* All warnings up to this many will be printed... */
-#define DCS_WARNING_THRESHOLD   5
-/* ... after which they will be printed at least this many jiffies apart. */
-#define DCS_WARNING_INTERVAL    (10 * HZ)
-
-#endif
-
-/**
- * Platform specific configurations
- **/
-#ifdef CONFIG_SOC_PNX8550
-#error PNX8550 Not yet supported!!!
-
-#elif defined(CONFIG_SOC_PNX8543) /* SOC_PNX8543 */
-/**
- * PNX8XXX specific initializations
- **/
-#include <mach-pnx8543/irq.h>
-
-#define DCS_NO_OF_UNITS 2
-#define DCS8XXX_UNIT_MDCS   0
-#define DCS8XXX_UNIT_TDCS   1
-
-#define PNX_DCS_NW_SIZE (1024 * 4)
-
-struct dcs_dev {
-    int unit_no;
-    __u32 *virtual_addr;
-    __u32 *security_virt_addr;
-};
-
-#ifndef CONFIG_MDCS_TOUT_IN_DRIVER
-#define CONFIG_MDCSN_DEFAULT_TOUT 0
-#endif
-#ifndef CONFIG_TDCS_TOUT_IN_DRIVER
-#define CONFIG_TDCSN_DEFAULT_TOUT 0
-#endif
-
-static unit_info dcs_info[] = {
-    { PNX8XXX_INT_MDCS, "MIPS DCS network", CONFIG_MDCSN_DEFAULT_TOUT },
-    { PNX8XXX_INT_TDCS, "Tri-Media DCS Network", CONFIG_TDCSN_DEFAULT_TOUT },
-};
-
-#define DCS_IS_VALID_UNIT(unit) \
-            ((unit) == DCS8XXX_UNIT_MDCS || (unit) == DCS8XXX_UNIT_TDCS)
-
-#elif defined(CONFIG_SOC_PNX85500) /* SOC_PNX85500 */
-/**
- * PNX8XXX specific initializations
- **/
-#include <mach-pnx85500/irq.h>
-
-#define DCS_NO_OF_UNITS 2
-#define DCS8XXX_UNIT_MDCS   0
-#define DCS8XXX_UNIT_TDCS   1
-
-#define PNX_DCS_NW_SIZE (1024 * 4)
-
-struct dcs_dev {
-    int unit_no;
-    __u32 *virtual_addr;
-    __u32 *security_virt_addr;
-};
-
-#ifndef CONFIG_MDCS_TOUT_IN_DRIVER
-#define CONFIG_MDCSN_DEFAULT_TOUT 0
-#endif
-#ifndef CONFIG_TDCS_TOUT_IN_DRIVER
-#define CONFIG_TDCSN_DEFAULT_TOUT 0
-#endif
-
-static unit_info dcs_info[] = {
-    { PNX8XXX_INT_MDCS, "MIPS DCS network", CONFIG_MDCSN_DEFAULT_TOUT },
-    { PNX8XXX_INT_TDCS, "Tri-Media DCS Network", CONFIG_TDCSN_DEFAULT_TOUT },
-};
-
-#define DCS_IS_VALID_UNIT(unit) \
-            ((unit) == DCS8XXX_UNIT_MDCS || (unit) == DCS8XXX_UNIT_TDCS)
-
-#elif defined(CONFIG_ARCH_APOLLO)
-
-#define DCS_NO_OF_UNITS 2
-#define DCS8XXX_UNIT_MDCS   0
-#define DCS8XXX_UNIT_TDCS   1
-
-#define PNX_DCS_NW_SIZE (1024 * 4)
-
-struct dcs_dev {
-    int unit_no;
-    __u32 *virtual_addr;
-    __u32 *security_virt_addr;
-};
-
-#ifndef CONFIG_MDCS_TOUT_IN_DRIVER
-#define CONFIG_MDCSN_DEFAULT_TOUT 0
-#endif
-#ifndef CONFIG_TDCS_TOUT_IN_DRIVER
-#define CONFIG_TDCSN_DEFAULT_TOUT 0
-#endif
-
-static unit_info dcs_info[] = {
-    { 0, "MIPS DCS network", CONFIG_MDCSN_DEFAULT_TOUT },
-    { 0, "Tri-Media DCS Network", CONFIG_TDCSN_DEFAULT_TOUT },
-};
-
-#define DCS_IS_VALID_UNIT(unit) \
-            ((unit) == DCS8XXX_UNIT_MDCS || (unit) == DCS8XXX_UNIT_TDCS)
-
-#else
-
-#error Unknown Platform
-#endif /* Error */
-
-static DECLARE_WAIT_QUEUE_HEAD(pnx_dcs_wq);
-
-wait_queue_head_t *pnx_dcs_event = &pnx_dcs_wq;
-EXPORT_SYMBOL(pnx_dcs_event);
-
-#if defined(CONFIG_PNX8543) || defined(CONFIG_PNX85500) || defined(CONFIG_ARCH_APOLLO)
-
-static int dcs_num_shown            = 0;  /* Number of MDCS events shown */
-static int dcs_num_counted          = 0;  /* Number of MDCS events counted */
-static int dcs_num_innocent         = 0;  /* Number of "innocent" MDCS events */
-static int dcs_num_warnings_printed = 0;  /* Number of warnings printed */
-static unsigned long dcs_jiffies_innocent;  /* Jiffies at last-reported "innocent" MDCS event */
-
-#else
-
-/* DCS interrupt counter */
-static unsigned int dcs_irq_sequence_number = 0;
-
-#endif
-
-static dcs_log_t dcs_log[DCS_LOG_BUF_SIZE];
-
-/**
- * Log Buffer tracking structure
- **/
-static struct __tag_log_ptr
-{
-    __u32 head;
-    __u32 tail;
-    __u8 full;
-    __u8 empty;
-}log_ptr = {0};
-
-/* Global configuration memory used by HwAPI */
-static tmhwDcsNetwork_Cfg_t *dcs_cfg;
-static tmhwDcsNetwork_Cfg_t *dcs_cfg_security;
-
-#ifdef CONFIG_DCS_USE_WORKQUEUE
-static struct delayed_work pnx_dcs_workqueue;
-static void pnx_dcs_wq_function(struct work_struct *wrk_q);
-#endif
-
-#if defined(CONFIG_DCS_DEBUG) || defined(CONFIG_DCS_USE_WORKQUEUE)
-/* Prototype */
-static void pnx_dcs_print(const dcs_log_t *log, const char *prefix);
-#endif
-
-/**
- * pnx_dcs_set_target_access - Set the target access
- * @unit     : DCS unit number
- * @t_ctrl   : pointer to target control structure
- * Description : Function to set target access control
- * Return : 0 - success
- *          -EIO - on failure (see errno.h)
- **/
-int pnx_dcs_set_target_access (int unit, struct target_ctrl *t_ctrl)
-{
-    tmhwDcsNetwork_TargetUnit_t tgt;
-
-    if (!DCS_IS_VALID_UNIT(unit))
-        return -EINVAL;
-
-    tgt.targetId = t_ctrl->tgt->target_id;
-    tgt.unitNo = t_ctrl->tgt->unit_no;
-
-    if (tmhwDcsNetwork_SetTargetAccessControl (unit, tgt,
-              (tmhwDcsNetwork_InitiatorUnit_t *) t_ctrl->allowed_initiators,
-              t_ctrl->no_of_initiators) != TM_OK)
-        return -EIO;
-
-    return 0;
-}
-EXPORT_SYMBOL (pnx_dcs_set_target_access);
-
-/**
- * pnx_dcs_get_target_access - Get the target access
- * @unit     : DCS unit number
- * @t_ctrl   : pointer to target control structure
- * Description : Function to get target access control
- * Return : 0 - success
- *          -EIO - on failure (see errno.h)
- **/
-int pnx_dcs_get_target_access (int unit, struct target_ctrl *t_ctrl)
-{
-    tmhwDcsNetwork_TargetUnit_t tgt;
-
-    if (!DCS_IS_VALID_UNIT(unit))
-        return -EINVAL;
-
-		tgt.targetId = t_ctrl->tgt->target_id;
-		tgt.unitNo = t_ctrl->tgt->unit_no;
-		
-    if (tmhwDcsNetwork_GetTargetAccessControl (unit, tgt,
-              (tmhwDcsNetwork_InitiatorUnit_t *) t_ctrl->allowed_initiators,
-              (pUInt32) &t_ctrl->no_of_initiators) != TM_OK)
-        return -EIO;
-
-    return 0;
-}
-EXPORT_SYMBOL (pnx_dcs_get_target_access);
-
-/**
- * pnx_dcs_set_access_timeout - Set target access timeout
- * @unit_no   : Unit number of DCS unit
- * @timeout   : Time out value (for possible values see linux/pnx-dcs.h)
- * Description : Function to set the target access timeout
- * Return : 0 - success
- *          -EIO - On Failure (see errno.h)
- **/
-int pnx_dcs_set_access_timeout (__u32 unit_no, __u32 timeout)
-{
-    if (!DCS_IS_VALID_UNIT(unit_no))
-        return -EINVAL;
-
-    if (tmhwDcsNetwork_SetTargetAccessTimeout (
-              (tmUnitSelect_t) unit_no, 
-              (tmhwDcsNetwork_TargetAccessTimeout_t) timeout) != TM_OK)
-        return -ENODEV;
-    return 0;
-}
-EXPORT_SYMBOL (pnx_dcs_set_access_timeout);
-
-/**
- * pnx_dcs_get_access_timeout - Get target access timeout
- * @unit_no   : Unit number of DCS unit
- * Description : Function to get the target access timeout
- * Return : Timeout value - success
- *          -EIO - On Failure (see errno.h)
- **/
-int pnx_dcs_get_access_timeout (__u32 unit_no)
-{
-    int timeout;
-    if (!DCS_IS_VALID_UNIT(unit_no))
-        return -EINVAL;
-
-    if (tmhwDcsNetwork_GetTargetAccessTimeout (
-              (tmUnitSelect_t) unit_no, 
-              (tmhwDcsNetwork_TargetAccessTimeout_t *) &timeout) != TM_OK)
-        return -ENODEV;
-    return timeout;
-}
-EXPORT_SYMBOL (pnx_dcs_get_access_timeout);
-
-/**
- * pnx_dcs_get_event_log - Get the log message
- * @log   : Pointer to log data structure
- * Description : Function to get event log data
- * Return : 0 - success
- *          -EAGAIN - on no log available (see errno.h)
- **/
-int pnx_dcs_get_event_log (dcs_log_t *log)
-{
-    if (log_ptr.empty)
-        return -EAGAIN;
-
-    memcpy (log, &dcs_log[log_ptr.tail], sizeof(dcs_log_t));
-    log_ptr.tail = (log_ptr.tail + 1) & ~(-1U << DCS_LOG_BUF_CNT);
-    log_ptr.full = 0;
-
-    if (log_ptr.tail == log_ptr.head)
-        log_ptr.empty = 1;
-
-    return 0;
-}
-EXPORT_SYMBOL (pnx_dcs_get_event_log);
-
-/**
- * pnx_dcs_uninit - Un-initialization function
- * @units   : Number of units to be un-initialized
- * Description : Un initialization functions used by
- *  driver entry/exit calls.
- * Return : 0 - success
- **/
-static int pnx_dcs_uninit (int units)
-{
-    int i;
-
-    for (i = 0; i < units; i++){
-				if (i == DCS8XXX_UNIT_MDCS){
-        	tmhwDcsNetwork_IntDisable (i, DCS_ERROR | DCS_TIMEOUT);
-       		free_irq (dcs_info[i].irq_no, NULL);
-				}
-        iounmap ((void *) dcs_cfg_security[i].baseAddress);
-        iounmap ((void *) dcs_cfg[i].baseAddress);
-        dbg_print ("DCS%d: unregistered.\r\n", i);
-    }
-
-    return 0;
-}
-
-/**
- * pnx_dcs_irq - ISR to handle DCS interrupts
- * @irq_no   : Interrupting IRQ number.
- * @dev      : NULL
- * @dcs_regs : Register set of the processor
- * Description : This routine will handle the interrupts
- *   raised by DCS network on Error or Timeout
- * Return : IRQ_HANDLED - success
- *          IRQ_NONE - on failure (see interrupt.h)
- **/
-static irqreturn_t pnx_dcs_irq(int irq_no, void *dev)
-{
-	int i;
-	__u32 status;
-	int unit_id = -1;
-	tmhwDcsNetwork_IntCauseInfo_t cause;
-
-	for (i = 0; i < DCS_NO_OF_UNITS; i++)
-		if (dcs_info[i].irq_no == irq_no){
-			unit_id = i;
-			break;
-		}
-
-	if (unit_id < 0){
-		/**
-		 * This cannot happen unless the interrupt is triggered by 
-		 * a serious hardware or operating system bug.
-		 **/
-		printk (KERN_DEBUG "IRQ%d cannot be handled by DCS network\r\n", irq_no);
-		return IRQ_NONE;
-	}
-
-	if (tmhwDcsNetwork_IntGetStatus (unit_id, (pUInt32) &status) != TM_OK){
-		printk (KERN_DEBUG "Error in getting interrupt status for IRQ%d\r\n", irq_no);
-		return IRQ_NONE;
-	}
-
-	status &= DCS_ERROR | DCS_TIMEOUT;
-
-#if defined(CONFIG_PNX8543) || defined(CONFIG_PNX85500) || defined(CONFIG_ARCH_APOLLO)
-	if (status) {
-		int isError;
-		dcs_category_t cat;
-		int initiator;
-		int target;
-
-		(void) tmhwDcsNetwork_GetInterruptInfo(unit_id, &cause);
-		isError = cause.errorOrTimeout;
-		initiator = cause.initiator.initiatorId;
-		target = cause.target.targetId;
-
-		/* Handle only one condition, even if both DCS_ERROR and DCS_TIMEOUT are set */
-		status = (isError ? DCS_ERROR : DCS_TIMEOUT);
-
-		/* Categorize the event */
-		if (initiator==1 && cause.isRead && isError)
-			/* Ignore JTAG read errors, e.g. DvpMon accessing unmapped MMIO addresses */
-			cat = DcsCatIgnored;
-		else if (initiator==5 && isError)
-			/* TM error: probably due to PR eh24#6049 et alii */
-			cat = DcsCatInnocent;
-		else if (dcs_num_counted==0 && !cause.isRead && !isError && initiator==2 && cause.address==0x1be47064)
-			/* Write timeout 0 at 0x1BE47064 by ini 2 to tgt 6: PR eh24#5700 */
-			cat = DcsCatInnocent;
-		else if (dcs_num_counted==1 && cause.isRead && !isError && initiator==0 && cause.address==0x2a002000)
-			/* Read timeout 1 at 0x2A002000 by ini 0 to tgt 25: PR eh25#2925 */
-			cat = DcsCatInnocent;
-		else
-			cat = DcsCatSerious;
-
-		if ((cat==DcsCatSerious)
-				|| ((cat==DcsCatInnocent) && ((dcs_num_innocent < DCS_WARNING_THRESHOLD)
-					|| (jiffies - dcs_jiffies_innocent >= DCS_WARNING_INTERVAL))))
-		{
-#if defined(CONFIG_MIPS)
-			__u32 epc = read_c0_epc();
-#elif defined(CONFIG_ARM)
-			/* 
-			 * FIXME: This is not a reliable way of getting PC 
-			 * Work out something here later
-			 */
-			register __u32 lr __asm__("lr");
-			__u32 epc = lr;
-#else
-#error	An architecture specific code must be used here to get Program Counter!!!
-#endif
-			dcs_log_t *dlog;
-
-#ifdef CONFIG_DCS_LOG_WRAPAROUND
-			if (log_ptr.full)
-				log_ptr.head = log_ptr.tail = (log_ptr.head + 1) & ~(-1U << DCS_LOG_BUF_CNT);
-			dlog = &dcs_log[log_ptr.head];
-#else
-			dcs_log_t local_log;
-			if (log_ptr.full)
-				dlog = &local_log;
-			else
-				dlog = &dcs_log[log_ptr.head];
-#endif
-
-			dlog->count_number = dcs_num_counted;
-			dlog->shown_number = dcs_num_shown;
-			dlog->cat = cat;
-			dlog->time = jiffies;
-			dlog->task_info = current;
-			dlog->epc = epc;
-			dlog->unit_no = unit_id;
-			dlog->cause.reason = isError ? DCS_REASON_ERR : DCS_REASON_TOUT;
-			dlog->cause.mask = (__u32) cause.byteMask;
-			dlog->cause.address = cause.address;
-			dlog->cause.access_type = cause.isRead ? DCS_ACCESS_RD : DCS_ACCESS_WR;
-			memcpy(&dlog->cause.initiator, &cause.initiator, sizeof(struct initiator));
-			memcpy(&dlog->cause.target, &cause.target, sizeof(struct target));
-
-			if (dlog == &dcs_log[log_ptr.head])
-			{
-				if (!log_ptr.full)
-					log_ptr.head = (log_ptr.head + 1) & ~(-1U << DCS_LOG_BUF_CNT);
-				log_ptr.empty = 0;
-				if (log_ptr.head == log_ptr.tail)
-					log_ptr.full = 1;
-			}
-
-#if defined(CONFIG_DCS_DEBUG) && !defined(CONFIG_DCS_USE_WORKQUEUE)
-			pnx_dcs_print(dlog, KERN_DEBUG);
-#endif
-			dcs_num_shown++;
-			if (cat==DcsCatInnocent) dcs_jiffies_innocent = jiffies;
-		}
-		if (cat!=DcsCatIgnored)  dcs_num_counted++;
-		if (cat==DcsCatInnocent) dcs_num_innocent++;
-	}
-	
-#else	
-	if (status) {
-		int hide;
-
-		(void) tmhwDcsNetwork_GetInterruptInfo (unit_id, &cause);
-
-		/* Handle only one condition, even if both DCS_ERROR and DCS_TIMEOUT set */
-		status = (cause.errorOrTimeout ? DCS_ERROR : DCS_TIMEOUT);
-
-		/* Hide read errors from JTAG, e.g. for DvpMon accessing unmapped MMIO addresses */
-		hide = (cause.errorOrTimeout && cause.isRead && cause.initiator.initiatorId==1);
-
-		if (!hide) {
-#ifdef CONFIG_MIPS
-			__u32 epc = read_c0_epc();
-#elif defined(CONFIG_ARM)
-			/* 
-			 * FIXME: This is not a reliable way of getting PC 
-			 * Work out something here later
-			 */
-			register __u32 lr __asm__("lr");
-			__u32 epc = lr;
-#else
-#error      An architecture specific code must be used here to get Program Counter!!!
-#endif
-			int doStore;
-
-#ifdef CONFIG_DCS_LOG_WRAPAROUND
-			if (log_ptr.full)
-				log_ptr.head = log_ptr.tail = (log_ptr.head + 1) & ~(-1U << DCS_LOG_BUF_CNT);
-			doStore = 1;
-#else
-			doStore = !log_ptr.full;
-#endif
-			if (doStore) {
-				dcs_log_t *dlog = &dcs_log[log_ptr.head];
-
-				dlog->seq_number = dcs_irq_sequence_number;
-				dlog->unit_no = unit_id;
-				dlog->time = jiffies;
-				dlog->task_info = current;
-				dlog->epc = epc;
-				dlog->cause.reason = cause.errorOrTimeout ? DCS_REASON_ERR : DCS_REASON_TOUT;
-				dlog->cause.mask = (__u32) cause.byteMask;
-				dlog->cause.address = cause.address;
-				dlog->cause.access_type = cause.isRead ? DCS_ACCESS_RD : DCS_ACCESS_WR;
-				memcpy (&dlog->cause.initiator, &cause.initiator, sizeof (struct initiator));
-				memcpy (&dlog->cause.target, &cause.target, sizeof (struct target));
-
-				if (!log_ptr.full)
-					log_ptr.head = (log_ptr.head + 1) & ~(-1U << DCS_LOG_BUF_CNT);
-				log_ptr.empty = 0;
-				if (log_ptr.head == log_ptr.tail)
-					log_ptr.full = 1;
-			}
-
-#ifndef CONFIG_DCS_USE_WORKQUEUE
-			pnx_dcs_print(dlog, KERN_DEBUG);
-#endif
-
-			dcs_irq_sequence_number++;
-		}
-	}
-#endif
-	
-	/* All the interrupts are handled */
-	tmhwDcsNetwork_IntClear (unit_id, status);
-	wake_up (pnx_dcs_event);
-#ifdef CONFIG_DCS_USE_WORKQUEUE
-	schedule_delayed_work(&pnx_dcs_workqueue, 1);
-#endif
-	return IRQ_HANDLED;
-}
-
-/**
- * pnx_dcs_init - Driver initialization routine
- * Description : This function will allocate all
- *   resources required for the driver.
- * Return : 0 - success
- *          -ENOMEM - on failure (see errno.h)
- **/
-static int __init pnx_dcs_init (void)
-{
-	int status, i;
-	tmhwDcsNetwork_Capabilities_t caps;
-
-	/* Initially the buffer will be empty */
-	log_ptr.empty = 1; 
-
-#ifdef CONFIG_DCS_USE_WORKQUEUE
-	INIT_DELAYED_WORK(&pnx_dcs_workqueue, pnx_dcs_wq_function);
-#endif
-
-	/* Initialize the configuration pointers */
-	dcs_cfg = tmhwDcsNetwork_ConfigCfgGet();
-	dcs_cfg_security = tmhwDcsNetwork_SecurityCfgGet();
-
-	for (i = 0; i < DCS_NO_OF_UNITS; i++){
-
-		dbg_print ("DCS%d: Found @ Physical base %#x\r\n",
-					  i, (__u32) dcs_cfg[i].baseAddress);
-
-		/* Initialize the base address for HwAPI */
-		dcs_cfg[i].baseAddress =
-		  (UInt32) ioremap(dcs_cfg[i].baseAddress, PNX_DCS_NW_SIZE);
-		if (dcs_cfg[i].baseAddress == NULL){
-			  pnx_dcs_uninit (i);
-			  return -ENOMEM;
-		}
-
-		dcs_cfg_security[i].baseAddress =
-		  (UInt32) ioremap(dcs_cfg_security[i].baseAddress, PNX_DCS_NW_SIZE);
-		if (dcs_cfg_security[i].baseAddress == NULL){
-			  iounmap ((void *) dcs_cfg_security[i].baseAddress);
-			  pnx_dcs_uninit (i);
-			  return -ENOMEM;
-		}
-	}
-	
-	/**
-	 * NOTE: We cannot include them in single loop
-	 * because capbilities expect all the base initialized.
-	 **/
-	for (i = 0; i < DCS_NO_OF_UNITS; i++){
-
-#if defined(CONFIG_MDCS_TOUT_IN_DRIVER) || defined(CONFIG_TDCS_TOUT_IN_DRIVER)
-		tmErrorCode_t err;
-#endif
-
-		if (tmhwDcsNetwork_GetCapabilities (i, &caps) != TM_OK) {
-			printk (KERN_ERR "Unable to get information of DCS Unit %d\r\n", i);
-			pnx_dcs_uninit (i);
-			return -EIO;
-		}
-
-		dbg_print ("DCS%d: No. of Targets = %d, No. of Initiators = %d\r\n",
-						i, (int) caps.noOfTargets, (int) caps.noOfInitiators);
-
-#ifdef CONFIG_MDCS_TOUT_IN_DRIVER
-		err = (i == DCS8XXX_UNIT_MDCS) ? 
-			tmhwDcsNetwork_SetTargetAccessTimeout(i, dcs_info[i].timeout) : TM_OK;
-		if (err!=TM_OK)
-			printk (KERN_ERR "DCS%d: tmhwDcsNetwork_SetTargetAccessTimeout()"
-					" returned 0x%08X", i, (__u32) err);
-#endif
-
-#ifdef CONFIG_TDCS_TOUT_IN_DRIVER
-		err = (i == DCS8XXX_UNIT_TDCS) ? 
-			tmhwDcsNetwork_SetTargetAccessTimeout(i, dcs_info[i].timeout) : TM_OK;
-		if (err!=TM_OK)
-			printk (KERN_ERR "DCS%d: tmhwDcsNetwork_SetTargetAccessTimeout()"
-					" returned 0x%08X", i, (__u32) err);
-#endif
-
-		/* Only MDCSN interrupts should be handled by the MIPS */
-		if (i != DCS8XXX_UNIT_MDCS) continue;
-
-		/* Initialize the interrupts */
-		status = request_irq (dcs_info[i].irq_no, pnx_dcs_irq,
-						IRQF_DISABLED, dcs_info[i].irq_name, NULL);
-		if (status < 0){
-			dbg_print ("DCS%d: Unable to request IRQ%d\r\n", i,
-				      (int) dcs_info[i].irq_no);
-			pnx_dcs_uninit (i);
-			return status;
-		}
-
-		/* At this point interrupts can be handled */
-		tmhwDcsNetwork_IntEnable (i, DCS_ERROR | DCS_TIMEOUT);
-		dbg_print ("DCS%d registered at virtual base address %#x and IRQ%d\r\n",
-			i, (__u32) dcs_cfg[i].baseAddress, dcs_info[i].irq_no);
-	}
-
-	return 0;
-}
-
-/**
- * pnx_dcs_cleanup - Cleanup function of DCS driver
- * Description : This function will deallocate all
- *   resources allocated by the init call.
- * Return :  None
- **/
-static void __exit pnx_dcs_cleanup (void)
-{
-	/** 
-	 * If the work queue has not finished its task but pending
-	 * a failure to cancel can cause kernel panic
-	 **/
-#ifdef CONFIG_DCS_USE_WORKQUEUE
-	(void) cancel_delayed_work(&pnx_dcs_workqueue);
-#endif
-	pnx_dcs_uninit (DCS_NO_OF_UNITS);
-	return ;
-}
-
-#if defined(CONFIG_DCS_DEBUG) || defined(CONFIG_DCS_USE_WORKQUEUE)
-/* Report the given DCS event; prefix is KERN_DEBUG or similar */
-static void pnx_dcs_print(const dcs_log_t *log, const char *prefix)
-{
-
-#if defined(CONFIG_PNX8543) || defined(CONFIG_PNX85500) || defined(CONFIG_ARCH_APOLLO)
-	printk("%s%s[%d] MDCS %s %s %d/%d from %d to %d at %08x; EPC %08x\r\n",
-		prefix,
-		(log->cat==DcsCatInnocent ? "(Warning) " : ""),
-		log->time,
-		(log->cause.access_type==DCS_ACCESS_WR ? "write" : "read"),
-		(log->cause.reason==DCS_REASON_ERR ? "error" : "timeout"),
-		log->shown_number, log->count_number,
-		log->cause.initiator.initiator_id,
-		log->cause.target.target_id,
-		log->cause.address,
-		log->epc);
-		if (log->cat==DcsCatInnocent)
-		{
-			if (dcs_num_warnings_printed+1==DCS_WARNING_THRESHOLD)
-				printk("%s          (Additional MDCS warnings will be reported only occasionally.)\r\n",
-					prefix);
-			dcs_num_warnings_printed++;
-		}
-#else
-		printk("%sDCS%d (%d) %s %s %d at 0x%08X by ini %d to tgt %d; EPC 0x%08X\n",
-			prefix,
-			unit_id,
-			(int) jiffies,
-			(cause.isRead ? "read" : "write"),
-			(cause.errorOrTimeout ? "error" : "timeout"),
-			dcs_irq_sequence_number,
-			(unsigned) cause.address,
-			cause.initiator.initiatorId,
-			cause.target.targetId,
-			epc);
-#endif
-
-}
-#endif
-
-/**
- * Workqueue function
- **/
-#ifdef CONFIG_DCS_USE_WORKQUEUE
-
-static void pnx_dcs_wq_function(struct work_struct *wrk_q)
-{
-	dcs_log_t log;
-
-	while (!pnx_dcs_get_event_log(&log)) {
-		pnx_dcs_print(&log, KERN_CRIT);
-	}
-}
-
-#endif
-
-
-/* Register init & exit routines */
-module_init(pnx_dcs_init);
-module_exit(pnx_dcs_cleanup);
-
-MODULE_LICENSE("GPL");
-MODULE_AUTHOR("NXP B.V.");
-MODULE_DESCRIPTION("DCS Network controller core driver");
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/cfg/tmhwDcsNetwork_CfgLocal.h linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/cfg/tmhwDcsNetwork_CfgLocal.h
--- linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/cfg/tmhwDcsNetwork_CfgLocal.h	2011-11-08 19:21:27.892423000 +0530
+++ linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/cfg/tmhwDcsNetwork_CfgLocal.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,128 +0,0 @@
-/**********************************************************************
-*
-*	Header %name:	tmhwDcsNetwork_CfgLocal.h %
-*	Instance:		PB5_1
-*	Description:	
-*	%created_by:	tusr69 %
-*	%date_created:	Mon Feb 13 14:46:31 2006 %
-*
-**********************************************************************/
-
-
-#ifndef TMHWDCSNETWORK_CFGLOCAL_H  //---------------
-#define TMHWDCSNETWORK_CFGLOCAL_H
-
-//-----------------------------------------------------------------------------
-// Standard include files:
-//-----------------------------------------------------------------------------
-//
-#include <tmNxTypes.h>
-#include <tmhwDcsNetwork_Cfg.h>
-//-----------------------------------------------------------------------------
-// Project include files:
-//-----------------------------------------------------------------------------
-//
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-//-----------------------------------------------------------------------------
-// Exported functions:
-//-----------------------------------------------------------------------------
-
-	
-//-----------------------------------------------------------------------------
-// FUNCTION   : tmhwDcsNetwork_ConfigCfgGet
-//
-// DESCRIPTION: Returns pointer to the tmhwDcsNetwork configuration structure array
-//
-// Note       : This function will lie in the internal interface of tmhwDcsNetwork
-//              and should not be visible to clients of tmhwDcsNetwork
-//-----------------------------------------------------------------------------
-ptmhwDcsNetwork_Cfg_t      
-tmhwDcsNetwork_ConfigCfgGet(void); 
-
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION   : tmhwDcsNetwork_SecurityCfgGet
-//
-// DESCRIPTION: Returns pointer to the tmhwDcsNetwork configuration structure array
-//
-// Note       : This function will lie in the internal interface of tmhwDcsNetwork
-//              and should not be visible to clients of tmhwDcsNetwork
-//-----------------------------------------------------------------------------
-
-ptmhwDcsNetwork_Cfg_t      
-tmhwDcsNetwork_SecurityCfgGet(void); 
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_ConfigCfgGetState
-//
-// DESCRIPTION: Returns pointer to the tmhwDcsNetwork configuration state structure array
-//
-// Note       : This function will lie in the internal interface of tmhwDcsNetwork
-//              and should not be visible to clients of tmhwDcsNetwork
-//-----------------------------------------------------------------------------
-ptmhwDcsNetwork_CfgState_t 
-tmhwDcsNetwork_ConfigCfgGetState(void);
-
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SecurityCfgGetState
-//
-// DESCRIPTION: Returns pointer to the tmhwDcsNetwork configuration state structure array
-//
-// Note       : This function will lie in the internal interface of tmhwDcsNetwork
-//              and should not be visible to clients of tmhwDcsNetwork
-//-----------------------------------------------------------------------------
-ptmhwDcsNetwork_CfgState_t 
-tmhwDcsNetwork_SecurityCfgGetState(void);
-
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_ConfigCfgGetNumUnits
-//
-// DESCRIPTION: Returns total number of units available in DCS NETWORK hardware
-//
-// Note       : This function will lie in the internal interface of tmhwDcsNetwork
-//              and should not be visible to clients of tmhwDcsNetwork
-//-----------------------------------------------------------------------------
-UInt32              
-tmhwDcsNetwork_ConfigCfgGetNumUnits(void);
-
-
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SecurityCfgGetNumUnits
-//
-// DESCRIPTION: Returns total number of units available in DCS NETWORK  hardware
-//
-// Note       : This function will lie in the internal interface of tmhwDcsNetwork
-//              and should not be visible to clients of tmhwDcsNetwork
-//-----------------------------------------------------------------------------
-UInt32              
-tmhwDcsNetwork_SecurityCfgGetNumUnits(void);
-
-
-//-----------------------------------------------------------------------------
-// Internal Prototypes:
-//-----------------------------------------------------------------------------
-//
-void
-tmhwDcsNetwork_ConfigCfgGetModulueInfo(void);
-
-void
-tmhwDcsNetwork_SecurityCfgGetModulueInfo(void);
-
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif // TMHWDCSNETWORK_CFGLOCAL_H //---------------
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/cfg/tmhwDcsNetwork_DvpNoBslCfg.c linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/cfg/tmhwDcsNetwork_DvpNoBslCfg.c
--- linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/cfg/tmhwDcsNetwork_DvpNoBslCfg.c	2011-11-08 19:21:27.904397000 +0530
+++ linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/cfg/tmhwDcsNetwork_DvpNoBslCfg.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,187 +0,0 @@
-/**********************************************************************
-*
-*	C %name:		tmhwDcsNetwork_DvpNoBslCfg.c %
-*	Instance:		PB5_1
-*	Description:	
-*	%created_by:	remmersw %
-*	%date_created:	Thu May 18 14:03:07 2006 %
-*
-**********************************************************************/
-
-//-----------------------------------------------------------------------------
-// Standard include files:
-//-----------------------------------------------------------------------------
-//
-#if !defined(SDE4_BUILD)
-#include <tmSysCfg.h>
-#endif
-//-----------------------------------------------------------------------------
-// Project include files:
-//-----------------------------------------------------------------------------
-//
-
-#include <tmhwDcsNetwork.h>
-#include <tmhwDcsNetwork_CfgLocal.h>
-
-//-----------------------------------------------------------------------------
-// Types and defines:
-//-----------------------------------------------------------------------------
-//
-#define TMHW_DCSNETWORK_COMPATIBILITY_EXP   1  // DCS NETWORK Expected compatibility Number
-#define TMHW_DCSNETWORK_MAJOR_VERSION_EXP   1  // DCS NETWORK Major version compatibility Number
-
-#if     (TMHW_DCSNETWORK_COMPATIBILITY_EXP != TMHW_DCSNETWORK_COMPATIBILITY_NR)
-#error  ERROR: Expected TMHW_DCSNETWORK_COMPATIBILITY_NR mismatch detected !
-#elif   (TMHW_DCSNETWORK_MAJOR_VERSION_EXP != TMHW_DCSNETWORK_MAJOR_VERSION_NR)
-#error  ERROR: Expected TMHW_DCSNETWORK_MAJOR_VERSION_NR mismatch detected !
-#endif
-
-
-
-
-
-//-----------------------------------------------------------------------------
-// Global data:
-//-----------------------------------------------------------------------------
-
-// tmhwDcsNetwork configuration structure array. This array will have size equal to 
-// number of units available in DCSNETWORK hardware. This will not be static since 
-// tmhwDcsNetwork client might want to overwrite base address.
-// 
-tmhwDcsNetwork_Cfg_t  gtmhwDcsNetwork_ConfigCfg[] =
-{
-    {
-
-       TMHW_DCSNETWORK_MCONFIG_PHY_MMIO_ADDRESS0,
-       TMHW_DCSNETWORK_MCONFIG_HWMODULE_ID
-    },
-    {
-
-       TMHW_DCSNETWORK_TCONFIG_PHY_MMIO_ADDRESS0,
-       TMHW_DCSNETWORK_TCONFIG_HWMODULE_ID
-    }
-};
-
-
-tmhwDcsNetwork_Cfg_t  gtmhwDcsNetwork_SecurityCfg[] =
-{
-    {
-
-       TMHW_DCSNETWORK_MSECURITY_PHY_MMIO_ADDRESS0,
-       TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID
-    },
-    {
-
-       TMHW_DCSNETWORK_TSECURITY_PHY_MMIO_ADDRESS0,
-       TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID
-    }
-};
-
-
-
-#define  TMHW_DCSNETWORK_CONFIG_CFG_NUM_UNITS  (sizeof(gtmhwDcsNetwork_ConfigCfg)/sizeof(tmhwDcsNetwork_Cfg_t))
-
-#define  TMHW_DCSNETWORK_SECURITY_CFG_NUM_UNITS  (sizeof(gtmhwDcsNetwork_SecurityCfg)/sizeof(tmhwDcsNetwork_Cfg_t))
-
-
-
-// tmhwDcsNetwork configuration state structure array. This array will have size equal to 
-// number of units available in DCSNETWORK hardware
-static tmhwDcsNetwork_CfgState_t  gDcsNetworkConfig_CfgState[TMHW_DCSNETWORK_CONFIG_CFG_NUM_UNITS] = 
-{
-   {
-      0     // Unit number 0
-   }
-};
-
-
-static tmhwDcsNetwork_CfgState_t  gDcsNetworkSecurity_CfgState[TMHW_DCSNETWORK_SECURITY_CFG_NUM_UNITS] = 
-{
-   {
-      0     // Unit number 0
-   }
-};
-
-
-
-//-----------------------------------------------------------------------------
-// Exported functions:
-//-----------------------------------------------------------------------------
-//
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_ConfigCfgGet
-//
-// DESCRIPTION: Returns pointer to the tmhwDcsNetwork configuration structure array
-//
-//-----------------------------------------------------------------------------
-ptmhwDcsNetwork_Cfg_t       
-tmhwDcsNetwork_ConfigCfgGet(void)
-{
-    return gtmhwDcsNetwork_ConfigCfg;
-}
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SecurityCfgGet
-//
-// DESCRIPTION: Returns pointer to the tmhwDcsNetwork configuration structure array
-//
-//-----------------------------------------------------------------------------
-ptmhwDcsNetwork_Cfg_t       
-tmhwDcsNetwork_SecurityCfgGet(void)
-{
-    return gtmhwDcsNetwork_SecurityCfg;
-}
-
-
- 
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_ConfigCfgGetState
-//
-// DESCRIPTION: Returns pointer to the tmhwDcsNetwork configuration state structure array
-//
-//-----------------------------------------------------------------------------
-ptmhwDcsNetwork_CfgState_t 
-tmhwDcsNetwork_ConfigCfgGetState(void)
-{
-    return gDcsNetworkConfig_CfgState;
-}
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SecurityCfgGetState
-//
-// DESCRIPTION: Returns pointer to the tmhwDcsNetwork configuration state structure array
-//
-//-----------------------------------------------------------------------------
-ptmhwDcsNetwork_CfgState_t 
-tmhwDcsNetwork_SecurityCfgGetState(void)
-{
-    return gDcsNetworkSecurity_CfgState;
-}
-
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_ConfigCfgGetNumUnits
-//
-// DESCRIPTION: Returns total number of units available in DCS NETWORK hardware
-//-----------------------------------------------------------------------------
-UInt32
-tmhwDcsNetwork_ConfigCfgGetNumUnits(void)
-{
-    return (TMHW_DCSNETWORK_CONFIG_CFG_NUM_UNITS);
-}
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SecurityCfgGetNumUnits
-//
-// DESCRIPTION: Returns total number of units available in DCS NETWORK hardware
-//-----------------------------------------------------------------------------
-UInt32
-tmhwDcsNetwork_SecurityCfgGetNumUnits(void)
-{
-    return (TMHW_DCSNETWORK_SECURITY_CFG_NUM_UNITS);
-}
-
-
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/inc/tmhwDcsNetwork_Cfg.h linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/inc/tmhwDcsNetwork_Cfg.h
--- linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/inc/tmhwDcsNetwork_Cfg.h	2011-11-08 19:21:27.919398000 +0530
+++ linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/inc/tmhwDcsNetwork_Cfg.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,255 +0,0 @@
-/**********************************************************************
-*
-*	Header %name:	tmhwDcsNetwork_Cfg.h %
-*	Instance:		PB5_1
-*	Description:	
-*	%created_by:	girig %
-*	%date_created:	Wed Nov 26 10:07:32 2008 %
-*
-**********************************************************************/
-#ifndef TMHWDCSNETWORK_CFG_H //-----------------
-#define TMHWDCSNETWORK_CFG_H
-
-//-----------------------------------------------------------------------------
-// Standard include files:
-//-----------------------------------------------------------------------------
-//
-#include <tmNxTypes.h>
-
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-/*----------------------------------------------------------------------------- 
-Types and defines:
------------------------------------------------------------------------------*/
-#if (TMFL_PNX_ID == 5100) 	
-#define TMHW_DCSNETWORK_MAX_UNIT_COUNT      (1)   // Max number of DCS networks in the system TDCSN
-#else	
-#define TMHW_DCSNETWORK_MAX_UNIT_COUNT      (2)   // Max number of DCS networks in the system TDCSN & MDCSN
-#endif	
-#define TMHW_DCSNETWORK_NUMBER_OF_INVALID_INITIATORS (0x0)
-
-#if (TMFL_PNX_ID == 8550) 
-#define  TMHW_DCSNETWORK_TCONFIG_HWMODULE_ID                              0xA048
-#define  TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID                            0xA059	
-#define  TMHW_DCSNETWORK_MCONFIG_HWMODULE_ID                          0xA047
-#define  TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID                            0xA058	
-
-#define  TMHW_DCSNETWORK_TCONFIG_MAJOR_VERSION                            0x0
-#define  TMHW_DCSNETWORK_TSECURITY_MAJOR_VERSION                          0x0		
-#define  TMHW_DCSNETWORK_MCONFIG_MAJOR_VERSION                            0x0	
-#define  TMHW_DCSNETWORK_MSECURITY_MAJOR_VERSION                          0x0	
-	
-#define TMHW_DCSNETWORK_MDCS_A058_LIST	    
-#define TMHW_DCSNETWORK_TDCS_A059_LIST	    
-//#undef  MDCS_A0A0_LIST	  
-//#undef  TDCS_A0A2_LIST	 
-	
-#elif (TMFL_PNX_ID == 8535)
-#define  TMHW_DCSNETWORK_TCONFIG_HWMODULE_ID                              0xA0A1
-#define  TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID                            0xA0A2	
-#define  TMHW_DCSNETWORK_MCONFIG_HWMODULE_ID                              0xA09F
-#define  TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID                            0xA0A0	
-
-#define  TMHW_DCSNETWORK_TCONFIG_MAJOR_VERSION                            0x1
-#define  TMHW_DCSNETWORK_TSECURITY_MAJOR_VERSION                          0x1		
-#define  TMHW_DCSNETWORK_MCONFIG_MAJOR_VERSION                            0x1	
-#define  TMHW_DCSNETWORK_MSECURITY_MAJOR_VERSION                          0x1	
-
-//#undef  MDCS_A058_LIST	    
-//#undef  TDCS_A059_LIST	 
-#define TMHW_DCSNETWORK_MDCS_A0A0_LIST	  
-#define TMHW_DCSNETWORK_TDCS_A0A2_LIST	  
-	
-#elif (TMFL_PNX_ID == 8542)
-		
-#define  TMHW_DCSNETWORK_TCONFIG_HWMODULE_ID                              0xA0A1
-#define  TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID                            0xA0A2	
-#define  TMHW_DCSNETWORK_MCONFIG_HWMODULE_ID                              0xA09F
-#define  TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID                            0xA0A0	
-
-#define  TMHW_DCSNETWORK_TCONFIG_MAJOR_VERSION                            0x1
-#define  TMHW_DCSNETWORK_TSECURITY_MAJOR_VERSION                          0x1		
-#define  TMHW_DCSNETWORK_MCONFIG_MAJOR_VERSION                            0x1	
-#define  TMHW_DCSNETWORK_MSECURITY_MAJOR_VERSION                          0x1	
-
-//#undef  MDCS_A058_LIST	    
-//#undef  TDCS_A059_LIST	 
-#define TMHW_DCSNETWORK_MDCS_A0A0_LIST1	  
-#define TMHW_DCSNETWORK_TDCS_A0A2_LIST1	  	
-
-#elif (TMFL_PNX_ID == 8543)
-		
-#define  TMHW_DCSNETWORK_TCONFIG_HWMODULE_ID                              0xA0A1
-#define  TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID                            0xA0A2	
-#define  TMHW_DCSNETWORK_MCONFIG_HWMODULE_ID                              0xA09F
-#define  TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID                            0xA0A0	
-
-#define  TMHW_DCSNETWORK_TCONFIG_MAJOR_VERSION                            0x3
-#define  TMHW_DCSNETWORK_TSECURITY_MAJOR_VERSION                          0x3		
-#define  TMHW_DCSNETWORK_MCONFIG_MAJOR_VERSION                            0x3	
-#define  TMHW_DCSNETWORK_MSECURITY_MAJOR_VERSION                          0x3	
-
-//#undef  MDCS_A058_LIST	    
-//#undef  TDCS_A059_LIST	 
-#define TMHW_DCSNETWORK_MDCS_A0A0_LIST2	  
-#define TMHW_DCSNETWORK_TDCS_A0A2_LIST2	  
-	
-#elif (TMFL_PNX_ID == 85500)
-		
-#define  TMHW_DCSNETWORK_TCONFIG_HWMODULE_ID                              0xA06D
-#define  TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID                            0xA06E	
-#define  TMHW_DCSNETWORK_MCONFIG_HWMODULE_ID                              0xA06D
-#define  TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID                            0xA06E	
-
-#define  TMHW_DCSNETWORK_TCONFIG_MAJOR_VERSION                            0x3
-#define  TMHW_DCSNETWORK_TSECURITY_MAJOR_VERSION                          0x3		
-#define  TMHW_DCSNETWORK_MCONFIG_MAJOR_VERSION                            0x3	
-#define  TMHW_DCSNETWORK_MSECURITY_MAJOR_VERSION                          0x3	
-
-//#undef  MDCS_A058_LIST	    
-//#undef  TDCS_A059_LIST	 
-#define TMHW_DCSNETWORK_MDCS_A06E_LIST2	  
-#define TMHW_DCSNETWORK_TDCS_A06E_LIST2	  
-
-#elif (TMFL_PNX_ID == 5100)
-#define  TMHW_DCSNETWORK_TCONFIG_HWMODULE_ID                              0xA0A1
-#define  TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID                            0xA0A2	
-
-#define  TMHW_DCSNETWORK_TCONFIG_MAJOR_VERSION                            0x1
-#define  TMHW_DCSNETWORK_TSECURITY_MAJOR_VERSION                          0x1		
-
-//#undef  MDCS_A058_LIST	    
-//#undef  TDCS_A059_LIST	 
-#define TMHW_DCSNETWORK_TDCS_A0A2_LIST	  	
-	
-#endif
-
-/* Base addresses of DCSNETWORK Module*/
-#if (TMFL_PNX_ID == 8550) 
-#ifndef TMHW_DCSNETWORK_TCONFIG_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_TCONFIG_PHY_MMIO_ADDRESS0       (0x1BF03000)
-#endif
-	
-#ifndef TMHW_DCSNETWORK_TSECURITY_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_TSECURITY_PHY_MMIO_ADDRESS0     (0x1BF15000)
-#endif
-	
-#ifndef TMHW_DCSNETWORK_MCONFIG_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_MCONFIG_PHY_MMIO_ADDRESS0       (0x1BE4E000)
-#endif
-	
-#ifndef TMHW_DCSNETWORK_MSECURITY_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_MSECURITY_PHY_MMIO_ADDRESS0     (0x1BE68000)	
-#endif
-	
-#elif ( (TMFL_PNX_ID == 8535) ||  (TMFL_PNX_ID == 8542) || (TMFL_PNX_ID == 8543) || (TMFL_PNX_ID == 85500))
-	
-#ifndef TMHW_DCSNETWORK_TCONFIG_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_TCONFIG_PHY_MMIO_ADDRESS0       (0x1BF03000)
-#endif
-	
-#ifndef TMHW_DCSNETWORK_TSECURITY_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_TSECURITY_PHY_MMIO_ADDRESS0     (0x1BF15000)
-#endif
-	
-#ifndef TMHW_DCSNETWORK_MCONFIG_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_MCONFIG_PHY_MMIO_ADDRESS0       (0x1BE4E000)
-#endif
-	
-#ifndef TMHW_DCSNETWORK_MSECURITY_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_MSECURITY_PHY_MMIO_ADDRESS0     (0x1BE68000)	
-#endif
-
-#elif (TMFL_PNX_ID == 5100)
-	
-#ifndef TMHW_DCSNETWORK_TCONFIG_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_TCONFIG_PHY_MMIO_ADDRESS0       (0x1BF03000) //Not known
-#endif
-	
-#ifndef TMHW_DCSNETWORK_TSECURITY_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_TSECURITY_PHY_MMIO_ADDRESS0     (0x1BF15000)
-#endif
-	
-#ifndef TMHW_DCSNETWORK_MCONFIG_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_MCONFIG_PHY_MMIO_ADDRESS0       (0x1BE4E000)
-#endif
-	
-#ifndef TMHW_DCSNETWORK_MSECURITY_PHY_MMIO_ADDRESS0
-#define TMHW_DCSNETWORK_MSECURITY_PHY_MMIO_ADDRESS0     (0x1BE68000)	
-#endif
-	
-#endif
-
-
-#if (TMFL_PNX_ID == 8550)
-
-#define TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS   (5)     
-#define TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS      (32)    
-#define TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS   (3)     
-#define TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS      (35)    
-
-#elif (TMFL_PNX_ID == 8535)
-
-#define TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS   (6)     
-#define TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS      (30)    
-#define TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS   (6)     
-#define TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS      (22)    
-
-#elif (TMFL_PNX_ID == 8542)
-/* Ref PNX8543_MMIO_Base_Addr_Map.xls & PNX8542_Architecture_specification.pdf */
-#define TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS   (7)    
-#define TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS      (31)   
-#define TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS   (7)    
-#define TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS      (26)   
-
-#elif (TMFL_PNX_ID == 8543)
-/* Ref PNX8543_Architecture_specification.pdf */
-#define TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS   (7)    
-#define TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS      (42)   
-#define TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS   (7)    
-#define TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS      (28)   
-	
-#elif (TMFL_PNX_ID == 85500)
-/* Ref PNX85500_Architecture_specification.pdf */
-#define TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS   (5)    
-#define TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS      (52)   
-#define TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS   (3)    
-#define TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS      (30) 
-	
-#elif (TMFL_PNX_ID == 5100)
-
-#define TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS   (6)    // CHECK THIS VALUE
-#define TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS      (22)   // CHECK THIS VALUE
-#define TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS   (6)    // CHECK THIS VALUE
-#define TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS      (22)   // CHECK THIS VALUE
-	
-#endif
-
-
-
-
-// tmhwDcsNetwork configuration structure	
-typedef struct tmhwDcsNetwork_Cfg
-{
-	UInt32 baseAddress;
-	UInt32 moduleID;
-}tmhwDcsNetwork_Cfg_t, *ptmhwDcsNetwork_Cfg_t;
-
-// tmhwDcsNetwork configuration state structure
-typedef struct tmhwDcsNetwork_CfgState
-{
-	UInt32 intNum;
-}tmhwDcsNetwork_CfgState_t, *ptmhwDcsNetwork_CfgState_t;
-
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif // TMHWDCSNETWORK_CFG_H //---------------
-
-
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/inc/tmhwDcsNetwork.h linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/inc/tmhwDcsNetwork.h
--- linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/inc/tmhwDcsNetwork.h	2011-11-08 19:21:27.923392000 +0530
+++ linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/inc/tmhwDcsNetwork.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,942 +0,0 @@
-/* 
- * This program is free software; you can redistribute it and/or modify 
- * it under the terms of the GNU General Public License as published by 
- * the Free Software Foundation; either version 2 of the License, or 
- * (at your option) any later version. 
- * 
- * This program is distributed in the hope that it will be useful, 
- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
- * GNU General Public License for more details. 
- * 
- * You should have received a copy of the GNU General Public License 
- * along with this program; if not, write to the Free Software 
- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 
- * 
- * Copyright (C) 2007 NXP B.V. 
- * All Rights Reserved. 
- */ 
-//-----------------------------------------------------------------------------
-//
-// FILE NAME:    tmhwDcsNetwork.h
-//
-// DESCRIPTION:  This header file describes definitions, types, and functions
-//               exported by the DCS Network hardware API.   
-//
-// DOCUMENT REF: DVP Software Coding Guidelines specification
-//               DVP Hardware API Interface Specification
-//               DVP Software Versioning Specification
-//               DCS Network and security Design specification
-//
-// NOTES:        None
-//
-//-----------------------------------------------------------------------------
-//
-
-/*
- * DCS (Device Control and Status) Network is used to access the control and status
- * registers of various IP's inside pnx1500/pnx8550.   In the DCS network there
- * are initiators and targets.  Initiators start the register access.   Initiators
- * are usually the processor cores (like MIPS, TM, etc.)  or external PCI masters
- * through the PCI/XIO block.  Targets are the IP blocks having control and
- * status registers.  
- *
- * This component can be used enable/disable the access of an initiator to a target.
- * Also, this component can be used to see whether an initiator access is timed out
- * or whether an initiator is doing illegal access.
- * 
- * Here is the sequence of calls
- *
- * 1. tmhwDcsNetwork_GetSWVersion(....)
- *     
- *    ....Check whether the compatibility number and major version number is as 
- *        expected
- *
- * 2. tmhwDcsNetwork_GetCapabilities(......)
- *
- *    ....Get the capabilities of the particular unit.   Can be used to find out
- *        the number of initiators and number of targets.
- *
- * 3. tmhwDcsNetwork_Init(.....)
- *
- *    ....Initialise the required unit
- *
- * 4. tmhwDcsNetwork_GetTargetAccessControl(.....)
- * 
- *    ....To get the list of initiators that has access to the given target
- *
- * 5. tmhwDcsNetwork_SetTargetAccessControl(.....)
- *
- *    ....To modify/update the list of initiators having access to the given target.
- *
- * 6. Can use tmhwDcsNetwork_IntGetStatus, tmhwDcsNetwork_IntEnable, 
- *    tmhwDcsNetwork_IntDisable, tmhwDcsNetwork_IntClear functions to enable/disable/
- *    clear/get status of the interrupts.
- *
- * 7. tmhwDcsNetwork_Deinit(....)
- *
- *    ....Deinitialise the required unit
- *
- */
- 
-
-#ifndef TMHWDCSNETWORK_H
-#define TMHWDCSNETWORK_H
-
-//-----------------------------------------------------------------------------
-// Standard include files:
-//-----------------------------------------------------------------------------
-
-#include <tmFlags.h>
-#include <tmNxTypes.h>                  // DVP standard types/defines
-#include <tmNxCompId.h>                 // DVP Component ID types/defines
-
-#include <tmhwDcsNetwork_Cfg.h>
-//-----------------------------------------------------------------------------
-// Project include files:
-//-----------------------------------------------------------------------------
-//
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-
-//-----------------------------------------------------------------------------
-// Types and defines:
-//-----------------------------------------------------------------------------
-// NOTE: The HWAPI compatibility number, major version number, and minor
-//       version number must be kept current with any HWAPI interface changes.
-//       Changes to the HWAPI interface that are not backwards compatible
-//       result in a compatibility number incremental change.  If interfaces
-//       are changed but remain backwards compatible, the compatibility number
-//       remains the same but the major version number is incremented.
-//       Software that will use the HWAPI can check these version numbers both
-//       at build time (using the C preprocessor) and at runtime by calling
-//       the tmhw<Component>_GetSwVersion function.  Refer to the DVP/Nexperia
-//       Software Versioning Specification for more details.
-//
-
-#define TMHW_DCSNETWORK_COMPATIBILITY_NR       1   // DCSNETWORK HWAPI Compatibility number
-#define TMHW_DCSNETWORK_MAJOR_VERSION_NR       1   // DCSNETWORK HWAPI Major Version number
-#define TMHW_DCSNETWORK_MINOR_VERSION_NR       0   // DCSNETWORK HWAPI Minor Version number
-
-
-//  DCSNETWORK Status/Error Codes
-#define TMHW_ERR_DCSNETWORK_BASE              ( CID_HW_DCSNETWORK )
-#define TMHW_ERR_DCSNETWORK_COMP              ( CID_HW_DCSNETWORK | TM_ERR_COMP_UNIQUE_START )
-
-//
-#define TMHW_ERR_DCSNETWORK_COMPATIBILITY                                    \
-/* !ErrorTag: Component software compatibility error in tmhwDcsNetwork   */  \
-                                    ( TMHW_ERR_DCSNETWORK_BASE +             \
-                                      TM_ERR_COMPATIBILITY )
-
-#define TMHW_ERR_DCSNETWORK_MAJOR_VERSION                                    \
-/* !ErrorTag: Component software major version error in tmhwDcsNetwork    */ \
-                                    ( TMHW_ERR_DCSNETWORK_BASE +             \
-                                      TM_ERR_MAJOR_VERSION )
-                                      
-#define TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM                                     \
-/* !ErrorTag: Invalid hardware module unit number in tmhwDcsNetwork       */ \
-                                    ( TMHW_ERR_DCSNETWORK_BASE +             \
-                                      TM_ERR_BAD_UNIT_NUMBER )
-                                      
-#define TMHW_ERR_DCSNETWORK_BAD_PARAMETER                                    \
-/* !ErrorTag: bad parameter in tmhwDcsNetwork                             */ \
-                                    ( TMHW_ERR_DCSNETWORK_BASE +             \
-                                      TM_ERR_BAD_PARAMETER )
-                                      
-#define TMHW_ERR_DCSNETWORK_NOT_SUPPORTED                                    \
-/* !ErrorTag: not supported error in tmhwDcsNetwork                       */ \
-                                    ( TMHW_ERR_DCSNETWORK_BASE +             \
-                                      TM_ERR_NOT_SUPPORTED )
-
-#define TMHW_ERR_DCSNETWORK_BAD_MODULE_ID                                    \
-/* !ErrorTag: not supported error in tmhwDcsNetwork                       */ \
-                                    ( TMHW_ERR_DCSNETWORK_COMP +             \
-                                      0x0001 )
-                                      
-#define TMHW_ERR_DCSNETWORK_BAD_TARGET                                       \
-/* !ErrorTag: not supported error in tmhwDcsNetwork                       */ \
-                                    ( TMHW_ERR_DCSNETWORK_COMP +             \
-                                      0x0002 )
-
-#define TMHW_ERR_DCSNETWORK_BAD_INITIATOR                                    \
-/* !ErrorTag: not supported error in tmhwDcsNetwork                       */ \
-                                    ( TMHW_ERR_DCSNETWORK_COMP +             \
-                                      0x0003 )
-
-#define TMHW_ERR_DCSNETWORK_NULLORERROR_TARGET             ( TMHW_ERR_DCSNETWORK_COMP +  0x0004 )
-#define TMHW_ERR_DCSNETWORK_CONTROLLER_CONFIG_ERROR        ( TMHW_ERR_DCSNETWORK_COMP +  0x0005 )
-#define TMHW_ERR_DCSNETWORK_CONTROLLER_SECURITY_APERTURE   ( TMHW_ERR_DCSNETWORK_COMP +  0x0006 )				    
-//Selected agents during timeout or error
-#define DCSNETWORK_NULLORERROR_TARGET             64
-#define DCSNETWORK_CONTROLLER_CONFIG_ERROR        65
-#define DCSNETWORK_CONTROLLER_SECURITY_APERTURE   66				    
-                                      
-// List of interrupts possible
-//
-
-#define TMHW_DCSNETWORK_TARGET_ACCESS_INTERRUPT_NONE      0x0
-#define TMHW_DCSNETWORK_TARGET_ACCESS_INTERRUPT_ERROR     0x1
-#define TMHW_DCSNETWORK_TARGET_ACCESS_INTERRUPT_TIMEOUT   0x2
-#define TMHW_DCSNETWORK_TARGET_ACCESS_INTERRUPT_ALL      \
-        (TMHW_DCSNETWORK_TARGET_ACCESS_INTERRUPT_ERROR | \
-         TMHW_DCSNETWORK_TARGET_ACCESS_INTERRUPT_TIMEOUT)
-
-
-
-
-
-
-
-	
-// DCS Network Capabilities structure
-//
-typedef struct    tmhwDcsNetwork_Capabilities
-{
-    UInt32 dcsNetworkUnitCount; // number of dcs networks
-    UInt32 noOfTargets;         // number of targets in the DCS network
-    UInt32 noOfInitiators;      // number of initiators in the DCS network
-} tmhwDcsNetwork_Capabilities_t, *ptmhwDcsNetwork_Capabilities_t;
-
-
-
-
-#if (defined (TMHW_DCSNETWORK_MDCS_A058_LIST) || defined (TMHW_DCSNETWORK_TDCS_A059_LIST))
-// List of Initiators
-//
-typedef enum tmhwDcsNetwork_InitiatorId
-{
-    tmhwDcsNetwork_InitiatorIdDcsNetworkBridge = 0x0,
-    tmhwDcsNetwork_InitiatorIdMips = 1,
-    tmhwDcsNetwork_InitiatorIdPci = 2,
-    tmhwDcsNetwork_InitiatorIdBoot = 3,
-    tmhwDcsNetwork_InitiatorIdEjtag = 4,
-    tmhwDcsNetwork_InitiatorIdTriMedia = 5,
-    tmhwDcsNetwork_InitiatorIdInvalid = 0xFFFF
-    
-} tmhwDcsNetwork_InitiatorId_t, *ptmhwDcsNetwork_InitiatorId_t;
-
-
-
-// List of Targets
-//
-typedef enum tmhwDcsNetwork_TargetId
-{
-    tmhwDcsNetwork_TargetIdDcsNetworkConfigMod = 0x0,
-    tmhwDcsNetwork_TargetIdDcsNetworkSecurityMod,
-    tmhwDcsNetwork_TargetIdDcs2DcsBridge,
-    tmhwDcsNetwork_TargetIdGic,
-    tmhwDcsNetwork_TargetIdPciXio,
-    tmhwDcsNetwork_TargetIdJtagDma,
-    tmhwDcsNetwork_TargetIdSmartCard,
-    tmhwDcsNetwork_TargetIdI2c,
-    tmhwDcsNetwork_TargetIdClocks,
-    tmhwDcsNetwork_TargetIdUsb,
-    tmhwDcsNetwork_TargetIdUart,
-    tmhwDcsNetwork_TargetIdGlobalRegs,
-    tmhwDcsNetwork_TargetIdD2d,
-    tmhwDcsNetwork_TargetIdReset,
-    tmhwDcsNetwork_TargetIdTmDbg,
-    tmhwDcsNetwork_TargetIdPmanArbiter,
-    tmhwDcsNetwork_TargetIdDdrController,
-    tmhwDcsNetwork_TargetIdPmanSecurity,
-    tmhwDcsNetwork_TargetIdPmanMonitor,
-    tmhwDcsNetwork_TargetIdEjtag,
-    tmhwDcsNetwork_TargetIdDmaGate,
-    tmhwDcsNetwork_TargetIdPci,
-    tmhwDcsNetwork_TargetIdXio,
-    tmhwDcsNetwork_TargetIdGpio,
-    tmhwDcsNetwork_TargetIdVmpg,
-    tmhwDcsNetwork_TargetIdVip,
-    tmhwDcsNetwork_TargetIdVld,
-    tmhwDcsNetwork_TargetIdSpdo,
-    tmhwDcsNetwork_TargetIdSpdi,
-    tmhwDcsNetwork_TargetIdDvdd,
-    tmhwDcsNetwork_TargetIdMbs,
-    tmhwDcsNetwork_TargetIdQtnr,
-    tmhwDcsNetwork_TargetIdQvcp,
-    tmhwDcsNetwork_TargetIdAo,
-    tmhwDcsNetwork_TargetIdAi,
-    tmhwDcsNetwork_TargetIdEdma,
-    tmhwDcsNetwork_TargetIdTsdma,
-    tmhwDcsNetwork_TargetIdDenc,
-    tmhwDcsNetwork_TargetIdMsp,
-    tmhwDcsNetwork_TargetIdTm3260,
-    tmhwDcsNetwork_TargetIdVpk,
-    tmhwDcsNetwork_TargetIdTunnel,
-    tmhwDcsNetwork_TargetIdTunnelMmio
-        
-} tmhwDcsNetwork_TargetId_t, *ptmhwDcsNetwork_TargetId_t;
-
-
-
-#elif (defined(TMHW_DCSNETWORK_MDCS_A0A0_LIST) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST))
-// List of Initiators
-//
-typedef enum tmhwDcsNetwork_InitiatorId
-{
-    tmhwDcsNetwork_InitiatorId0 = 0x0,
-    tmhwDcsNetwork_InitiatorId1 = 1,
-    tmhwDcsNetwork_InitiatorId2 = 2,
-    tmhwDcsNetwork_InitiatorId3 = 3,
-    tmhwDcsNetwork_InitiatorId4 = 4,
-    tmhwDcsNetwork_InitiatorId5 = 5,
-    tmhwDcsNetwork_InitiatorIdInvalid = 0xFFFF
-    
-} tmhwDcsNetwork_InitiatorId_t, *ptmhwDcsNetwork_InitiatorId_t;
-
-
-// List of Targets
-//
-typedef enum tmhwDcsNetwork_TargetId
-{
-    tmhwDcsNetwork_TargetId0 = 0x0,
-    tmhwDcsNetwork_TargetId1,
-    tmhwDcsNetwork_TargetId2,
-    tmhwDcsNetwork_TargetId3,
-    tmhwDcsNetwork_TargetId4,
-    tmhwDcsNetwork_TargetId5,
-    tmhwDcsNetwork_TargetId6,
-    tmhwDcsNetwork_TargetId7,
-    tmhwDcsNetwork_TargetId8,
-    tmhwDcsNetwork_TargetId9,
-    tmhwDcsNetwork_TargetId10,
-    tmhwDcsNetwork_TargetId11,
-    tmhwDcsNetwork_TargetId12,
-    tmhwDcsNetwork_TargetId13,
-    tmhwDcsNetwork_TargetId14,
-    tmhwDcsNetwork_TargetId15,
-    tmhwDcsNetwork_TargetId16,
-    tmhwDcsNetwork_TargetId17,
-    tmhwDcsNetwork_TargetId18,
-    tmhwDcsNetwork_TargetId19,
-    tmhwDcsNetwork_TargetId20,
-    tmhwDcsNetwork_TargetId21,
-    tmhwDcsNetwork_TargetId22,
-    tmhwDcsNetwork_TargetId23,
-    tmhwDcsNetwork_TargetId24,
-    tmhwDcsNetwork_TargetId25,
-    tmhwDcsNetwork_TargetId26,
-    tmhwDcsNetwork_TargetId27,
-    tmhwDcsNetwork_TargetId28,
-    tmhwDcsNetwork_TargetId29
-           
-} tmhwDcsNetwork_TargetId_t, *ptmhwDcsNetwork_TargetId_t;
-
-
-#elif (defined(TMHW_DCSNETWORK_MDCS_A0A0_LIST1) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST1))
-// List of Initiators
-//
-typedef enum tmhwDcsNetwork_InitiatorId
-{
-    tmhwDcsNetwork_InitiatorIdMips = 0x0,
-    tmhwDcsNetwork_InitiatorIdPci = 1,
-    tmhwDcsNetwork_InitiatorIdReset = 2,
-    tmhwDcsNetwork_InitiatorIdEjtag = 3,
-    tmhwDcsNetwork_InitiatorIdIICSlave = 4,
-    tmhwDcsNetwork_InitiatorIdTriMedia = 5,
-    tmhwDcsNetwork_InitiatorIdMSVDCPU = 6,
-    tmhwDcsNetwork_InitiatorIdInvalid = 0xFFFF
-    
-} tmhwDcsNetwork_InitiatorId_t, *ptmhwDcsNetwork_InitiatorId_t;
-
-// List of Targets
-//
-typedef enum tmhwDcsNetwork_TargetId
-{
-    tmhwDcsNetwork_TargetId0 = 0x0,
-    tmhwDcsNetwork_TargetId1,
-    tmhwDcsNetwork_TargetId2,
-    tmhwDcsNetwork_TargetId3,
-    tmhwDcsNetwork_TargetId4,
-    tmhwDcsNetwork_TargetId5,
-    tmhwDcsNetwork_TargetId6,
-    tmhwDcsNetwork_TargetId7,
-    tmhwDcsNetwork_TargetId8,
-    tmhwDcsNetwork_TargetId9,
-    tmhwDcsNetwork_TargetId10,
-    tmhwDcsNetwork_TargetId11,
-    tmhwDcsNetwork_TargetId12,
-    tmhwDcsNetwork_TargetId13,
-    tmhwDcsNetwork_TargetId14,
-    tmhwDcsNetwork_TargetId15,
-    tmhwDcsNetwork_TargetId16,
-    tmhwDcsNetwork_TargetId17,
-    tmhwDcsNetwork_TargetId18,
-    tmhwDcsNetwork_TargetId19,
-    tmhwDcsNetwork_TargetId20,
-    tmhwDcsNetwork_TargetId21,
-    tmhwDcsNetwork_TargetId22,
-    tmhwDcsNetwork_TargetId23,
-    tmhwDcsNetwork_TargetId24,
-    tmhwDcsNetwork_TargetId25,
-    tmhwDcsNetwork_TargetId26,
-    tmhwDcsNetwork_TargetId27,
-    tmhwDcsNetwork_TargetId28,
-    tmhwDcsNetwork_TargetId29,
-    tmhwDcsNetwork_TargetId30
-           
-} tmhwDcsNetwork_TargetId_t, *ptmhwDcsNetwork_TargetId_t;
-
-#elif (defined(TMHW_DCSNETWORK_MDCS_A0A0_LIST2) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST2))
-// List of Initiators
-//
-typedef enum tmhwDcsNetwork_InitiatorId
-{
-    tmhwDcsNetwork_InitiatorIdMips = 0x0,
-    tmhwDcsNetwork_InitiatorIdPci = 1,
-    tmhwDcsNetwork_InitiatorIdReset = 2,
-    tmhwDcsNetwork_InitiatorIdEjtag = 3,
-    tmhwDcsNetwork_InitiatorIdIICSlave = 4,
-    tmhwDcsNetwork_InitiatorIdTriMedia = 5,
-    tmhwDcsNetwork_InitiatorIdMSVDCPU = 6,
-    tmhwDcsNetwork_InitiatorIdInvalid = 0xFFFF
-    
-} tmhwDcsNetwork_InitiatorId_t, *ptmhwDcsNetwork_InitiatorId_t;
-
-// List of Targets
-//
-typedef enum tmhwDcsNetwork_TargetId
-{
-    tmhwDcsNetwork_TargetId0 = 0x0,
-    tmhwDcsNetwork_TargetId1,
-    tmhwDcsNetwork_TargetId2,
-    tmhwDcsNetwork_TargetId3,
-    tmhwDcsNetwork_TargetId4,
-    tmhwDcsNetwork_TargetId5,
-    tmhwDcsNetwork_TargetId6,
-    tmhwDcsNetwork_TargetId7,
-    tmhwDcsNetwork_TargetId8,
-    tmhwDcsNetwork_TargetId9,
-    tmhwDcsNetwork_TargetId10,
-    tmhwDcsNetwork_TargetId11,
-    tmhwDcsNetwork_TargetId12,
-    tmhwDcsNetwork_TargetId13,
-    tmhwDcsNetwork_TargetId14,
-    tmhwDcsNetwork_TargetId15,
-    tmhwDcsNetwork_TargetId16,
-    tmhwDcsNetwork_TargetId17,
-    tmhwDcsNetwork_TargetId18,
-    tmhwDcsNetwork_TargetId19,
-    tmhwDcsNetwork_TargetId20,
-    tmhwDcsNetwork_TargetId21,
-    tmhwDcsNetwork_TargetId22,
-    tmhwDcsNetwork_TargetId23,
-    tmhwDcsNetwork_TargetId24,
-    tmhwDcsNetwork_TargetId25,
-    tmhwDcsNetwork_TargetId26,
-    tmhwDcsNetwork_TargetId27,
-    tmhwDcsNetwork_TargetId28,
-    tmhwDcsNetwork_TargetId29,
-    tmhwDcsNetwork_TargetId30,
-    tmhwDcsNetwork_TargetId31,
-    tmhwDcsNetwork_TargetId32,
-    tmhwDcsNetwork_TargetId33,
-    tmhwDcsNetwork_TargetId34,
-    tmhwDcsNetwork_TargetId35,
-    tmhwDcsNetwork_TargetId36,
-    tmhwDcsNetwork_TargetId37,
-    tmhwDcsNetwork_TargetId38,
-    tmhwDcsNetwork_TargetId39,
-    tmhwDcsNetwork_TargetId40,
-    tmhwDcsNetwork_TargetId41
-               
-} tmhwDcsNetwork_TargetId_t, *ptmhwDcsNetwork_TargetId_t;
-
-#elif (defined(TMHW_DCSNETWORK_MDCS_A06E_LIST2) || defined (TMHW_DCSNETWORK_TDCS_A06E_LIST2))
-// List of Initiators
-//
-typedef enum tmhwDcsNetwork_InitiatorId
-{
-    tmhwDcsNetwork_InitiatorIdMips = 0,
-    tmhwDcsNetwork_InitiatorIdPci = 1,
-    tmhwDcsNetwork_InitiatorIdBoot = 2,
-    tmhwDcsNetwork_InitiatorIdEjtag = 3,
-    tmhwDcsNetwork_InitiatorIdI2c1Debug = 4,
-    tmhwDcsNetwork_InitiatorIdUnused = 5,
-    tmhwDcsNetwork_InitiatorIdAvdsp = 6,
-    tmhwDcsNetwork_InitiatorIdNmdsp1 = 7,
-    tmhwDcsNetwork_InitiatorIdNmdsp2 = 8,
-    tmhwDcsNetwork_InitiatorIdInvalid = 0xFFFF
-    
-} tmhwDcsNetwork_InitiatorId_t, *ptmhwDcsNetwork_InitiatorId_t;
-
-// List of Targets
-//
-typedef enum tmhwDcsNetwork_TargetId
-{
-    tmhwDcsNetwork_TargetId0 = 0x0,
-    tmhwDcsNetwork_TargetId1,
-    tmhwDcsNetwork_TargetId2,
-    tmhwDcsNetwork_TargetId3,
-    tmhwDcsNetwork_TargetId4,
-    tmhwDcsNetwork_TargetId5,
-    tmhwDcsNetwork_TargetId6,
-    tmhwDcsNetwork_TargetId7,
-    tmhwDcsNetwork_TargetId8,
-    tmhwDcsNetwork_TargetId9,
-    tmhwDcsNetwork_TargetId10,
-    tmhwDcsNetwork_TargetId11,
-    tmhwDcsNetwork_TargetId12,
-    tmhwDcsNetwork_TargetId13,
-    tmhwDcsNetwork_TargetId14,
-    tmhwDcsNetwork_TargetId15,
-    tmhwDcsNetwork_TargetId16,
-    tmhwDcsNetwork_TargetId17,
-    tmhwDcsNetwork_TargetId18,
-    tmhwDcsNetwork_TargetId19,
-    tmhwDcsNetwork_TargetId20,
-    tmhwDcsNetwork_TargetId21,
-    tmhwDcsNetwork_TargetId22,
-    tmhwDcsNetwork_TargetId23,
-    tmhwDcsNetwork_TargetId24,
-    tmhwDcsNetwork_TargetId25,
-    tmhwDcsNetwork_TargetId26,
-    tmhwDcsNetwork_TargetId27,
-    tmhwDcsNetwork_TargetId28,
-    tmhwDcsNetwork_TargetId29,
-    tmhwDcsNetwork_TargetId30,
-    tmhwDcsNetwork_TargetId31,
-    tmhwDcsNetwork_TargetId32,
-    tmhwDcsNetwork_TargetId33,
-    tmhwDcsNetwork_TargetId34,
-    tmhwDcsNetwork_TargetId35,
-    tmhwDcsNetwork_TargetId36,
-    tmhwDcsNetwork_TargetId37,
-    tmhwDcsNetwork_TargetId38,
-    tmhwDcsNetwork_TargetId39,
-    tmhwDcsNetwork_TargetId40,
-    tmhwDcsNetwork_TargetId41,
-    tmhwDcsNetwork_TargetId42,
-	tmhwDcsNetwork_TargetId43,
-	tmhwDcsNetwork_TargetId44,
-	tmhwDcsNetwork_TargetId45,
-	tmhwDcsNetwork_TargetId46,
-	tmhwDcsNetwork_TargetId47,
-	tmhwDcsNetwork_TargetId48,
-	tmhwDcsNetwork_TargetId49,
-	tmhwDcsNetwork_TargetId50,
-	tmhwDcsNetwork_TargetId51
-           
-} tmhwDcsNetwork_TargetId_t, *ptmhwDcsNetwork_TargetId_t;
-
-#endif
-
-// Structure to represent exact initiator unit
-//
-typedef struct    tmhwDcsNetwork_InitiatorUnit
-{
-    tmhwDcsNetwork_InitiatorId_t   initiatorId;  // Id of the initiator
-    tmUnitSelect_t                 unitNo;       // Unit number of the initiator.
-    
-} tmhwDcsNetwork_InitiatorUnit_t, *ptmhwDcsNetwork_InitiatorUnit_t;
-
-
-
-
-// Structure to represent exact target unit
-//
-typedef struct    tmhwDcsNetwork_TargetUnit
-{
-    tmhwDcsNetwork_TargetId_t   targetId;     // Id of the target.
-    tmUnitSelect_t              unitNo;       // Unit number of the target.
-    
-} tmhwDcsNetwork_TargetUnit_t, *ptmhwDcsNetwork_TargetUnit_t;
-
-
-
-// List of Target access timeout settings possible
-//
-typedef enum tmhwDcsNetwork_TargetAccessTimeout
-{
-    tmhwDcsNetwork_TargetAccessTimeout_7WaitCycles = 0x0,
-    tmhwDcsNetwork_TargetAccessTimeout_15WaitCycles = 0x3,
-    tmhwDcsNetwork_TargetAccessTimeout_31WaitCycles = 0x4,
-    tmhwDcsNetwork_TargetAccessTimeout_63WaitCycles = 0x5,
-    tmhwDcsNetwork_TargetAccessTimeout_127WaitCycles = 0x6,
-    tmhwDcsNetwork_TargetAccessTimeout_255WaitCycles = 0x7,
-    tmhwDcsNetwork_TargetAccessTimeout_511WaitCycles = 0x8,
-    tmhwDcsNetwork_TargetAccessTimeout_1023WaitCycles = 0x9,
-    tmhwDcsNetwork_TargetAccessTimeout_2047WaitCycles = 0xA,
-    tmhwDcsNetwork_TargetAccessTimeout_4095WaitCycles = 0xB,
-    tmhwDcsNetwork_TargetAccessTimeout_8191WaitCycles = 0xC,
-    tmhwDcsNetwork_TargetAccessTimeout_16383WaitCycles = 0xD,
-    tmhwDcsNetwork_TargetAccessTimeout_32767WaitCycles = 0xE,
-    tmhwDcsNetwork_TargetAccessTimeout_65535WaitCycles = 0xF,
-    tmhwDcsNetwork_TargetAccessTimeout_Disabled = 0x10
-        
-} tmhwDcsNetwork_TargetAccessTimeout_t, *ptmhwDcsNetwork_TargetAccessTimeout_t;
-
-
-
-
-
-// Structure for accessing the complete information about the interrupt cause
-//
-typedef struct tmhwDcsNetwork_IntCauseInfo
-{
-    UInt32                          errorOrTimeout;    // Interrupt can be either because of
-                                                       //  error or timeout.
-    UInt32                          byteMask;          // Value of the byte mask when the interrupt
-                                                       //  occurred.  Gives information on which were
-                                                       //  being accessed.
-    UInt32                          address;           // Address which caused error or timeout in
-                                                       //  the dcs network.                                                       
-    Bool                            isRead;            // Is it a read? or Write?
-                                                       //  True : Read
-                                                       //  False : Write
-    tmhwDcsNetwork_TargetUnit_t     target;            // Target that was being addressed    
-    tmhwDcsNetwork_InitiatorUnit_t  initiator;         // Initiator of the transaction
-    
-} tmhwDcsNetwork_IntCauseInfo_t, *ptmhwDcsNetwork_IntCauseInfo_t;
-
-
-#if (defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST1) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST1) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST2) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST2) || defined(TMHW_DCSNETWORK_MDCS_A06E_LIST2) || defined(TMHW_DCSNETWORK_TDCS_A06E_LIST2))   
-// Structure for accessing the complete information about the Feature register
-//
-typedef struct ptmhwDcsNetwork_FeaturesInfo
-{
-    UInt32                          uinqueID;    //This field may be used by software if more than one controller is present with 
-                                                 //the same number of initiators and targets.
-                                                      
-    Bool                            security;      //    Indicates whether the DCS Controller has been compiled with Security features. 
-                                                 //If so then a security aperture exists, and controls access to all targets,
-						 // including the DCS Configuration and DCS Security Apertures.
-						 
-    UInt32                          numBaseRegs;           // Number of Base Registers Defined for the DCS Controller                                                   
-    UInt32                          numOfTargets;            // Number of DCS Targets attached to the DCS Controller
-    
-    UInt32                          numOfInitators;            // Number of DCS Initiators attached to the DCS Controller 
-    
-} tmhwDcsNetwork_FeaturesInfo_t, *ptmhwDcsNetwork_FeaturesInfo_t;
-#endif
-
-typedef struct 
-{
-    tmhwDcsNetwork_TargetId_t    targetId;
-    tmUnitSelect_t               unitNo;
-    UInt32                       offset;
-} targetInfo;
-
-typedef struct
-{
-    tmhwDcsNetwork_InitiatorId_t initiatorId;
-    tmUnitSelect_t               unitNo;
-    UInt32                       initiatorMask;
-} initiatorInfo;
-
-
-//-----------------------------------------------------------------------------
-// External function/data references:
-//-----------------------------------------------------------------------------
-
-//-----------------------------------------------------------------------------
-// Exported functions:
-//-----------------------------------------------------------------------------
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_Init:
-//
-// DESCRIPTION: - Initialise the DCS network configuration and security feature 
-//                related structures/hardware.
-//              - Obtain the MMIO base address for the given DCS network 
-//              - The device is set to tmPowerOn.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_Init (
-    tmUnitSelect_t    dcsNetworkUnitId           //  I: Unit number of DCS network
-    );
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_Deinit:
-//
-// DESCRIPTION: Deinitialize the DCS network configuration and security related 
-//              structures.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_Deinit (
-    tmUnitSelect_t    dcsNetworkUnitId          //  I: Unit number of DCS network
-    );
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetSWVersion:
-//
-// DESCRIPTION: Returns SW version of the implementation of this interface
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetSWVersion (
-    ptmSWVersion_t      pVersion    //  O: ptr to structure to obtain version
-    );
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetCapabilities:
-//
-// DESCRIPTION: Get the capabilities of the given DCS network unit.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetCapabilities (
-    tmUnitSelect_t                 dcsNetworkUnitId,   //  I: Unit number of DCS network
-    ptmhwDcsNetwork_Capabilities_t pDevCaps            //  O: DCS network capabilities struct 
-                                                       //     ptr
-    );
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SetPowerState:
-//
-// DESCRIPTION: Sets Current Power state of specified unit ID
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_SetPowerState (
-    tmUnitSelect_t      dcsNetworkUnitId,  //  I: Unit number of DCS network
-    tmPowerState_t      powerState         //  I: Power state to be set
-    );
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetPowerState:
-//
-// DESCRIPTION: Gets Current Power state of specified unit ID
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetPowerState (
-    tmUnitSelect_t       dcsNetworkUnitId,   //  I: Unit number of DCS network
-    ptmPowerState_t      pPowerState         //  O: Power state of the given DCS network
-    );
-    
-    
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SetTargetAccessControl:
-//
-// DESCRIPTION: Sets up the access control for the given target.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_SetTargetAccessControl (
-    tmUnitSelect_t                  dcsNetworkUnitId,    //  I: Unit number of DCS network
-    tmhwDcsNetwork_TargetUnit_t     target,              //  I: Target for which the access control
-                                                         //     is being set.                                                 
-    tmhwDcsNetwork_InitiatorUnit_t  allowedInitiators[], //  I: Initiators that needs access to                                                
-                                                         //      to the given target
-    UInt32                          noOfInitiators       //  I: Number of initiators that have access
-                                                         //      to the given target                                                         
-    );
-    
-    
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetTargetAccessControl:
-//
-// DESCRIPTION: Returns the list of initiators that have access to the given target.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetTargetAccessControl (
-    tmUnitSelect_t                  dcsNetworkUnitId,    //  I: Unit number of DCS network
-    tmhwDcsNetwork_TargetUnit_t     target,              //  I: Target for which the access control
-                                                         //     is being set.
-    tmhwDcsNetwork_InitiatorUnit_t  allowedInitiators[], //  O: Initiators that needs access to                                                
-                                                         //      to the given target
-    pUInt32                         pNoOfInitiators      //  O: Number of initiators that have access to the
-                                                         //      given target                                                        
-    );
-    
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SetTargetAccessTimeout:
-//
-// DESCRIPTION: Sets the target access timeout for any target access in DCS network
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_SetTargetAccessTimeout (
-    tmUnitSelect_t                        dcsNetworkUnitId,   //  I: Unit number of DCS network
-    tmhwDcsNetwork_TargetAccessTimeout_t  accessTimeout       //  I: Target access timeout to be set
-    );
-    
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetTargetAccessTimeout:
-//
-// DESCRIPTION: Gets the current target access timeout
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetTargetAccessTimeout (
-    tmUnitSelect_t                        dcsNetworkUnitId,   //  I: Unit number of DCS network
-    ptmhwDcsNetwork_TargetAccessTimeout_t pAccessTimeout      //  O: Target access timeout to be set
-    );
-
-
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_IntGetStatus:
-//
-// DESCRIPTION: Returns interrupt status.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_IntGetStatus (
-    tmUnitSelect_t                dcsNetworkUnitId,  //  I: Unit number of DCS network
-    pUInt32                       pIntStatus         //  O: Interrupt status of the given DCS
-                                                     //     network controller
-    );
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_IntEnable:
-//
-// DESCRIPTION: Enables the interrupts specified
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_IntEnable (
-    tmUnitSelect_t                 dcsNetworkUnitId,    //  I: Unit number of DCS network
-    UInt32                         intsToEnable         //  I: List of interrupts to enable
-    );
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_IntDisable:
-//
-// DESCRIPTION: Disables the interrupts specified
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_IntDisable (
-    tmUnitSelect_t                 dcsNetworkUnitId,     //  I: Unit number of DCS network
-    UInt32                         intsToDisable         //  I: List of interrupts to disable
-    );
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_IntClear:
-//
-// DESCRIPTION: Clear the interrupt pending bits specified by the mask.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_IntClear (
-    tmUnitSelect_t                 dcsNetworkUnitId,  //  I: Unit number of DCS network
-    UInt32                         intsToClear        //  I: List of interrupts to clear
-    );
-
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_GetInterruptInfo:
-//
-// DESCRIPTION: Returns complete information on the interrupt cause than 
-//               tmhwDcsNetwork_IntGetStatus 
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetInterruptInfo (
-    tmUnitSelect_t                 dcsNetworkUnitId,  //  I: Unit number of DCS network
-    ptmhwDcsNetwork_IntCauseInfo_t pIntCauseInfo      //  O: Detailed information on the cause
-                                                      //     of the interrupt.  Buffer for the
-                                                      //     structure has to be allocated by
-                                                      //     the caller.
-    );
-
-#if (defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST1) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST1) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST2) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST2) || defined(TMHW_DCSNETWORK_MDCS_A06E_LIST2) || defined(TMHW_DCSNETWORK_TDCS_A06E_LIST2))   
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_GetFeaturesInfo:
-//
-// DESCRIPTION: Returns complete information of Feature register 
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       This register is present only in pnx8535
-//
-//-----------------------------------------------------------------------------
-//
-
-tmErrorCode_t
-tmhwDcsNetwork_GetFeaturesInfo (
-    tmUnitSelect_t                 dcsNetworkUnitId,  //  I: Unit number of DCS network
-    ptmhwDcsNetwork_FeaturesInfo_t pFeatureInfo      //  O: Feature Register information
-    );
-
-#endif
-#ifdef __cplusplus
-}
-#endif
-
-#endif // TMHWDCSNETWORK_H
-
-
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/src/tmhwDcsNetwork.c linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/src/tmhwDcsNetwork.c
--- linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/src/tmhwDcsNetwork.c	2011-11-08 19:21:27.928397000 +0530
+++ linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/src/tmhwDcsNetwork.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,3921 +0,0 @@
-/* 
- * This program is free software; you can redistribute it and/or modify 
- * it under the terms of the GNU General Public License as published by 
- * the Free Software Foundation; either version 2 of the License, or 
- * (at your option) any later version. 
- * 
- * This program is distributed in the hope that it will be useful, 
- * but WITHOUT ANY WARRANTY; without even the implied warranty of 
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
- * GNU General Public License for more details. 
- * 
- * You should have received a copy of the GNU General Public License 
- * along with this program; if not, write to the Free Software 
- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 
- * 
- * Copyright (C) 2007 NXP B.V. 
- * All Rights Reserved. 
- * 
- * *---------------------------------------------------------------------------
- * %filename:     tmhwDcsNetwork.c %
- * %pid_version:              PB5#18 %
- *---------------------------------------------------------------------------
- * DESCRIPTION:  This file implements the tmhwDcsNetwork interface for pnx8550
- *
- * DOCUMENT REF: DVP Software Coding Guidelines specification
- *               DVP Hardware API Interface Specification
- *               DVP Software Versioning Specification
- *               Viper2 RevB specification.
- */
- 
-
-
-
-//-----------------------------------------------------------------------------
-// Standard include files:
-//-----------------------------------------------------------------------------
-//
-
-#ifdef BSL_DEPENDENT
-#include <tmbslCore.h>
-#endif
-#include <tmhwDcsNetwork_CfgLocal.h>
-#include <tmhwDcsNetwork.h>
-
-//-----------------------------------------------------------------------------
-// Project include files:
-//-----------------------------------------------------------------------------
-//
-#include "tmvhDcsNetworkSecurityModule_reg.h"    // DCS network security registers
-#include "tmvhDcsNetworkConfigModule_reg.h"      // DCS network configuration registers
-//-----------------------------------------------------------------------------
-// Types and defines:
-//-----------------------------------------------------------------------------
-//
-#define TMBSL_MGR_COMPATIBILITY_EXP     (1)   // BSL Mgr Compatibility expected
-#define TMBSL_MGR_MAJOR_VERSION_EXP     (1)   // BSL Mgr Major Version expected
-
-
-
-
-
-
-
-//-----------------------------------------------------------------------------
-// Global data:
-//-----------------------------------------------------------------------------
-//
-
-// It is assumed that there will be only one DCS network config/security module 
-//  in a system with the given module Id.
-#ifdef TMHW_DCSNETWORK_MDCS_A058_LIST
-static initiatorInfo mdcsInitiatorInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorIdDcsNetworkBridge,
-        tmUnit0,
-        0x1
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdMips,
-        tmUnit0,
-        0x2
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdPci,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdBoot,
-        tmUnit0,
-        0x8
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdEjtag,
-        tmUnit0,
-        0x10
-    }
-    
-};
-
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2) 
-static targetInfo mdcsTargetInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetIdDcsNetworkConfigMod,
-        tmUnit0,
-        0x0
-    },
-    {
-        tmhwDcsNetwork_TargetIdDcsNetworkSecurityMod,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_TargetIdDcs2DcsBridge,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetIdGic,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetIdGic,
-        tmUnit1,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetIdPciXio,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetIdJtagDma,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetIdSmartCard,
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetIdSmartCard,
-        tmUnit1,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetIdI2c,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetIdI2c,
-        tmUnit1,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetIdClocks,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetIdUsb,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetIdUart,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetIdUart,
-        tmUnit1,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetIdI2c,
-        tmUnit3,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetIdGlobalRegs,
-        tmUnit1,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetIdD2d,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetIdReset,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetIdTmDbg,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetIdTmDbg,
-        tmUnit1,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetIdGlobalRegs,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetIdPmanArbiter,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetIdDdrController,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetIdPmanSecurity,
-        tmUnit0,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetIdPmanMonitor,
-        tmUnit0,
-        0x25C
-    },
-    {
-        tmhwDcsNetwork_TargetIdI2c,
-        tmUnit2,
-        0x260
-    },
-    {
-        tmhwDcsNetwork_TargetIdEjtag,
-        tmUnit0,
-        0x264
-    },
-    {
-        tmhwDcsNetwork_TargetIdDmaGate,
-        tmUnit0,
-        0x268
-    },
-    {
-        tmhwDcsNetwork_TargetIdPci,
-        tmUnit0,
-        0x26C
-    },
-    {
-        tmhwDcsNetwork_TargetIdPci,
-        tmUnit1,
-        0x270
-    },
-    {
-        tmhwDcsNetwork_TargetIdXio,
-        tmUnit0,
-        0x274
-    }
-};
-#endif
-#endif
-
-#ifdef TMHW_DCSNETWORK_TDCS_A059_LIST
-
-static initiatorInfo tdcsInitiatorInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorIdDcsNetworkBridge,
-        tmUnit0,
-        0x1
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdTriMedia,
-        tmUnit0,
-        0x2
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdTriMedia,
-        tmUnit1,
-        0x4
-    }
-};
-
-static targetInfo tdcsTargetInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetIdDcsNetworkConfigMod,
-        tmUnit0,
-        0x0
-    },
-    {
-        tmhwDcsNetwork_TargetIdDcsNetworkSecurityMod,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_TargetIdDcs2DcsBridge,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetIdGic,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetIdGpio,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetIdVmpg,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetIdVip,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetIdVip,
-        tmUnit1,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetIdVld,
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetIdSpdo,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetIdSpdi,
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetIdDvdd,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetIdMbs,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetIdQtnr,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetIdQvcp,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetIdQvcp,
-        tmUnit1,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetIdAo,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetIdAi,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetIdAo,
-        tmUnit1,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetIdAi,
-        tmUnit1,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetIdEdma,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetIdTsdma,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetIdDenc,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetIdMsp,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetIdMsp,
-        tmUnit1,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetIdTm3260,
-        tmUnit0,
-        0x25C
-    },
-    {
-        tmhwDcsNetwork_TargetIdTm3260,
-        tmUnit1,
-        0x260
-    },
-    {
-        tmhwDcsNetwork_TargetIdGic,
-        tmUnit1,
-        0x264
-    },
-    {
-        tmhwDcsNetwork_TargetIdGic,
-        tmUnit2,
-        0x268
-    },
-    {
-        tmhwDcsNetwork_TargetIdGic,
-        tmUnit3,
-        0x26C
-    },
-    {
-        tmhwDcsNetwork_TargetIdVpk,
-        tmUnit0,
-        0x270
-    },
-    {
-        tmhwDcsNetwork_TargetIdMbs,
-        tmUnit1,
-        0x274
-    },
-    {
-        tmhwDcsNetwork_TargetIdSpdi,
-        tmUnit1,
-        0x278
-    },
-    {
-        tmhwDcsNetwork_TargetIdTunnelMmio,
-        tmUnit0,
-        0x27C
-    },
-    {
-        tmhwDcsNetwork_TargetIdTunnel,
-        tmUnit0,
-        0x280
-    }    
-};
-
-#endif
-
-#ifdef TMHW_DCSNETWORK_MDCS_A0A0_LIST
-
-static initiatorInfo mdcsInitiatorInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorId0,
-        tmUnit0,
-        0x1
-    },
-    {
-        tmhwDcsNetwork_InitiatorId1,
-        tmUnit0,
-        0x2
-    },
-    {
-        tmhwDcsNetwork_InitiatorId2,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_InitiatorId3,
-        tmUnit0,
-        0x8
-    },
-    {
-        tmhwDcsNetwork_InitiatorId4,
-        tmUnit0,
-        0x10
-    },
-    {
-        tmhwDcsNetwork_InitiatorId5,
-        tmUnit0,
-        0x20
-    }
-
-};
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)
-static targetInfo mdcsTargetInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetId0,
-        tmUnit0,
-        0x0
-    },
-    {
-        tmhwDcsNetwork_TargetId1,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_TargetId2,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetId3,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetId4,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetId5,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetId6,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetId7,
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetId8,
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetId9,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetId10,
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetId11,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetId12,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetId13,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetId14,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetId15,
-        tmUnit0,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetId16,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetId17,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetId18,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetId19,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetId20,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetId21,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetId22,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetId23,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetId24,
-        tmUnit0,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetId25,
-        tmUnit0,
-        0x25C
-    },
-    {
-        tmhwDcsNetwork_TargetId26,
-        tmUnit0,
-        0x260
-    },
-    {
-        tmhwDcsNetwork_TargetId27,
-        tmUnit0,
-        0x264
-    },
-    {
-        tmhwDcsNetwork_TargetId28,
-        tmUnit0,
-        0x268
-    },
-    {
-        tmhwDcsNetwork_TargetId29,
-        tmUnit0,
-        0x26C
-    }   
-};
-#endif
-#endif
-
-#ifdef TMHW_DCSNETWORK_TDCS_A0A2_LIST
-static initiatorInfo tdcsInitiatorInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorId0,
-        tmUnit0,
-        0x1
-    },
-    {
-        tmhwDcsNetwork_InitiatorId1,
-        tmUnit0,
-        0x2
-    },
-    {
-        tmhwDcsNetwork_InitiatorId2,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_InitiatorId3,
-        tmUnit0,
-        0x8
-    },
-    {
-        tmhwDcsNetwork_InitiatorId4,
-        tmUnit0,
-        0x10
-    },
-    {
-        tmhwDcsNetwork_InitiatorId5,
-        tmUnit0,
-        0x20
-    }
-
-};
-
-static targetInfo tdcsTargetInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetId0,
-        tmUnit0,
-        0x0
-    },
-    {
-        tmhwDcsNetwork_TargetId1,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_TargetId2,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetId3,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetId4,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetId5,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetId6,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetId7,
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetId8,
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetId9,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetId10,
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetId11,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetId12,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetId13,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetId14,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetId15,
-        tmUnit0,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetId16,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetId17,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetId18,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetId19,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetId20,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetId21,
-        tmUnit0,
-        0x24C
-    }    
-};
-
-#endif	
-
-#ifdef TMHW_DCSNETWORK_TDCS_A0A2_LIST1
-static initiatorInfo tdcsInitiatorInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorIdMips, //MIPS
-        tmUnit0,
-        0x1
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdPci, //PCI
-        tmUnit0,
-        0x2
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdReset, //Reset
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdEjtag, //EJTAG
-        tmUnit0,
-        0x8
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdIICSlave, //I2C_SLAVE
-        tmUnit0,
-        0x10
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdTriMedia, //AVDSP
-        tmUnit0,
-        0x20
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdMSVDCPU, //MSVD
-        tmUnit0,
-        0x40
-    }
-};
-
-static targetInfo tdcsTargetInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetId0,
-        tmUnit0,
-        0x0
-    },
-    {
-        tmhwDcsNetwork_TargetId1,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_TargetId2,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetId3,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetId4,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetId5,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetId6,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetId7,
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetId8,
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetId9,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetId10,
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetId11,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetId12,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetId13,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetId14,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetId15,
-        tmUnit0,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetId16,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetId17,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetId18,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetId19,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetId20,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetId21,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetId22,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetId23,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetId24,
-        tmUnit0,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetId25,
-        tmUnit0,
-        0x25C
-    }        
-};
-
-#endif	
-
-
-
-#ifdef TMHW_DCSNETWORK_MDCS_A0A0_LIST1
-
-static initiatorInfo mdcsInitiatorInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS ] = {
-   {
-        tmhwDcsNetwork_InitiatorIdMips, //MIPS
-        tmUnit0,
-        0x1
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdPci, //PCI
-        tmUnit0,
-        0x2
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdReset, //Reset
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdEjtag, //EJTAG
-        tmUnit0,
-        0x8
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdIICSlave, //I2C_SLAVE
-        tmUnit0,
-        0x10
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdTriMedia, //AVDSP
-        tmUnit0,
-        0x20
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdMSVDCPU, //MSVD
-        tmUnit0,
-        0x40
-    }
-};
-
-static targetInfo mdcsTargetInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetId0,
-        tmUnit0,
-        0x0
-    },
-    {
-        tmhwDcsNetwork_TargetId1,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_TargetId2,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetId3,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetId4,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetId5,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetId6,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetId7, //IIC3
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetId8, //IIC3
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetId9,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetId10,
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetId11,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetId12,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetId13,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetId14,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetId15,
-        tmUnit0,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetId16,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetId17,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetId18,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetId19,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetId20,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetId21,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetId22,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetId23,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetId24,
-        tmUnit0,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetId25,
-        tmUnit0,
-        0x25C
-    },
-    {
-        tmhwDcsNetwork_TargetId26,
-        tmUnit0,
-        0x260
-    },
-    {
-        tmhwDcsNetwork_TargetId27,
-        tmUnit0,
-        0x264
-    },
-    {
-        tmhwDcsNetwork_TargetId28,
-        tmUnit0,
-        0x268
-    },
-    {
-        tmhwDcsNetwork_TargetId29,
-        tmUnit0,
-        0x26C
-    },
-    {
-        tmhwDcsNetwork_TargetId30,
-        tmUnit0,
-        0x270
-    }
-};
-
-#endif
-
-#ifdef TMHW_DCSNETWORK_TDCS_A0A2_LIST2
-static initiatorInfo tdcsInitiatorInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorIdMips, //MIPS
-        tmUnit0,
-        0x1
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdPci, //PCI
-        tmUnit0,
-        0x2
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdReset, //Reset
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdEjtag, //EJTAG
-        tmUnit0,
-        0x8
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdIICSlave, //I2C_SLAVE
-        tmUnit0,
-        0x10
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdTriMedia, //AVDSP
-        tmUnit0,
-        0x20
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdMSVDCPU, //MSVD
-        tmUnit0,
-        0x40
-    }
-};
-
-static targetInfo tdcsTargetInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetId0,
-        tmUnit0,
-        0x00
-    },
-    {
-        tmhwDcsNetwork_TargetId1,
-        tmUnit0,
-        0x04
-    },
-    {
-        tmhwDcsNetwork_TargetId2,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetId3,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetId4,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetId5,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetId6,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetId7,
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetId8,
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetId9,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetId10,
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetId11,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetId12,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetId13,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetId14,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetId15,
-        tmUnit0,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetId16,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetId17,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetId18,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetId19,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetId20,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetId21,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetId22,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetId23,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetId24,
-        tmUnit0,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetId25,
-        tmUnit0,
-        0x25C
-    },
-   {
-        tmhwDcsNetwork_TargetId26,
-        tmUnit0,
-        0x260
-    },
-    {
-        tmhwDcsNetwork_TargetId27,
-        tmUnit0,
-        0x264
-    }            
-};
-
-#endif	
-
-
-
-#ifdef TMHW_DCSNETWORK_MDCS_A0A0_LIST2
-
-static initiatorInfo mdcsInitiatorInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorIdMips, //MIPS
-        tmUnit0,
-        0x1
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdPci, //PCI
-        tmUnit0,
-        0x2
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdReset, //Reset
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdEjtag, //EJTAG
-        tmUnit0,
-        0x8
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdIICSlave, //I2C_SLAVE
-        tmUnit0,
-        0x10
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdTriMedia, //AVDSP
-        tmUnit0,
-        0x20
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdMSVDCPU, //MSVD
-        tmUnit0,
-        0x40
-    }
-};
-
-static targetInfo mdcsTargetInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetId0,
-        tmUnit0,
-        0x0
-    },
-    {
-        tmhwDcsNetwork_TargetId1,
-        tmUnit0,
-        0x4
-    },
-    {
-        tmhwDcsNetwork_TargetId2,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetId3,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetId4,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetId5,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetId6,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetId7, 
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetId8, 
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetId9,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetId10,
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetId11,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetId12,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetId13,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetId14,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetId15,
-        tmUnit0,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetId16,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetId17,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetId18,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetId19,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetId20,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetId21,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetId22,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetId23,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetId24,
-        tmUnit0,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetId25,
-        tmUnit0,
-        0x25C
-    },
-    {
-        tmhwDcsNetwork_TargetId26,
-        tmUnit0,
-        0x260
-    },
-    {
-        tmhwDcsNetwork_TargetId27,
-        tmUnit0,
-        0x264
-    },
-    {
-        tmhwDcsNetwork_TargetId28,
-        tmUnit0,
-        0x268
-    },
-    {
-        tmhwDcsNetwork_TargetId29,
-        tmUnit0,
-        0x26C
-    },
-    {
-        tmhwDcsNetwork_TargetId30,
-        tmUnit0,
-        0x270
-    },
-    {
-        tmhwDcsNetwork_TargetId31,
-        tmUnit0,
-        0x274
-    },
-    {
-        tmhwDcsNetwork_TargetId32,
-        tmUnit0,
-        0x278
-    },
-    {
-        tmhwDcsNetwork_TargetId33,
-        tmUnit0,
-        0x27C
-    },
-    {
-        tmhwDcsNetwork_TargetId34,
-        tmUnit0,
-        0x280
-    },
-    {
-        tmhwDcsNetwork_TargetId35,
-        tmUnit0,
-        0x284
-    },
-    {
-        tmhwDcsNetwork_TargetId36,
-        tmUnit0,
-        0x288
-    },
-    {
-        tmhwDcsNetwork_TargetId37,
-        tmUnit0,
-        0x28C
-    },
-    {
-        tmhwDcsNetwork_TargetId38,
-        tmUnit0,
-        0x290
-    },
-    {
-        tmhwDcsNetwork_TargetId39,
-        tmUnit0,
-        0x294
-    },
-    {
-        tmhwDcsNetwork_TargetId40,
-        tmUnit0,
-        0x298
-    },    
-    {
-        tmhwDcsNetwork_TargetId41,
-        tmUnit0,
-        0x29C
-    }
-};
-
-#endif
-
-#ifdef TMHW_DCSNETWORK_TDCS_A06E_LIST2
-static initiatorInfo tdcsInitiatorInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorIdAvdsp, //TM32CONFIG1
-        tmUnit0,
-        0x40
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdNmdsp1, //TM3282
-        tmUnit0,
-        0x80
-    },
- 	{
-        tmhwDcsNetwork_InitiatorIdNmdsp2, //TM3282
-        tmUnit1,
-        0x100
-    }
-};
-
-static targetInfo tdcsTargetInfo[ TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetId0,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetId1,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetId2,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetId3,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetId4,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetId5,
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetId6,
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetId7,
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetId8,
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetId9,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetId10,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetId11,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetId12,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetId13,
-        tmUnit0,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetId14,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetId15,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetId16,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetId17,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetId18,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetId19,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetId20,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetId21,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetId22,
-        tmUnit0,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetId23,
-        tmUnit0,
-        0x25C
-    },
-    {
-        tmhwDcsNetwork_TargetId24,
-        tmUnit0,
-        0x260
-    },
-    {
-        tmhwDcsNetwork_TargetId25,
-        tmUnit0,
-        0x264
-    },
-   {
-        tmhwDcsNetwork_TargetId26,
-        tmUnit0,
-        0x268
-    },
-    {
-        tmhwDcsNetwork_TargetId27,
-        tmUnit0,
-        0x26C
-    },
-    {
-        tmhwDcsNetwork_TargetId28,
-        tmUnit0,
-        0x270
-    },
-    {
-        tmhwDcsNetwork_TargetId29,
-        tmUnit0,
-        0x274
-    }            
-};
-
-#endif	
-
-
-
-#ifdef TMHW_DCSNETWORK_MDCS_A06E_LIST2
-
-static initiatorInfo mdcsInitiatorInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS ] = {
-    {
-        tmhwDcsNetwork_InitiatorIdMips,
-        tmUnit0,
-        0x1
-    },
-    {
-    	tmhwDcsNetwork_InitiatorIdPci,
-    	tmUnit0,
-        0x2
-    },
-    {
-       	tmhwDcsNetwork_InitiatorIdBoot,
-        tmUnit0,
-        0x4
-    },
-    {
-       	tmhwDcsNetwork_InitiatorIdEjtag,
-        tmUnit0,
-        0x8
-    },
-    {
-        tmhwDcsNetwork_InitiatorIdI2c1Debug,
-        tmUnit0,
-        0x10
-    },
-};
-
-static targetInfo mdcsTargetInfo[ TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS ] = {
-    {
-        tmhwDcsNetwork_TargetId0,
-        tmUnit0,
-        0x200
-    },
-    {
-        tmhwDcsNetwork_TargetId1,
-        tmUnit0,
-        0x204
-    },
-    {
-        tmhwDcsNetwork_TargetId2,
-        tmUnit0,
-        0x208
-    },
-    {
-        tmhwDcsNetwork_TargetId3,
-        tmUnit0,
-        0x20C
-    },
-    {
-        tmhwDcsNetwork_TargetId4,
-        tmUnit0,
-        0x210
-    },
-    {
-        tmhwDcsNetwork_TargetId5,
-        tmUnit0,
-        0x214
-    },
-    {
-        tmhwDcsNetwork_TargetId6,
-        tmUnit0,
-        0x218
-    },
-    {
-        tmhwDcsNetwork_TargetId7, //IIC3
-        tmUnit0,
-        0x21C
-    },
-    {
-        tmhwDcsNetwork_TargetId8, //IIC3
-        tmUnit0,
-        0x220
-    },
-    {
-        tmhwDcsNetwork_TargetId9,
-        tmUnit0,
-        0x224
-    },
-    {
-        tmhwDcsNetwork_TargetId10,
-        tmUnit0,
-        0x228
-    },
-    {
-        tmhwDcsNetwork_TargetId11,
-        tmUnit0,
-        0x22C
-    },
-    {
-        tmhwDcsNetwork_TargetId12,
-        tmUnit0,
-        0x230
-    },
-    {
-        tmhwDcsNetwork_TargetId13,
-        tmUnit0,
-        0x234
-    },
-    {
-        tmhwDcsNetwork_TargetId14,
-        tmUnit0,
-        0x238
-    },
-    {
-        tmhwDcsNetwork_TargetId15,
-        tmUnit0,
-        0x23C
-    },
-    {
-        tmhwDcsNetwork_TargetId16,
-        tmUnit0,
-        0x240
-    },
-    {
-        tmhwDcsNetwork_TargetId17,
-        tmUnit0,
-        0x244
-    },
-    {
-        tmhwDcsNetwork_TargetId18,
-        tmUnit0,
-        0x248
-    },
-    {
-        tmhwDcsNetwork_TargetId19,
-        tmUnit0,
-        0x24C
-    },
-    {
-        tmhwDcsNetwork_TargetId20,
-        tmUnit0,
-        0x250
-    },
-    {
-        tmhwDcsNetwork_TargetId21,
-        tmUnit0,
-        0x254
-    },
-    {
-        tmhwDcsNetwork_TargetId22,
-        tmUnit0,
-        0x258
-    },
-    {
-        tmhwDcsNetwork_TargetId23,
-        tmUnit0,
-        0x25C
-    },
-    {
-        tmhwDcsNetwork_TargetId24,
-        tmUnit0,
-        0x260
-    },
-    {
-        tmhwDcsNetwork_TargetId25,
-        tmUnit0,
-        0x264
-    },
-    {
-        tmhwDcsNetwork_TargetId26,
-        tmUnit0,
-        0x268
-    },
-    {
-        tmhwDcsNetwork_TargetId27,
-        tmUnit0,
-        0x26C
-    },
-    {
-        tmhwDcsNetwork_TargetId28,
-        tmUnit0,
-        0x270
-    },
-    {
-        tmhwDcsNetwork_TargetId29,
-        tmUnit0,
-        0x274
-    },
-    {
-        tmhwDcsNetwork_TargetId30,
-        tmUnit0,
-        0x278
-    },
-    {
-        tmhwDcsNetwork_TargetId31,
-        tmUnit0,
-        0x27C
-    },
-    {
-        tmhwDcsNetwork_TargetId32,
-        tmUnit0,
-        0x280
-    },
-    {
-        tmhwDcsNetwork_TargetId33,
-        tmUnit0,
-        0x284
-    },
-    {
-        tmhwDcsNetwork_TargetId34,
-        tmUnit0,
-        0x288
-    },
-    {
-        tmhwDcsNetwork_TargetId35,
-        tmUnit0,
-        0x28C
-    },
-    {
-        tmhwDcsNetwork_TargetId36,
-        tmUnit0,
-        0x290
-    },
-    {
-        tmhwDcsNetwork_TargetId37,
-        tmUnit0,
-        0x294
-    },    
-    {
-        tmhwDcsNetwork_TargetId38,
-        tmUnit0,
-        0x298
-    },
-    {
-        tmhwDcsNetwork_TargetId39,
-        tmUnit0,
-        0x29C
-    },
-    {
-        tmhwDcsNetwork_TargetId40,
-        tmUnit0,
-        0x2A0
-    },
-    {
-        tmhwDcsNetwork_TargetId41,
-        tmUnit0,
-        0x2A4
-    },
-    {
-        tmhwDcsNetwork_TargetId42,
-        tmUnit0,
-        0x2A8
-    },
-    {
-        tmhwDcsNetwork_TargetId43,
-        tmUnit0,
-        0x2AC
-    },
-    {
-        tmhwDcsNetwork_TargetId44,
-        tmUnit0,
-        0x2B0
-    },
-    {
-        tmhwDcsNetwork_TargetId45,
-        tmUnit0,
-        0x2B4
-    },
-    {
-        tmhwDcsNetwork_TargetId46,
-        tmUnit0,
-        0x2B8
-    },
-    {
-        tmhwDcsNetwork_TargetId47,
-        tmUnit0,
-        0x2BC
-    },
-    {
-        tmhwDcsNetwork_TargetId48,
-        tmUnit0,
-        0x2C0
-    },
-    {
-        tmhwDcsNetwork_TargetId49,
-        tmUnit0,
-        0x2C4
-    },
-    {
-        tmhwDcsNetwork_TargetId50,
-        tmUnit0,
-        0x2C8
-    },
-    {
-        tmhwDcsNetwork_TargetId51,
-        tmUnit0,
-        0x2CC
-    }
-};
-
-#endif
-
-static const  UInt32 gModIdsOfDcsNwSecurityModules[]    = { 
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	
-	TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID, 
-#endif	
-	TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID };
-
-
-
-static UInt32 gDcsNwConfigRegs  [ TMHW_DCSNETWORK_MAX_UNIT_COUNT ] = 
-                                         { 
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)						 
-					 0, 
-#endif					 
-					 0 };
-                                         
-static UInt32 gDcsNwSecurityRegs [ TMHW_DCSNETWORK_MAX_UNIT_COUNT ] =
-                                         { 
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)						 
-					 0, 
-#endif					 
-					 0 };
-
-
-static UInt32                        gDcsNetworkUnitCount;
-static Bool                          gIsInitialised = False;
-
-//-----------------------------------------------------------------------------
-// Internal Prototypes:
-//-----------------------------------------------------------------------------
-//
-static tmErrorCode_t
-DcsNetworkCapabilitiesInit (
-    void
-    );
-    
-static UInt32
-DcsNetWorkUnitNumberToIndex(
-    tmUnitSelect_t unitNo
-    );
-    
-/* In PNX85500, the TDCS & MDCS have same module IDs. Hence it is not possible to identify
-   by using module IDs. These will be identified by unit IDs
-*/     
-#if (TMFL_PNX_ID==85500)    
-
-static tmErrorCode_t
-DcsNetworkConvertTarget2TargetIdAndUnit(
-    UInt32                     target,
-    ptmhwDcsNetwork_TargetId_t pTargetId,
-    ptmUnitSelect_t            pUnitNo,
-    tmUnitSelect_t             dcsNetworkUnitId
-);        
-
-
-static tmErrorCode_t
-DcsNetworkConvertInitiator2InitiatorIdAndUnit(
-    UInt32                        initiatorMask,
-    ptmhwDcsNetwork_InitiatorId_t pInitiatorId,
-    ptmUnitSelect_t               pUnitNo,
-	tmUnitSelect_t                 dcsNetworkUnitId
-);        
-
-static tmErrorCode_t
-DcsNetworkConvertTargetIdAndUnit2Target(
-    tmhwDcsNetwork_TargetId_t targetId,
-    tmUnitSelect_t            unitNo,
-	tmUnitSelect_t            dcsNetworkUnitId,
-    pUInt32                   pTarget,
-    pUInt32                   pMmioOffset
-);        
-
-
-static tmErrorCode_t
-DcsNetworkConvertInitiatorIdAndUnit2Initiator(
-    tmhwDcsNetwork_InitiatorId_t initiatorId,
-    tmUnitSelect_t               unitNo,
-	tmUnitSelect_t               dcsNetworkUnitId,
-    pUInt32                      pInitiatorMask
-);
-
-#else
-
-static tmErrorCode_t
-DcsNetworkConvertTarget2TargetIdAndUnit(
-    UInt32                     target,
-    ptmhwDcsNetwork_TargetId_t pTargetId,
-    ptmUnitSelect_t            pUnitNo,
-    UInt32                     moduleId
-);        
-
-
-static tmErrorCode_t
-DcsNetworkConvertInitiator2InitiatorIdAndUnit(
-    UInt32                        initiatorMask,
-    ptmhwDcsNetwork_InitiatorId_t pInitiatorId,
-    ptmUnitSelect_t               pUnitNo,
-    UInt32                        moduleId
-);        
-
-static tmErrorCode_t
-DcsNetworkConvertTargetIdAndUnit2Target(
-    tmhwDcsNetwork_TargetId_t targetId,
-    tmUnitSelect_t            unitNo,
-    UInt32                    moduleId,
-    pUInt32                   pTarget,
-    pUInt32                   pMmioOffset
-);        
-
-
-static tmErrorCode_t
-DcsNetworkConvertInitiatorIdAndUnit2Initiator(
-    tmhwDcsNetwork_InitiatorId_t initiatorId,
-    tmUnitSelect_t               unitNo,
-    UInt32                       moduleId,
-    pUInt32                      pInitiatorMask
-);        
-
-#endif        
-
-//-----------------------------------------------------------------------------
-// Exported functions:
-//-----------------------------------------------------------------------------
-//
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetCapabilities:
-//
-// DESCRIPTION: Get the capabilities of the given DCS network unit.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetCapabilities (
-    tmUnitSelect_t                 dcsNetworkUnitId, //  I: Unit number of DCS network
-    ptmhwDcsNetwork_Capabilities_t pDevCaps          //  O: Pointer to structure to receive
-                                                     //     capabilities structure.
-    )
-{
-    tmErrorCode_t   status = TM_OK;
-
-    if( 0 == gDcsNetworkUnitCount )         
-    {
-        status = DcsNetworkCapabilitiesInit ();
-    }
-
-    if( status == TM_OK )
-    {
-        if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-        {
-        
-#if (TMFL_PNX_ID==85500) // 85500 Module IDs are same
-        	
-        	switch(dcsNetworkUnitId)
-            {
-                case tmUnit0: 
-                		pDevCaps->noOfInitiators = TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS - TMHW_DCSNETWORK_NUMBER_OF_INVALID_INITIATORS;
-                        pDevCaps->noOfTargets = TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS;
-                        pDevCaps->dcsNetworkUnitCount = gDcsNetworkUnitCount;
-                        break;
-
-                case tmUnit1: 
-                		pDevCaps->noOfInitiators = TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS - TMHW_DCSNETWORK_NUMBER_OF_INVALID_INITIATORS;
-                        pDevCaps->noOfTargets = TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS;
-                        pDevCaps->dcsNetworkUnitCount = gDcsNetworkUnitCount;
-                        break;
-                            
-                default : 
-                		status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-                        break;
-            }
-        
-#else        
-            UInt32 index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-
-	    switch( gModIdsOfDcsNwSecurityModules[ index ] )
-            {
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)			    
-                case TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID : 
-                										pDevCaps->noOfInitiators = TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS - TMHW_DCSNETWORK_NUMBER_OF_INVALID_INITIATORS;
-                                                        pDevCaps->noOfTargets = TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS;
-                                                        pDevCaps->dcsNetworkUnitCount = gDcsNetworkUnitCount;
-                                                        break;
-#endif                
-                case TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID : 
-                									pDevCaps->noOfInitiators = TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS - TMHW_DCSNETWORK_NUMBER_OF_INVALID_INITIATORS;
-                             		                pDevCaps->noOfTargets = TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS;
-                                                        pDevCaps->dcsNetworkUnitCount = gDcsNetworkUnitCount;
-                                                        break;
-                            
-                default : status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-                          break;
-            }
-#endif            
-          
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-        }
-    }
-
-    return( status );
-
-} 
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_Init:
-//
-// DESCRIPTION: - Initialise the DCS network configuration and security feature 
-//                related structures/hardware.
-//              - Obtain the MMIO base address for the given DCS network 
-//              - The device is set to tmPowerOn.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_Init (
-    tmUnitSelect_t  dcsNetworkUnitId           //  I: Unit number of DCS network
-    )
-{    
-    UInt32 index = 0;
-    tmErrorCode_t status = TM_OK;
-    if( False == gIsInitialised )
-    {
-        if( 0 == gDcsNetworkUnitCount )
-        {
-            status = DcsNetworkCapabilitiesInit ();
-        }
-    
-        if( status == TM_OK )
-        {
-            if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-            {
-                index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-		    // Disable interrupts
-       		    TMVH_GEN_WRITE((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_INT_CLR_ENABLE_OFFSET), 0x3);	
-        
-	               // Clear interrupts
-		    TMVH_GEN_WRITE((gDcsNwSecurityRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_INT_CLR_OFFSET), 0x3);	
-        
-	            // Disable timeout
-		    TMVH_GEN_WRITE((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), 0x1);	    
-		    
-              }
-            else
-            {
-                status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-            }
-        }
-            
-        gIsInitialised = True;
-    }
-    return( status );
-
-} // tmhwDcsNetwork_Init()
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_Deinit:
-//
-// DESCRIPTION: Deinitialize the DCS network configuration and security related 
-//              structures.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_Deinit (
-    tmUnitSelect_t    dcsNetworkUnitId          //  I: Unit number of DCS network
-    )
-{
-    tmErrorCode_t status = TM_OK;
-    UInt32        index = 0;
-    if( True == gIsInitialised )
-    {
-        if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-        {
-            index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-        
-            // Disable interrupts
-       	    TMVH_GEN_WRITE((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_INT_CLR_ENABLE_OFFSET), 0x3);	
-        
-            // Clear interrupts
-	    TMVH_GEN_WRITE((gDcsNwSecurityRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_INT_CLR_OFFSET), 0x3);	
-        
-            // Disable timeout
-	    TMVH_GEN_WRITE((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), 0x1);	            
-
-	   
-            gDcsNwConfigRegs[ index ] = 0;
-            gDcsNwSecurityRegs[ index ] = 0;
-            
-            gIsInitialised = False;
-	    gDcsNetworkUnitCount = 0;
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-        }
-    }
-    
-    return( status );    
-}
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetSWVersion:
-//
-// DESCRIPTION: Returns SW version of the implementation of this interface
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetSWVersion (
-    ptmSWVersion_t      pVersion    //  O: ptr to structure to obtain version
-    )
-{
-    tmErrorCode_t   status = TM_OK;
-    
-    if( 0 == gDcsNetworkUnitCount )
-    {
-        status = DcsNetworkCapabilitiesInit ();
-    }
-    
-    if( TM_OK == status )
-    {
-        if( Null == pVersion )
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-        }
-        else
-        {
-            pVersion->compatibilityNr = TMHW_DCSNETWORK_COMPATIBILITY_NR;
-            pVersion->majorVersionNr  = TMHW_DCSNETWORK_MAJOR_VERSION_NR;
-            pVersion->minorVersionNr  = TMHW_DCSNETWORK_MINOR_VERSION_NR;
-        }
-        
-    }
-    
-    return( status );
-}
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SetPowerState:
-//
-// DESCRIPTION: Sets Current Power state of specified unit ID
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_SetPowerState (
-    tmUnitSelect_t      dcsNetworkUnitId,  //  I: Unit number of DCS network
-    tmPowerState_t      powerState         //  I: Power state to be set
-    )
-{
-#if (TMFL_PNX_ID==85500)
-	UInt32          index= 0;
-	UInt32          ctrl = 0x0; 
-	tmErrorCode_t   status = TM_OK;
-	
-	if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-    {
-		index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-	
-		TMVH_GEN_READ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), ctrl);
-		ctrl &= ~(TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_PWR_MGMNT_MSK);
-		ctrl |= (UInt32)(( (powerState  & TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_PWR_MGMNT_MSK) << TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_PWR_MGMNT_POS));
-		TMVH_GEN_WRITE((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), ctrl);
-   	}
-	else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-    } 
-	return status;
-#else
-    (void) dcsNetworkUnitId;
-    (void) powerState;
-    
-    return( TMHW_ERR_DCSNETWORK_NOT_SUPPORTED );
-#endif    
-}
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetPowerState:
-//
-// DESCRIPTION: Gets Current Power state of specified unit ID
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetPowerState (
-    tmUnitSelect_t       dcsNetworkUnitId,   //  I: Unit number of DCS network
-    ptmPowerState_t      pPowerState         //  O: Power state of the given DCS network
-    )
-{
-	
-#if (TMFL_PNX_ID==85500)
-	UInt32          index= 0;
-	UInt32          ctrl = 0x0; 
-	tmErrorCode_t   status = TM_OK;
-	
-	if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-    {
-		index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-		
-		TMVH_GEN_READ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), ctrl);
-		*pPowerState = (tmPowerState_t) (ctrl & TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_PWR_MGMNT_MSK) >> TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_PWR_MGMNT_POS;
-	}
-	else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-    } 
-	return status;
-#else
-    (void) dcsNetworkUnitId;
-    (void) pPowerState;
-
-    return( TMHW_ERR_DCSNETWORK_NOT_SUPPORTED );
-#endif    
-}
-
-                        
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SetTargetAccessControl:
-//
-// DESCRIPTION: Sets up the access control for the given target.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_SetTargetAccessControl (
-    tmUnitSelect_t                  dcsNetworkUnitId,    //  I: Unit number of DCS network
-    tmhwDcsNetwork_TargetUnit_t     target,              //  I: Target for which the access control
-                                                         //     is being set.                                                 
-    tmhwDcsNetwork_InitiatorUnit_t  allowedInitiators[], //  I: Initiators that needs access to                                                
-                                                         //      to the given target
-    UInt32                          noOfInitiators       //  I: Number of initiators that have access
-                                                         //      to the given target                                                         
-    )
-{
-    tmErrorCode_t   status = TM_OK;
-    UInt32          index= 0;
-    UInt32          tmpTargetNo = 0;
-    UInt32          tmpMmioOffset = 0x0;
-    UInt32          tmpInitiatorMask= 0x0;
-    UInt32          allowedInitiatorsMask = 0x0;
-    
-    
-    if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-    {
-        index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-
-#if (TMFL_PNX_ID==85500) // 85500 Module IDs are same
-
-	 	status = DcsNetworkConvertTargetIdAndUnit2Target( target.targetId,
-                                                          target.unitNo,
-                                                          dcsNetworkUnitId,
-                                                          &tmpTargetNo,
-                                                          &tmpMmioOffset
-                                                        );
-
-
-#else
-
-        status = DcsNetworkConvertTargetIdAndUnit2Target( target.targetId,
-                                                          target.unitNo,
-                                                          gModIdsOfDcsNwSecurityModules[ index ],
-                                                          &tmpTargetNo,
-                                                          &tmpMmioOffset
-                                                        );                                                       
-#endif                                                       
-        if( TM_OK == status )
-        {
-            UInt32 loopIndex;
-            
-            for( loopIndex = 0; loopIndex < noOfInitiators; loopIndex++ )
-            {
-            
-#if (TMFL_PNX_ID==85500) // 85500 Module IDs are same            
-
-		        status = DcsNetworkConvertInitiatorIdAndUnit2Initiator( allowedInitiators[ loopIndex ].initiatorId,
-                                                                        allowedInitiators[ loopIndex ].unitNo,
-                                                                        dcsNetworkUnitId,
-                                                                        &tmpInitiatorMask
-                                                                      );
-
-#else
-
-                status = DcsNetworkConvertInitiatorIdAndUnit2Initiator( allowedInitiators[ loopIndex ].initiatorId,
-                                                                        allowedInitiators[ loopIndex ].unitNo,
-                                                                        gModIdsOfDcsNwSecurityModules[ index ],
-                                                                        &tmpInitiatorMask
-                                                                      );
-#endif                                                                      
-                                                                      
-                if( TM_OK == status )
-                {
-                    allowedInitiatorsMask = allowedInitiatorsMask | tmpInitiatorMask;
-                }
-                else
-                {
-                    break;
-                }
-            }
-        }
-        
-        if( TM_OK == status )
-        {
-            // Write the initiator mask for that target
-	    TMVH_GEN_WRITE((gDcsNwSecurityRegs[ index ] + TMVH_DCSNETWORKSECUIRITY_TARGET_ACCESS_CNTRL_OFFSET + tmpMmioOffset), allowedInitiatorsMask);	   
-
-        }
-            
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-    }  
-    return( status );
-}
-
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetTargetAccessControl:
-//
-// DESCRIPTION: Returns the list of initiators that have access to the given target.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetTargetAccessControl (
-    tmUnitSelect_t                  dcsNetworkUnitId,    //  I: Unit number of DCS network
-    tmhwDcsNetwork_TargetUnit_t     target,              //  I: Target for which the access control
-                                                         //     is being set.
-    tmhwDcsNetwork_InitiatorUnit_t  allowedInitiators[], //  O: Initiators that needs access to                                                
-                                                         //      to the given target
-    pUInt32                         pNoOfInitiators      //  O: Number of initiators that have access to the
-                                                         //      given target                                                        
-    )
-{
-    tmErrorCode_t   status = TM_OK;
-    UInt32          index = 0x0;
-    UInt32          tmpTargetNo = 0;
-    UInt32          tmpMmioOffset = 0x0;
-    UInt32          actualAllowedInitiators = 0x0;
-    UInt32          tmpNoOfInitiators = 0x0;
-    
-    
-    if( pNoOfInitiators  == Null )
-    {
-	status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-    }
-   else
-   {	   
-		
-        *pNoOfInitiators = 0x0;
-	
-        if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-        {
-            index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-
-#if (TMFL_PNX_ID==85500) // 85500 Module IDs are same
-
-	        status = DcsNetworkConvertTargetIdAndUnit2Target( target.targetId,
-                                                              target.unitNo,
-                                                              dcsNetworkUnitId,
-                                                              &tmpTargetNo,
-                                                              &tmpMmioOffset
-                                                            );
-
-#else
-
-            status = DcsNetworkConvertTargetIdAndUnit2Target( target.targetId,
-                                                              target.unitNo,
-                                                              gModIdsOfDcsNwSecurityModules[ index ],
-                                                              &tmpTargetNo,
-                                                              &tmpMmioOffset
-                                                            );
-#endif
-                                                            
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-        }
-                                                   
-    if( TM_OK == status )
-    {        
-    
-      	TMVH_GEN_READ ((gDcsNwSecurityRegs[ index ] + TMVH_DCSNETWORKSECUIRITY_TARGET_ACCESS_CNTRL_OFFSET + tmpMmioOffset  ), actualAllowedInitiators);	            
-      	
-#if (TMFL_PNX_ID==85500) // 85500 Module IDs are same
-
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)		
-        if( dcsNetworkUnitId == tmUnit0)
-        {
-            tmpNoOfInitiators = TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS;
-        }
-        else 
-#endif		
-		if( dcsNetworkUnitId == tmUnit1 )
-        {
-            tmpNoOfInitiators = TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS;
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-        }
-
-#else
-      		            
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)		
-        if( TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID == gModIdsOfDcsNwSecurityModules[ index ] )
-        {
-            tmpNoOfInitiators = TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS;
-        }
-        else 
-#endif		
-	if( TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID == gModIdsOfDcsNwSecurityModules[ index ] )
-        {
-            tmpNoOfInitiators = TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS;
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-        }
-#endif        
-
-    }
-    
-    if( TM_OK == status )
-    {
-        UInt32 loopIndex;
-        UInt32 tmpInitiatorMask = 0x1;
-        tmhwDcsNetwork_InitiatorId_t  tmpInitiatorId;
-        tmUnitSelect_t                tmpUnitNo;
-     
-        for( loopIndex = 0; loopIndex < tmpNoOfInitiators; loopIndex++ )
-        {
-            if( (actualAllowedInitiators & tmpInitiatorMask ) != 0)
-            {
-            
-#if (TMFL_PNX_ID==85500) // 85500 Module IDs are same            
-			    status = DcsNetworkConvertInitiator2InitiatorIdAndUnit( tmpInitiatorMask,
-            		                                                    &tmpInitiatorId,
-                                                                        &tmpUnitNo,
-                                                                        dcsNetworkUnitId
-                                                                      );
-
-#else
-
-                status = DcsNetworkConvertInitiator2InitiatorIdAndUnit( tmpInitiatorMask,
-                                                                        &tmpInitiatorId,
-                                                                        &tmpUnitNo,
-                                                                        gModIdsOfDcsNwSecurityModules[ index ]
-                                                                      );
-#endif
-                                                                                      
-                if( TM_OK == status )
-                {
-/*                    if( tmpInitiatorId == tmhwDcsNetwork_InitiatorIdInvalid )
-                    {
-                        tmpInitiatorMask = tmpInitiatorMask << 1;
-                        
-                        continue;
-                    }
-                    
-                    allowedInitiators[*pNoOfInitiators].initiatorId = tmpInitiatorId;
-                    allowedInitiators[(*pNoOfInitiators)++].unitNo  = tmpUnitNo;
-*/		  		
-	            if( tmpInitiatorId != tmhwDcsNetwork_InitiatorIdInvalid )
-		    {	      
-		       allowedInitiators[*pNoOfInitiators].initiatorId = tmpInitiatorId;
-                       allowedInitiators[(*pNoOfInitiators)++].unitNo  = tmpUnitNo;      
-		    }
-  		
-                }
-                else
-                {
-                    break;
-                }
-          }
-            
-            tmpInitiatorMask = tmpInitiatorMask << 1;
-        }
-    }
- }
-    return( status );           
-}
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_SetTargetAccessTimeout:
-//
-// DESCRIPTION: Sets the target access timeout for any target access in DCS network
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_SetTargetAccessTimeout (
-    tmUnitSelect_t                        dcsNetworkUnitId,   //  I: Unit number of DCS network
-    tmhwDcsNetwork_TargetAccessTimeout_t  accessTimeout       //  I: Target access timeout to be set
-    )
-{
-    tmErrorCode_t        status = TM_OK;
-    UInt32               index = 0;
-    //union _dcsconfigCtrl ctrl;
-    UInt32      ctrl = 0x0;       
-
-    if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-    {
-        index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-        
-        if( tmhwDcsNetwork_TargetAccessTimeout_Disabled == accessTimeout )
-        {
-       	    TMVH_GEN_READ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), ctrl);
-	    ctrl |= (0x1 << TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_OFF_POS);
-	    TMVH_GEN_WRITE((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), ctrl);
-	    
-        }
-        else
-        {
-	    TMVH_GEN_READ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), ctrl);
-            ctrl &= ~(TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_SEL_MSK);
-	    ctrl |= (UInt32)(accessTimeout << TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_SEL_POS);
-	    ctrl &= ~(0x1UL << TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_OFF_POS);
-	    TMVH_GEN_WRITE((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), ctrl);
-	    
-        }
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-    }
-    
-    return( status );
-}
-    
-
-//-----------------------------------------------------------------------------
-// FUNCTION:    tmhwDcsNetwork_GetTargetAccessTimeout:
-//
-// DESCRIPTION: Gets the current target access timeout
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetTargetAccessTimeout (
-    tmUnitSelect_t                        dcsNetworkUnitId,   //  I: Unit number of DCS network
-    ptmhwDcsNetwork_TargetAccessTimeout_t pAccessTimeout      //  O: Target access timeout to be set
-    )
-{
-    tmErrorCode_t        status = TM_OK;
-    UInt32               index = 0;
-    //union _dcsconfigCtrl ctrl;       
-    UInt32      ctrl = 0x0;
-
-    if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-    {
-        index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-
-       TMVH_GEN_READ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET), ctrl);
-       
-       if( 0x1 == (( ctrl & TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_OFF_MSK) >> TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_OFF_POS))
-        {
-            *pAccessTimeout = tmhwDcsNetwork_TargetAccessTimeout_Disabled;
-        }
-        else
-        {
-           *pAccessTimeout = (tmhwDcsNetwork_TargetAccessTimeout_t) ((ctrl & TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_SEL_MSK) >> TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_SEL_POS);
-        }
-
-       
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-    }
-  
-    return( status );
-}
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_IntGetStatus:
-//
-// DESCRIPTION: Returns interrupt status.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_IntGetStatus (
-    tmUnitSelect_t                dcsNetworkUnitId,  //  I: Unit number of DCS network
-    pUInt32                       pIntStatus         //  O: Interrupt status of the given DCS
-                                                     //     network controller
-    )
-{
-    tmErrorCode_t             status = TM_OK;
-    UInt32                    index = 0;
-    UInt32                    interruptStatus = 0x0;
-    
-    if( Null == pIntStatus )
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-    }
-    else
-    {	    
-        if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-        {
-            index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-            
-  
-            TMVH_GEN_READ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_INT_STATUS_OFFSET), interruptStatus);	
-	    *pIntStatus = (interruptStatus & (TMVH_DCSNETWORKCONFIG_BC_INT_TOUT_MSK | TMVH_DCSNETWORKCONFIG_BC_INT_ERROR_MSK));    
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-        }
-    }
-    
-    
-    return( status );
-
-}    
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_IntEnable:
-//
-// DESCRIPTION: Enables the interrupts specified
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_IntEnable (
-    tmUnitSelect_t                 dcsNetworkUnitId,    //  I: Unit number of DCS network
-    UInt32                         intsToEnable         //  I: List of interrupts to enable
-    )
-{
-    tmErrorCode_t                    status = TM_OK;
-    UInt32                           index = 0;
-    
-    if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-    {
-        index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-        TMVH_GEN_WRITE ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_INT_SET_ENABLE_OFFSET), (intsToEnable & (TMVH_DCSNETWORKCONFIG_BC_INT_TOUT_MSK | TMVH_DCSNETWORKCONFIG_BC_INT_ERROR_MSK)));		
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-    }
-    
-    return( status );
-
-}    
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_IntDisable:
-//
-// DESCRIPTION: Disables the interrupts specified
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_IntDisable (
-    tmUnitSelect_t                 dcsNetworkUnitId,     //  I: Unit number of DCS network
-    UInt32                         intsToDisable         //  I: List of interrupts to disable
-    )
-{
-    tmErrorCode_t                      status = TM_OK;
-    UInt32                             index = 0;
-    
-    if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-    {
-        index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-       TMVH_GEN_WRITE ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_INT_CLR_ENABLE_OFFSET), (intsToDisable & (TMVH_DCSNETWORKCONFIG_BC_INT_TOUT_MSK | TMVH_DCSNETWORKCONFIG_BC_INT_ERROR_MSK)));		
-       
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-    }
-    
-    return( status );
-}
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_IntClear:
-//
-// DESCRIPTION: Clear the interrupt pending bits specified by the mask.
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_IntClear (
-    tmUnitSelect_t                 dcsNetworkUnitId,  //  I: Unit number of DCS network
-    UInt32                         intsToClear        //  I: List of interrupts to clear
-    )
-{
-    tmErrorCode_t                      status = TM_OK;
-    UInt32                             index = 0;
-
-    if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-    {
-        index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-      TMVH_GEN_WRITE ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_INT_CLR_OFFSET), (intsToClear & (TMVH_DCSNETWORKCONFIG_BC_INT_TOUT_MSK | TMVH_DCSNETWORKCONFIG_BC_INT_ERROR_MSK)));	
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;
-    }
-    
-    return( status );
-}
-
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_GetInterruptInfo:
-//
-// DESCRIPTION: Returns complete information on the interrupt cause than 
-//               tmhwDcsNetwork_IntGetStatus 
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       None
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetInterruptInfo (
-    tmUnitSelect_t                 dcsNetworkUnitId,  //  I: Unit number of DCS network
-    ptmhwDcsNetwork_IntCauseInfo_t pIntCauseInfo      //  O: Detailed information on the cause
-                                                      //     of the interrupt.  Buffer for the
-                                                      //     structure has to be allocated by
-                                                      //     the caller.
-    )
-{
-    tmErrorCode_t                      status = TM_OK;
-    UInt32                             index = 0;
-    UInt32                             errToutAddress= 0x0;
-    UInt32                              intCauseRegister = 0x0;
-    
-    if( Null == pIntCauseInfo )
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-    }
-    else
-    {
-        if( dcsNetworkUnitId < (tmUnitSelect_t) gDcsNetworkUnitCount )
-        {
-            tmhwDcsNetwork_TargetId_t     tmpTargetId = (tmhwDcsNetwork_TargetId_t) 0x0;
-            tmUnitSelect_t                tmpUnitNo;
-            UInt32                        initiatorID;
-            UInt32                        targetID;
-	    
-            tmhwDcsNetwork_InitiatorId_t  tmpInitiatorId = (tmhwDcsNetwork_InitiatorId_t)0x0;
-            
-            index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-
-	     TMVH_GEN_READ ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_ADDR_OFFSET), errToutAddress);
-	     TMVH_GEN_READ ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_STAT_OFFSET), intCauseRegister);
-	     pIntCauseInfo->address           = (errToutAddress &  TMVH_DCSNETWORKCONFIG_BC_ADDR_ERR_TOUT_ADDR_MSK );
-	    pIntCauseInfo->errorOrTimeout    = (intCauseRegister & TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_ACK_MSK) >> TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_ACK_POS;
-            pIntCauseInfo->byteMask          = (intCauseRegister & TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_MASK_MSK) >> TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_MASK_POS;
-            pIntCauseInfo->isRead            = (intCauseRegister & TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_READ_MSK) >> TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_READ_POS;
-
-            targetID = (intCauseRegister & TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_SEL_MSK) >> TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_SEL_POS;
-            
-#if (TMFL_PNX_ID==85500) // 85500 Module IDs are same
-			status = DcsNetworkConvertTarget2TargetIdAndUnit( targetID,
-                                                              &tmpTargetId,
-                                                              &tmpUnitNo,
-                                                              dcsNetworkUnitId
-                                                            );
-			
-#else            
-            status = DcsNetworkConvertTarget2TargetIdAndUnit( targetID,
-                                                              &tmpTargetId,
-                                                              &tmpUnitNo,
-                                                              gModIdsOfDcsNwSecurityModules[ index ]
-                                                            );
-#endif                                                            
-  
-            if( TM_OK != status )
-            {
-                tmpTargetId = (tmhwDcsNetwork_TargetId_t) targetID;
-                tmpUnitNo   = 0;
-            }
-           
-                pIntCauseInfo->target.targetId       = tmpTargetId;
-                pIntCauseInfo->target.unitNo         = tmpUnitNo;
-                initiatorID = (intCauseRegister & TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_GNT_MSK) >> TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_GNT_POS;
-	   if( TM_OK == status )
-            {  	
-            	
-#if (TMFL_PNX_ID==85500) // 85500 Module IDs are same
-					status = DcsNetworkConvertInitiator2InitiatorIdAndUnit( (0x1UL << initiatorID),
-                                                                        &tmpInitiatorId,
-                                                                        &tmpUnitNo,
-                                                                        dcsNetworkUnitId
-                                                                      );
-
-#else
-            	  	
-                status = DcsNetworkConvertInitiator2InitiatorIdAndUnit( (0x1UL << initiatorID),
-                                                                        &tmpInitiatorId,
-                                                                        &tmpUnitNo,
-                                                                        gModIdsOfDcsNwSecurityModules[ index ]
-                                                                      );
-#endif
-            }
-            
-           if( TM_OK != status )
-            {
-                tmpInitiatorId = (tmhwDcsNetwork_InitiatorId_t) initiatorID;
-                tmpUnitNo      = 0;
-            }
-           
-                pIntCauseInfo->initiator.initiatorId = tmpInitiatorId;
-                pIntCauseInfo->initiator.unitNo      = tmpUnitNo;
-            }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_UNIT_NUM;        
-        }
-    }         
-        
-    return( status );
-}    
-                      
-//-----------------------------------------------------------------------------
-// Internal Prototypes:
-//-----------------------------------------------------------------------------
-//
-static tmErrorCode_t
-DcsNetworkCapabilitiesInit (
-    void
-    )
-{
-    tmErrorCode_t                       status = TM_OK;         // DVP function return status
-#ifdef BSL_DEPENDENT    
-    tmSWVersion_t                       bslSwVersion;   // DVP software version info struct
-#endif    
-    UInt32                              index = 0;
-    static UInt32                       ptmhwDcsNetworkConfigRegs= 0x0;
-    static UInt32                       ptmhwDcsNetworkSecurityRegs = 0x0;
-    UInt32                              blockId = 0x0;
-  //  ptmhwDcsNetwork_Cfg_t               pCfg = Null;
-    ptmhwDcsNetwork_Cfg_t               pDcsNetworkConfig_Cfg = Null;
-    ptmhwDcsNetwork_Cfg_t               pDcsNetworkSecurity_Cfg = Null;
-    
-    const  UInt32 modIdsOfDcsNwConfigModules[]      = { 
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)		    
-	    TMHW_DCSNETWORK_MCONFIG_HWMODULE_ID, 
-#endif	    
-         TMHW_DCSNETWORK_TCONFIG_HWMODULE_ID };
-    const  UInt32 majorVerOfDcsNwConfigModules[]    = { 
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)		    
-	    TMHW_DCSNETWORK_MCONFIG_MAJOR_VERSION, 
-#endif	    
-	    TMHW_DCSNETWORK_TCONFIG_MAJOR_VERSION };
-    const  UInt32 majorVerOfDcsNwSecurityModules[]  = { 
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)		    
-	    TMHW_DCSNETWORK_MSECURITY_MAJOR_VERSION,
-#endif	    
-	    TMHW_DCSNETWORK_TSECURITY_MAJOR_VERSION };
-#ifdef BSL_DEPENDENT        
-    status = tmbslMgrGetSWVersion (&bslSwVersion);
-    if( TM_OK == status )
-    {
-        if (bslSwVersion.compatibilityNr != TMBSL_MGR_COMPATIBILITY_EXP)
-        {
-            status = TMHW_ERR_DCSNETWORK_COMPATIBILITY;
-        }
-        else if (bslSwVersion.majorVersionNr < TMBSL_MGR_MAJOR_VERSION_EXP)
-        {
-            status = TMHW_ERR_DCSNETWORK_MAJOR_VERSION;
-        }
-	else
-	{
-		; /*MISRA 14.10*/
-	}
-    }
-#endif    
-    // It is assumed that there will be only one DCS network config/security module 
-    //  in a system with the given module Id.
-    
-    // Also it is assumed that there each DCS network config module will have 
-    //  DCS network security module corresponding to it.
-    //  
-    
-    pDcsNetworkConfig_Cfg = tmhwDcsNetwork_ConfigCfgGet();
-    pDcsNetworkSecurity_Cfg = tmhwDcsNetwork_SecurityCfgGet();
-    
-    if( TM_OK == status )
-    {
-        for( index = 0; index < sizeof(modIdsOfDcsNwConfigModules) / sizeof(UInt32);
-             index++ )
-        {
-	    
-            gDcsNwConfigRegs[ index ]   = 0;   
-            gDcsNwSecurityRegs[ index ] = 0;
-
-	    //pCfg = &pDcsNetworkConfig_Cfg[index];
-            ptmhwDcsNetworkConfigRegs = pDcsNetworkConfig_Cfg[index].baseAddress;
-
-            //pCfg = &pDcsNetworkSecurity_Cfg[index];
-            ptmhwDcsNetworkSecurityRegs = pDcsNetworkSecurity_Cfg[index].baseAddress;
-      	    /*if( TM_OK == status )
-            {*/
-                        
-             TMVH_GEN_READ((ptmhwDcsNetworkConfigRegs + TMVH_DCSNETWORKCONFIG_BC_MODULE_ID_OFFSET),  blockId);
-
-		if( ((blockId & TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MID_MSK) >> TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MID_POS) != modIdsOfDcsNwConfigModules[ index ] )
-                {
-                    status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-                }
-                else if( ((blockId & TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MAJOR_RID_MSK) >> TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MAJOR_RID_POS)  != majorVerOfDcsNwConfigModules[ index ] )
-                {
-                    status = TMHW_ERR_DCSNETWORK_COMPATIBILITY;
-                }                
-		else
-		{
-			;/*MISRA 14.10*/
-		}
-                                        
-                if( TM_OK == status )
-                { 
-                                
-		    TMVH_GEN_READ((ptmhwDcsNetworkSecurityRegs + TMVH_DCSNETWORKSECUIRITY_BCSEC_MODULE_ID_OFFSET),  blockId);
-		    
-                    if( ((blockId & TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MID_MSK) >> TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MID_POS)  != gModIdsOfDcsNwSecurityModules[ index ] ) 
-                    {
-                        status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-                        
-                    }
-                    else if( ((blockId & TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MAJOR_RID_MSK) >> TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MAJOR_RID_POS) != majorVerOfDcsNwSecurityModules[ index ] )
-                    {
-                        status = TMHW_ERR_DCSNETWORK_COMPATIBILITY;
-                    }
-		    else
-		    {
-			;/*MISRA 14.10*/
-		    }
-                
-               /* }
-                else
-                     break;                                                   
-		     */
-                    
-
-                if( TM_OK == status )
-                {
-                    gDcsNwConfigRegs[ index ] = ptmhwDcsNetworkConfigRegs;   
-                    gDcsNwSecurityRegs[ index ] = ptmhwDcsNetworkSecurityRegs;
-                    
-                    gDcsNetworkUnitCount++;
-                }
-                else
-		{
-                     break;                                                   
-		}
-        /*    }
-            else
-            {
-                status = TM_OK;
-                continue;
-            }*/
-	}
-       }
-    }    
-    
-    return( status );
-}    
-
-
-static UInt32
-DcsNetWorkUnitNumberToIndex(
-    tmUnitSelect_t unitNo
-    )
-{
-    UInt32 index = 0;
-    UInt32 noOfUnitsPresent = 0;
-    
-    for( index = 0; index < TMHW_DCSNETWORK_MAX_UNIT_COUNT; index++ )
-    {
-        if( gDcsNwConfigRegs[ index ] != 0 )
-        {
-	   
-            if( (noOfUnitsPresent) == (UInt32)unitNo )
-            {
-                break;
-            }
-  	    noOfUnitsPresent++;
-	    
-        }
-    } 
-    return ( noOfUnitsPresent );
-}
-
-
-/* In PNX85500, the TDCS & MDCS have same module IDs. Hence it is not possible to identify
-   by using module IDs. These will be identified by unit IDs
-*/     
-#if (TMFL_PNX_ID==85500)    
-
-static tmErrorCode_t
-DcsNetworkConvertTarget2TargetIdAndUnit(
-    UInt32                     target,
-    ptmhwDcsNetwork_TargetId_t pTargetId,
-    ptmUnitSelect_t            pUnitNo,
-    tmUnitSelect_t             dcsNetworkUnitId
-)
-{
-    tmErrorCode_t     status = TM_OK;
-    
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	    
-    if( dcsNetworkUnitId == 0 )
-    {
-        if( target < TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS )
-        {         
-            *pTargetId = mdcsTargetInfo[ target ].targetId;
-            *pUnitNo   = mdcsTargetInfo[ target ].unitNo;
-        }
-        else if (target == DCSNETWORK_NULLORERROR_TARGET) 
-        {
-            status = TMHW_ERR_DCSNETWORK_NULLORERROR_TARGET;
-        }
-        else if (target == DCSNETWORK_CONTROLLER_CONFIG_ERROR) 
-        {
-            status = TMHW_ERR_DCSNETWORK_CONTROLLER_CONFIG_ERROR;
-        }
-        else if (target == DCSNETWORK_CONTROLLER_SECURITY_APERTURE) 
-        {
-            status = TMHW_ERR_DCSNETWORK_CONTROLLER_SECURITY_APERTURE;
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_TARGET;
-        }
-        
-    }
-    else 
-#endif
-    if( dcsNetworkUnitId == 1 )
-    {
-        if( target < TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS )
-        {         
-            *pTargetId = tdcsTargetInfo[ target ].targetId;
-            *pUnitNo   = tdcsTargetInfo[ target ].unitNo;
-        }
-         else if (target == DCSNETWORK_NULLORERROR_TARGET) 
-        {
-            status = TMHW_ERR_DCSNETWORK_NULLORERROR_TARGET;
-        }
-        else if (target == DCSNETWORK_CONTROLLER_CONFIG_ERROR) 
-        {
-            status = TMHW_ERR_DCSNETWORK_CONTROLLER_CONFIG_ERROR;
-        }
-        else if (target == DCSNETWORK_CONTROLLER_SECURITY_APERTURE) 
-        {
-            status = TMHW_ERR_DCSNETWORK_CONTROLLER_SECURITY_APERTURE;
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_TARGET;
-        }
-    }  
- 	else
-   	{
-		;/*MISRA 14.10*/
-   	}
-                 
-
-    return( status );
-}
-
-static tmErrorCode_t
-DcsNetworkConvertInitiator2InitiatorIdAndUnit(
-    UInt32                        initiatorMask,
-    ptmhwDcsNetwork_InitiatorId_t pInitiatorId,
-    ptmUnitSelect_t               pUnitNo,
-    tmUnitSelect_t             	  dcsNetworkUnitId
-)
-{
-    tmErrorCode_t   status = TM_OK;
-    initiatorInfo * pTmpInitiatorInfo = Null;
-    UInt32          initiatorsCount = 0x0;
-    UInt32          loopIndex =0x0;
-     
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	   
-    if( dcsNetworkUnitId == 0 )
-    {
-        pTmpInitiatorInfo = mdcsInitiatorInfo;
-        initiatorsCount    = TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS;
-    }
-    else 
-#endif	    
-   	if( dcsNetworkUnitId == 1 )
-    {
-        pTmpInitiatorInfo = tdcsInitiatorInfo;
-        initiatorsCount    = TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS;
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-    }
-    
-    if (pTmpInitiatorInfo != Null)
-    {		 
-      	if( TM_OK == status )
-      	{      
-           for( loopIndex = 0; loopIndex < initiatorsCount; loopIndex++ )
-           {
-              if( pTmpInitiatorInfo[ loopIndex ].initiatorMask == initiatorMask )
-                { 
-                  break;
-                }
-           }
-        
-           if( loopIndex == initiatorsCount )
-           {
-              status = TMHW_ERR_DCSNETWORK_BAD_INITIATOR;
-           }
-       	}
-     	if( TM_OK == status )
-     	{
-        	*pInitiatorId = pTmpInitiatorInfo[ loopIndex ].initiatorId;
-        	*pUnitNo      = pTmpInitiatorInfo[ loopIndex ].unitNo;
-     	}
-   }
-   else
-   {
-    status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;	   
-   }
-   
-   return( status );    
-}
-    
-static tmErrorCode_t
-DcsNetworkConvertTargetIdAndUnit2Target(
-    tmhwDcsNetwork_TargetId_t targetId,
-    tmUnitSelect_t            unitNo,
-    tmUnitSelect_t            dcsNetworkUnitId,
-    pUInt32                   pTarget,
-    pUInt32                   pMmioOffset
-)
-{
-    tmErrorCode_t   status = TM_OK;
-    targetInfo    *pTmpTargetInfo = Null;
-    UInt32          tmpNoOfTargets = 0x0;
-    UInt32          loopIndex = 0x0;
-   
-
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	    
-    if( dcsNetworkUnitId == 0 )
-    {
-        pTmpTargetInfo = mdcsTargetInfo;
-        tmpNoOfTargets = TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS;
-    }
-    else 
-#endif	    
-    if( dcsNetworkUnitId == 1 )
-    {
-        pTmpTargetInfo = tdcsTargetInfo;
-        tmpNoOfTargets = TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS;
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-    }
-    
-    if (pTmpTargetInfo != Null)
-    {
-       if( TM_OK == status )
-       {
-          for( loopIndex = 0; loopIndex < tmpNoOfTargets; loopIndex++ )
-          {
-             if( ( pTmpTargetInfo[ loopIndex ].targetId == targetId ) &&
-                 ( pTmpTargetInfo[ loopIndex ].unitNo == unitNo )
-               )
-             {
-                *pTarget     = loopIndex;
-                *pMmioOffset = pTmpTargetInfo[ loopIndex ].offset;
-                
-                break;
-            }
-          }
-       if( loopIndex == tmpNoOfTargets )
-       {
-          status = TMHW_ERR_DCSNETWORK_BAD_TARGET;
-       }
-      }
-   }
-   else
-   {
-   
-   		status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-   }   
-	    
-    return( status );
-}     
-    
-
-static tmErrorCode_t
-DcsNetworkConvertInitiatorIdAndUnit2Initiator(
-    tmhwDcsNetwork_InitiatorId_t initiatorId,
-    tmUnitSelect_t               unitNo,
-    tmUnitSelect_t            	 dcsNetworkUnitId,
-    pUInt32                      pInitiatorMask
-)
-{
-    tmErrorCode_t   status = TM_OK;
-    initiatorInfo * pTmpInitiatorInfo = Null;
-    UInt32          initiatorsCount = 0x0;
-    UInt32          loopIndex = 0x0; 
-   
-
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	    
-    if( dcsNetworkUnitId == 0 )
-    {
-        pTmpInitiatorInfo = mdcsInitiatorInfo;
-        initiatorsCount    = TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS;
-    }
-    else 
-#endif	    
-    if( dcsNetworkUnitId == 1 )
-    {
-        pTmpInitiatorInfo = tdcsInitiatorInfo;
-        initiatorsCount    = TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS;
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-    }
-
-   if(pTmpInitiatorInfo != Null)
-   {
-      if( TM_OK == status )
-      {        
-        for( loopIndex = 0; loopIndex < initiatorsCount; loopIndex++ )
-        {
-            if( ( pTmpInitiatorInfo[ loopIndex ].initiatorId == initiatorId ) &&
-                ( pTmpInitiatorInfo[ loopIndex ].unitNo == unitNo )
-              )
-            {
-                *pInitiatorMask = pTmpInitiatorInfo[ loopIndex ].initiatorMask;
-
-                break;
-            }
-        }        
-     if( loopIndex == initiatorsCount )
-     {
-        status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-        
-     }
-    }
-   }
-   else
-   {
-        status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-   }   
-    return( status );
-}
-
-
-#else
-
-static tmErrorCode_t
-DcsNetworkConvertTarget2TargetIdAndUnit(
-    UInt32                     target,
-    ptmhwDcsNetwork_TargetId_t pTargetId,
-    ptmUnitSelect_t            pUnitNo,
-    UInt32                     moduleId
-)
-{
-    tmErrorCode_t     status = TM_OK;
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	    
-    if( TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID == moduleId )
-    {
-        if( target < TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS )
-        {         
-            *pTargetId = mdcsTargetInfo[ target ].targetId;
-            *pUnitNo   = mdcsTargetInfo[ target ].unitNo;
-        }
-        else if (target == DCSNETWORK_NULLORERROR_TARGET) 
-        {
-            status = TMHW_ERR_DCSNETWORK_NULLORERROR_TARGET;
-        }
-        else if (target == DCSNETWORK_CONTROLLER_CONFIG_ERROR) 
-        {
-            status = TMHW_ERR_DCSNETWORK_CONTROLLER_CONFIG_ERROR;
-        }
-        else if (target == DCSNETWORK_CONTROLLER_SECURITY_APERTURE) 
-        {
-            status = TMHW_ERR_DCSNETWORK_CONTROLLER_SECURITY_APERTURE;
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_TARGET;
-        }
-        
-    }
-    else 
-#endif
-    if( TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID == moduleId )
-    {
-        if( target < TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS )
-        {         
-            *pTargetId = tdcsTargetInfo[ target ].targetId;
-            *pUnitNo   = tdcsTargetInfo[ target ].unitNo;
-        }
-         else if (target == DCSNETWORK_NULLORERROR_TARGET) 
-        {
-            status = TMHW_ERR_DCSNETWORK_NULLORERROR_TARGET;
-        }
-        else if (target == DCSNETWORK_CONTROLLER_CONFIG_ERROR) 
-        {
-            status = TMHW_ERR_DCSNETWORK_CONTROLLER_CONFIG_ERROR;
-        }
-        else if (target == DCSNETWORK_CONTROLLER_SECURITY_APERTURE) 
-        {
-            status = TMHW_ERR_DCSNETWORK_CONTROLLER_SECURITY_APERTURE;
-        }
-        else
-        {
-            status = TMHW_ERR_DCSNETWORK_BAD_TARGET;
-        }
-    }  
-   else
-   {
-	;/*MISRA 14.10*/
-   }
-                 
-
-    return( status );
-}
-
-
-
-static tmErrorCode_t
-DcsNetworkConvertInitiator2InitiatorIdAndUnit(
-    UInt32                        initiatorMask,
-    ptmhwDcsNetwork_InitiatorId_t pInitiatorId,
-    ptmUnitSelect_t               pUnitNo,
-    UInt32                        moduleId
-)
-{
-    tmErrorCode_t   status = TM_OK;
-    initiatorInfo * pTmpInitiatorInfo = Null;
-    UInt32          initiatorsCount = 0x0;
-    UInt32          loopIndex =0x0; 
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	   
-    if( TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID == moduleId )
-    {
-        pTmpInitiatorInfo = mdcsInitiatorInfo;
-        initiatorsCount    = TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS;
-    }
-    else 
-#endif	    
-   if( TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID == moduleId )
-    {
-        pTmpInitiatorInfo = tdcsInitiatorInfo;
-        initiatorsCount    = TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS;
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-    }
-    
-    if (pTmpInitiatorInfo != Null)
-    {		 
-      if( TM_OK == status )
-        {      
-           for( loopIndex = 0; loopIndex < initiatorsCount; loopIndex++ )
-           {
-              if( pTmpInitiatorInfo[ loopIndex ].initiatorMask == initiatorMask )
-                { 
-                  break;
-                }
-            }
-        
-           if( loopIndex == initiatorsCount )
-           {
-              status = TMHW_ERR_DCSNETWORK_BAD_INITIATOR;
-           }
-        }
-     if( TM_OK == status )
-     {
-        *pInitiatorId = pTmpInitiatorInfo[ loopIndex ].initiatorId;
-        *pUnitNo      = pTmpInitiatorInfo[ loopIndex ].unitNo;
-     }
-   }
-   else
-   {
-    status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;	   
-   }
-    return( status );    
-}
-    
-static tmErrorCode_t
-DcsNetworkConvertTargetIdAndUnit2Target(
-    tmhwDcsNetwork_TargetId_t targetId,
-    tmUnitSelect_t            unitNo,
-    UInt32                    moduleId,
-    pUInt32                   pTarget,
-    pUInt32                   pMmioOffset
-)
-{
-    tmErrorCode_t   status = TM_OK;
-    targetInfo    *pTmpTargetInfo = Null;
-    UInt32          tmpNoOfTargets = 0x0;
-    UInt32          loopIndex = 0x0;
-   
-
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	    
-    if( TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID == moduleId )
-    {
-        pTmpTargetInfo = mdcsTargetInfo;
-        tmpNoOfTargets = TMHW_DCSNETWORK_MDCS_NO_OF_TARGETS;
-    }
-    else 
-#endif	    
-    if( TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID == moduleId )
-    {
-        pTmpTargetInfo = tdcsTargetInfo;
-        tmpNoOfTargets = TMHW_DCSNETWORK_TDCS_NO_OF_TARGETS;
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-    }
-    
-    if (pTmpTargetInfo != Null)
-    {
-       if( TM_OK == status )
-       {
-          for( loopIndex = 0; loopIndex < tmpNoOfTargets; loopIndex++ )
-          {
-             if( ( pTmpTargetInfo[ loopIndex ].targetId == targetId ) &&
-                 ( pTmpTargetInfo[ loopIndex ].unitNo == unitNo )
-               )
-             {
-                *pTarget     = loopIndex;
-                *pMmioOffset = pTmpTargetInfo[ loopIndex ].offset;
-                
-                break;
-            }
-          }
-       if( loopIndex == tmpNoOfTargets )
-       {
-          status = TMHW_ERR_DCSNETWORK_BAD_TARGET;
-       }
-      }
-   }
-   else
-   {
-   status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-   }   
-	    
-    return( status );
-}     
-    
-
-static tmErrorCode_t
-DcsNetworkConvertInitiatorIdAndUnit2Initiator(
-    tmhwDcsNetwork_InitiatorId_t initiatorId,
-    tmUnitSelect_t               unitNo,
-    UInt32                       moduleId,
-    pUInt32                      pInitiatorMask
-)
-{
-    tmErrorCode_t   status = TM_OK;
-    initiatorInfo * pTmpInitiatorInfo = Null;
-    UInt32          initiatorsCount = 0x0;
-    UInt32          loopIndex = 0x0; 
-   
-
-#if (TMHW_DCSNETWORK_MAX_UNIT_COUNT == 2)	    
-    if( TMHW_DCSNETWORK_MSECURITY_HWMODULE_ID == moduleId )
-    {
-        pTmpInitiatorInfo = mdcsInitiatorInfo;
-        initiatorsCount    = TMHW_DCSNETWORK_MDCS_NO_OF_INITIATORS;
-    }
-    else 
-#endif	    
-     if( TMHW_DCSNETWORK_TSECURITY_HWMODULE_ID == moduleId )
-    {
-        pTmpInitiatorInfo = tdcsInitiatorInfo;
-        initiatorsCount    = TMHW_DCSNETWORK_TDCS_NO_OF_INITIATORS;
-    }
-    else
-    {
-        status = TMHW_ERR_DCSNETWORK_BAD_MODULE_ID;
-    }
-
-   if(pTmpInitiatorInfo != Null)
-   {
-      if( TM_OK == status )
-      {        
-        for( loopIndex = 0; loopIndex < initiatorsCount; loopIndex++ )
-        {
-            if( ( pTmpInitiatorInfo[ loopIndex ].initiatorId == initiatorId ) &&
-                ( pTmpInitiatorInfo[ loopIndex ].unitNo == unitNo )
-              )
-            {
-                *pInitiatorMask = pTmpInitiatorInfo[ loopIndex ].initiatorMask;
-
-                break;
-            }
-        }        
-     if( loopIndex == initiatorsCount )
-     {
-        status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;
-     }
-    }
-   }
-   else
-   {
-        status = TMHW_ERR_DCSNETWORK_BAD_PARAMETER;	   
-   }   
-    return( status );
-}
-
-#endif
-        
-#if (defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST1) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST1) || defined (TMHW_DCSNETWORK_TDCS_A0A2_LIST2) || defined (TMHW_DCSNETWORK_MDCS_A0A0_LIST2) || defined(TMHW_DCSNETWORK_MDCS_A06E_LIST2) || defined(TMHW_DCSNETWORK_TDCS_A06E_LIST2))   
-
-//-----------------------------------------------------------------------------
-//
-// FUNCTION:    tmhwDcsNetwork_GetFeaturesInfo:
-//
-// DESCRIPTION: Returns complete information of Feature register 
-//
-// RETURN:      tmErrorCode_t: Status of operation (TM_OK = PASS)
-//
-// NOTES:       This register is present only in pnx8535
-//
-//-----------------------------------------------------------------------------
-//
-tmErrorCode_t
-tmhwDcsNetwork_GetFeaturesInfo (
-    tmUnitSelect_t                 dcsNetworkUnitId,  //  I: Unit number of DCS network
-    ptmhwDcsNetwork_FeaturesInfo_t pFeatureInfo      //  O: Detailed information on the cause
-                                                      //     of the interrupt.  Buffer for the
-                                                      //     structure has to be allocated by
-                                                      //     the caller.
-    )
-
-
-{
-        UInt32                             index = 0 ;
-        UInt32                             featureRegister = 0x0; 
-
-    if( Null == pFeatureInfo )
-    {
-        return (TMHW_ERR_DCSNETWORK_BAD_PARAMETER);
-    }
-    
-    index = DcsNetWorkUnitNumberToIndex( dcsNetworkUnitId );
-    TMVH_GEN_READ ((gDcsNwConfigRegs[ index ] + TMVH_DCSNETWORKCONFIG_BC_FEATURES_OFFSET), featureRegister);
-     
-    pFeatureInfo->uinqueID = ( featureRegister & TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_UID_MSK) >> TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_UID_POS;
-
-    pFeatureInfo->security = ( featureRegister & TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_SECURITY_MSK) >> TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_SECURITY_POS;
-
-    pFeatureInfo->numBaseRegs = ( featureRegister & TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_BASE_MSK) >> TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_BASE_POS;
-
-    pFeatureInfo->numOfTargets = ( featureRegister & TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_TARGETS_MSK) >> TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_TARGETS_POS;	
-
-    pFeatureInfo->numOfInitators = ( featureRegister & TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_INITATORS_MSK) >> TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_INITATORS_POS;
-        
-     return (TM_OK);	
-}
-
-#endif
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/src/tmvhDcsNetworkConfigModule_reg.h linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/src/tmvhDcsNetworkConfigModule_reg.h
--- linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/src/tmvhDcsNetworkConfigModule_reg.h	2011-11-08 19:21:27.932399000 +0530
+++ linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/src/tmvhDcsNetworkConfigModule_reg.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,150 +0,0 @@
-/**********************************************************************
-*
-*	Header %name:	tmvhDcsNetworkConfigModule_reg.h %
-*	Instance:		PB5_1
-*	Description:	
-*	%created_by:	tusr69 %
-*	%date_created:	Thu May 18 10:34:35 2006 %
-*
-**********************************************************************/
-#ifndef TMVHDCSNETWORKCONFIGMODULE_REG_H
-#define TMVHDCSNETWORKCONFIGMODULE_REG_H
-
-/* -----------------------------------------------------------------------------
-*  Include files
-*  ---------------------------------------------------------------------------*/
-
-#ifdef __cplusplus
-extern "C" {  /* Assume C declarations for C++ */
-#endif
-
-/* --------------------------------------------------------------------------
-*  Register offsets from base address
-*  --------------------------------------------------------------------------*/
-
-	
-#define TMVH_DCSNETWORKCONFIG_BC_CNTRL_OFFSET                      0x0000
-#define TMVH_DCSNETWORKCONFIG_BC_ADDR_OFFSET                       0x000c
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_OFFSET                       0x0010
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_OFFSET                   0x0040	
-#define TMVH_DCSNETWORKCONFIG_BC_INT_CLR_ENABLE_OFFSET             0x0FD8
-#define TMVH_DCSNETWORKCONFIG_BC_INT_SET_ENABLE_OFFSET             0x0FDC
-#define TMVH_DCSNETWORKCONFIG_BC_INT_STATUS_OFFSET                 0x0FE0
-#define TMVH_DCSNETWORKCONFIG_BC_INT_ENABLE_OFFSET                 0x0FE4	
-#define TMVH_DCSNETWORKCONFIG_BC_INT_CLR_OFFSET                    0x0FE8
-#define TMVH_DCSNETWORKCONFIG_BC_INT_SET_OFFSET                    0x0FEC	
-#define TMVH_DCSNETWORKCONFIG_BC_MODULE_ID_OFFSET                  0x0FFC
-
-
-/* --------------------------------------------------------------------------
-*  Control Register
-* --------------------------------------------------------------------------*/
-#define TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_SEL_POS            1	
-#define TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_SEL_MSK            0x0000001EUL	
-
-#define TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_OFF_POS            0	
-#define TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_TOUT_OFF_MSK            0x00000001UL		
-
-/* Only for PNX85500 */
-#define TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_PWR_MGMNT_POS           5	
-#define TMVH_DCSNETWORKCONFIG_BC_CNTRL_REG_PWR_MGMNT_MSK           0x00000020UL	
-
-
-/* --------------------------------------------------------------------------
-* Address Register
-* --------------------------------------------------------------------------*/
-#define TMVH_DCSNETWORKCONFIG_BC_ADDR_ERR_TOUT_ADDR_POS            2	
-#define TMVH_DCSNETWORKCONFIG_BC_ADDR_ERR_TOUT_ADDR_MSK            0xFFFFFFFCUL	
-
-
-/* --------------------------------------------------------------------------
-* Status Register
-* --------------------------------------------------------------------------*/
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_GNT_POS            24	
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_GNT_MSK            0x1F000000
-
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_SEL_POS            10	
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_SEL_MSK            0x0001FC00
-
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_READ_POS           8	
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_READ_MSK           0x00000100	
-
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_MASK_POS           4	
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_TOUT_MASK_MSK           0x000000F0
-
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_ACK_POS                 1	
-#define TMVH_DCSNETWORKCONFIG_BC_STAT_ERR_ACK_MSK                 0x00000002	
-	
-
-/* --------------------------------------------------------------------------
-*  Feature Register (pnx8535 only)
-* --------------------------------------------------------------------------*/
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_UID_POS            16	
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_UID_MSK            0x00070000	
-
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_SECURITY_POS       14	
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_SECURITY_MSK       0x00004000	
-	
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_BASE_POS       11	
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_BASE_MSK       0x00001800
-
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_TARGETS_POS    5	
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_TARGETS_MSK    0x000007E0
-
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_INITATORS_POS    0	
-#define TMVH_DCSNETWORKCONFIG_BC_FEATURES_REG_NUM_INITATORS_MSK    0x0000001F
-	
-	
-
-/* ----------------------------------------------------------------------------
-* Interrupt Clear Enable, Interrupt Set Enable, Interrupt Status, 
-* Interrupt Enable, Interrupt Clear, Interrupt Set Registers Have Similar Bits.
-* -----------------------------------------------------------------------------*/
-#define TMVH_DCSNETWORKCONFIG_BC_INT_TOUT_POS                     1	
-#define TMVH_DCSNETWORKCONFIG_BC_INT_TOUT_MSK                     0x00000002
-
-#define TMVH_DCSNETWORKCONFIG_BC_INT_ERROR_POS                    0	
-#define TMVH_DCSNETWORKCONFIG_BC_INT_ERROR_MSK                    0x00000001
-
-
-
-	
-	
-
-	
-/* --------------------------------------------------------------------------
-*  Module ID Register
-* --------------------------------------------------------------------------*/
-#define TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MID_POS            16 	
-#define TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MID_MSK            0xFFFF0000UL 
-
-#define TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MAJOR_RID_POS      12                       
-#define TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MAJOR_RID_MSK      0x0000F000	
-	
-#define TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MINOR_RID_POS      8                       
-#define TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_MINOR_RID_MSK      0x00000F00	
-
-#define TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_APERTURE_SIZE_POS  0                       
-#define TMVH_DCSNETWORKCONFIG_MODULE_ID_REG_APERTURE_SIZE_MSK  0x000000FF	
-
-
-
-
-/* Register Read Write Macro's  */
-#define TMVH_GEN_READ(address,result)                                          \
-            ((result) = *(volatile UInt32 *)(address))
-
-
-
-#define TMVH_GEN_WRITE(address,value)                                          \
-           *(volatile UInt32 *)(address) = (value)
-
-
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* TMVHDCSNETWORKCONFIGMODULE_REG_H */
-	
-
diff -Naurp linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/src/tmvhDcsNetworkSecurityModule_reg.h linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/src/tmvhDcsNetworkSecurityModule_reg.h
--- linux-2.6.34_orig/drivers/dcs_net/tmhwDcsNetwork/src/tmvhDcsNetworkSecurityModule_reg.h	2011-11-08 19:21:27.946393000 +0530
+++ linux-2.6.34/drivers/dcs_net/tmhwDcsNetwork/src/tmvhDcsNetworkSecurityModule_reg.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,69 +0,0 @@
-/**********************************************************************
-*
-*	Header %name:	tmvhDcsNetworkSecurityModule_reg.h %
-*	Instance:		PB5_1
-*	Description:	
-*	%created_by:	tusr69 %
-*	%date_created:	Mon Feb 13 16:15:08 2006 %
-*
-**********************************************************************/
-
-
-#ifndef TMVHDCSNETWORKSECURITYMODULE_REG_H
-#define TMVHDCSNETWORKSECURITYMODULE_REG_H
-
-/* -----------------------------------------------------------------------------
-*  Include files
-*  ---------------------------------------------------------------------------*/
-
-#ifdef __cplusplus
-extern "C" {  /* Assume C declarations for C++ */
-#endif
-
-/* --------------------------------------------------------------------------
-*  Register offsets from base address
-*  --------------------------------------------------------------------------*/
-
-	
-#define TMVH_DCSNETWORKSECUIRITY_TARGET_ACCESS_CNTRL_OFFSET       0x0000
-#define TMVH_DCSNETWORKSECUIRITY_BCSEC_MODULE_ID_OFFSET           0x0FFC
-
-
-
-/* --------------------------------------------------------------------------
-*  Module ID Register
-* --------------------------------------------------------------------------*/
-#define TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MID_POS            16 	
-#define TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MID_MSK            0xFFFF0000UL 
-
-#define TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MAJOR_RID_POS      12                       
-#define TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MAJOR_RID_MSK      0x0000F000	
-	
-#define TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MINOR_RID_POS      8                       
-#define TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_MINOR_RID_MSK      0x00000F00	
-
-#define TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_APERTURE_SIZE_POS  0                       
-#define TMVH_DCSNETWORKSECUIRITY_MODULE_ID_REG_APERTURE_SIZE_MSK  0x000000FF	
-
-
-
-
-/* Register Read Write Macro's  */
-#define TMVH_GEN_READ(address,result)                                          \
-            ((result) = *(volatile UInt32 *)(address))
-
-
-
-#define TMVH_GEN_WRITE(address,value)                                          \
-           *(volatile UInt32 *)(address) = (value)
-
-
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* TMVHDCSNETWORKSECURITYMODULE_REG_H */
-	
-	
-
