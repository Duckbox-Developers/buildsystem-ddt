diff -Naur linux-2.6.34/drivers/ata/sata_apollo.c linux-2.6.34_sata/drivers/ata/sata_apollo.c
--- linux-2.6.34/drivers/ata/sata_apollo.c	2012-07-19 13:32:04.733534000 +0530
+++ linux-2.6.34_sata/drivers/ata/sata_apollo.c	2012-07-19 13:24:41.429427000 +0530
@@ -45,11 +45,11 @@
  *
  */
 
-#define SATA_TRID
+#define SATA_ENTR
 
 #include <linux/kernel.h>
 #include <linux/module.h>
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 #include <linux/platform_device.h>
 #include <linux/dma-mapping.h>
 #else
@@ -72,7 +72,7 @@
 #include <linux/hdreg.h>
 #endif
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 #define DRV_NAME	"sata-apollo"
 #else
 #define DRV_NAME	"ahci"
@@ -109,7 +109,7 @@
 					ssize_t size);
 
 enum {
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	AHCI_PCI_BAR		= 5,
 #endif /* !Apollo */
 	AHCI_MAX_PORTS		= 32,
@@ -161,7 +161,7 @@
 	HOST_EM_CTL		= 0x20, /* Enclosure Management Control */
 	HOST_CAP2		= 0x24, /* host capabilities, extended */
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 	/* Additional vendor-specific global controller registers */
 	HOST_BOHC		= 0x28, /* BIOS handoff/control */
 	HOST_BISTAFR		= 0xa0, /* BIST Activate FIS Register */
@@ -226,14 +226,14 @@
 	PORT_SCR_NTF		= 0x3c, /* SATA phy register: SNotification */
 	PORT_FBS		    = 0x40, /* FIS-based Switching */
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 	/* Additional vendor-specific port registers */
 	PORT_DMACR		= 0x70,	/* DMA Control Register */
 	PORT_PHYCR		= 0x78, /* PHY Control Register */
 	PORT_PHYSR		= 0x7c, /* PHY Status Register */
 #endif
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 	/* Additional NXP vendor-specific registers */
 	NXP_TX_CTRL_REG		= 0x500,
 	NXP_PLL_RESET_CTRL_REG	= 0x504,
@@ -431,7 +431,7 @@
 	u32			saved_cap2;	/* saved initial cap2 */
 	u32			saved_port_map;	/* saved initial port_map */
 	u32 			em_loc; /* enclosure management location */
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 	void __iomem		*mmio;
 #endif /* Apollo */
 };
@@ -458,7 +458,7 @@
 
 static int ahci_scr_read(struct ata_link *link, unsigned int sc_reg, u32 *val);
 static int ahci_scr_write(struct ata_link *link, unsigned int sc_reg, u32 val);
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 static int ahci_apollo_probe(struct platform_device *pdev);
 static int ahci_apollo_remove(struct platform_device *pdev);
 #else /* PCI */
@@ -484,7 +484,7 @@
 			  unsigned long deadline);
 static int ahci_vt8251_hardreset(struct ata_link *link, unsigned int *class,
 				 unsigned long deadline);
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 static int ahci_p5wdh_hardreset(struct ata_link *link, unsigned int *class,
 				unsigned long deadline);
 #endif
@@ -497,7 +497,7 @@
 			       u32 opts);
 #ifdef CONFIG_PM
 static int ahci_port_suspend(struct ata_port *ap, pm_message_t mesg);
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 static int ahci_apollo_suspend(struct platform_device *pdev, pm_message_t mesg);
 static int ahci_apollo_resume(struct platform_device *pdev);
 #else /* PCI */
@@ -599,7 +599,7 @@
 	.hardreset		= ahci_vt8251_hardreset,
 };
 
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 static struct ata_port_operations ahci_p5wdh_ops = {
 	.inherits		= &ahci_ops,
 	.hardreset		= ahci_p5wdh_hardreset,
@@ -714,7 +714,7 @@
 	},
 };
 
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 static const struct pci_device_id ahci_pci_tbl[] = {
 	/* Intel */
 	{ PCI_VDEVICE(INTEL, 0x2652), board_ahci }, /* ICH6 */
@@ -893,7 +893,7 @@
 };
 #endif /* !Apollo */
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 static struct platform_driver ahci_apollo_driver = {
 	.driver	= {
 		.name		= DRV_NAME,
@@ -942,7 +942,7 @@
 
 static inline void __iomem *ahci_base(struct ata_host *host)
 {
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 	return ((struct ahci_host_priv *)host->private_data)->mmio;
 #else
 	return host->iomap[AHCI_PCI_BAR];
@@ -1012,7 +1012,7 @@
 {
 	struct Scsi_Host *shost = class_to_shost(dev);
 	struct ata_port *ap = ata_shost_to_port(shost);
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 	struct ahci_host_priv *hpriv = ap->host->private_data;
     void __iomem *mmio = hpriv->mmio;
 #else
@@ -1049,7 +1049,7 @@
 static void ahci_save_initial_config(struct device *dev,
 				     struct ahci_host_priv *hpriv)
 {
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 	void __iomem *mmio = hpriv->mmio;
 #else
 	struct pci_dev *pdev = to_pci_dev(dev);
@@ -1107,7 +1107,7 @@
 		cap &= ~HOST_CAP_SNTF;
 	}
 
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	if (pdev->vendor == PCI_VENDOR_ID_JMICRON && pdev->device == 0x2361 &&
 	    port_map != 1) {
 		dev_printk(KERN_INFO, dev,
@@ -1240,7 +1240,13 @@
 	void __iomem *port_mmio = ahci_port_base(ap);
 	u32 tmp;
 
-	//wmb();
+#ifdef SATA_ENTR
+   /* set DMA RXTS/TXTS */
+   tmp = readl(port_mmio + PORT_DMACR);
+   tmp &= ~0xFFUL;
+   tmp |= 0x77UL;
+   writel(tmp, port_mmio + PORT_DMACR);
+#endif
 
 	/* start DMA */
 	tmp = readl(port_mmio + PORT_CMD);
@@ -1544,7 +1550,7 @@
 
 static int ahci_reset_controller(struct ata_host *host)
 {
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	struct pci_dev *pdev = to_pci_dev(host->dev);
 	struct ahci_host_priv *hpriv = host->private_data;
 #endif
@@ -1590,7 +1596,7 @@
 		dev_printk(KERN_INFO, host->dev,
 			   "skipping global host reset\n");
 
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	if (pdev->vendor == PCI_VENDOR_ID_INTEL) {
 		u16 tmp16;
 
@@ -1837,7 +1843,7 @@
 			   int port_no, void __iomem *mmio,
 			   void __iomem *port_mmio)
 {
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	struct pci_dev *pdev = to_pci_dev(dev);
 #endif
 	const char *emsg = NULL;
@@ -1866,7 +1872,7 @@
 
 static void ahci_init_controller(struct ata_host *host)
 {
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	struct ahci_host_priv *hpriv = host->private_data;
 	struct pci_dev *pdev = to_pci_dev(host->dev);
 	int mv;
@@ -1876,7 +1882,7 @@
 	void __iomem *port_mmio;
 	u32 tmp;
 
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	if (hpriv->flags & AHCI_HFLAG_MV_PATA) {
 		if (pdev->device == 0x6121)
 			mv = 2;
@@ -1941,6 +1947,9 @@
 			       u32 opts)
 {
 	dma_addr_t cmd_tbl_dma;
+#ifdef CONFIG_ARCH_APOLLO
+	static struct ahci_cmd_hdr data;
+#endif
 
 	cmd_tbl_dma = pp->cmd_tbl_dma + tag * AHCI_CMD_TBL_SZ;
 
@@ -1948,7 +1957,10 @@
 	pp->cmd_slot[tag].status = 0;
 	pp->cmd_slot[tag].tbl_addr = cpu_to_le32(cmd_tbl_dma & 0xffffffff);
 	pp->cmd_slot[tag].tbl_addr_hi = cpu_to_le32((cmd_tbl_dma >> 16) >> 16);
-	//wmb();
+#ifdef CONFIG_ARCH_APOLLO
+	/* flush */
+	data = pp->cmd_slot[tag];
+#endif
 }
 
 static int ahci_kick_engine(struct ata_port *ap)
@@ -1995,6 +2007,20 @@
 	return rc;
 }
 
+#ifdef CONFIG_ARCH_APOLLO
+static void ahci_ata_tf_to_fis(const struct ata_taskfile *tf, u8 pmp, int is_cmd, u8 *fis)
+{
+	static u8 data[20];
+
+	ata_tf_to_fis(tf, pmp, is_cmd, fis);
+
+	/* flush */
+	memcpy(data, fis, sizeof(data));
+}
+#else
+#define ahci_ata_tf_to_fis	ata_tf_to_fis
+#endif
+
 static int ahci_exec_polled_cmd(struct ata_port *ap, int pmp,
 				struct ata_taskfile *tf, int is_cmd, u16 flags,
 				unsigned long timeout_msec)
@@ -2006,7 +2032,7 @@
 	u32 tmp;
 
 	/* prep the command */
-	ata_tf_to_fis(tf, pmp, is_cmd, fis);
+	ahci_ata_tf_to_fis(tf, pmp, is_cmd, fis);
 	ahci_fill_cmd_slot(pp, 0, cmd_fis_len | flags | (pmp << 12));
 
 	/* issue & wait */
@@ -2178,7 +2204,7 @@
 	/* clear D2H reception area to properly wait for D2H FIS */
 	ata_tf_init(link->device, &tf);
 	tf.command = 0x80;
-	ata_tf_to_fis(&tf, 0, 0, d2h_fis);
+	ahci_ata_tf_to_fis(&tf, 0, 0, d2h_fis);
 
 	rc = sata_link_hardreset(link, timing, deadline, &online,
 				 ahci_check_ready);
@@ -2216,7 +2242,7 @@
 	return online ? -EAGAIN : rc;
 }
 
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 static int ahci_p5wdh_hardreset(struct ata_link *link, unsigned int *class,
 				unsigned long deadline)
 {
@@ -2232,7 +2258,7 @@
 	/* clear D2H reception area to properly wait for D2H FIS */
 	ata_tf_init(link->device, &tf);
 	tf.command = 0x80;
-	ata_tf_to_fis(&tf, 0, 0, d2h_fis);
+	ahci_ata_tf_to_fis(&tf, 0, 0, d2h_fis);
 
 	rc = sata_link_hardreset(link, sata_ehc_deb_timing(&link->eh_context),
 				 deadline, &online, NULL);
@@ -2287,6 +2313,9 @@
 	struct scatterlist *sg;
 	struct ahci_sg *ahci_sg = cmd_tbl + AHCI_CMD_TBL_HDR_SZ;
 	unsigned int si;
+#ifdef CONFIG_ARCH_APOLLO
+	static struct ahci_sg data;
+#endif
 
 	VPRINTK("ENTER\n");
 
@@ -2302,6 +2331,11 @@
 		ahci_sg[si].flags_size = cpu_to_le32(sg_len - 1);
 	}
 
+#ifdef CONFIG_ARCH_APOLLO
+	/* flush */
+	data = ahci_sg[si-1];
+#endif
+
 	return si;
 }
 
@@ -2332,10 +2366,14 @@
 	 */
 	cmd_tbl = pp->cmd_tbl + qc->tag * AHCI_CMD_TBL_SZ;
 
-	ata_tf_to_fis(&qc->tf, qc->dev->link->pmp, 1, cmd_tbl);
+	ahci_ata_tf_to_fis(&qc->tf, qc->dev->link->pmp, 1, cmd_tbl);
 	if (is_atapi) {
 		memset(cmd_tbl + AHCI_CMD_TBL_CDB, 0, 32);
 		memcpy(cmd_tbl + AHCI_CMD_TBL_CDB, qc->cdb, qc->dev->cdb_len);
+#ifdef CONFIG_ARCH_APOLLO
+		/* flush */
+		memcpy(qc->cdb, cmd_tbl + AHCI_CMD_TBL_CDB, qc->dev->cdb_len);
+#endif
 	}
 
 	n_elem = 0;
@@ -2667,7 +2705,6 @@
 		pp->fbs_last_dev = qc->dev->link->pmp;
 	}
 
-	//wmb();
 	writel(1 << qc->tag, port_mmio + PORT_CMD_ISSUE);
 
 	ahci_sw_activity(qc->dev->link);
@@ -2858,7 +2895,7 @@
 	return rc;
 }
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 static int ahci_apollo_suspend(struct platform_device *pdev, pm_message_t mesg)
 {
 	struct device *dev = &pdev->dev;
@@ -3043,7 +3080,7 @@
 {
 	int rc;
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 
 	rc = dma_set_mask(dev, DMA_BIT_MASK(32));
 	if (rc) {
@@ -3087,13 +3124,13 @@
 static void ahci_print_info(struct ata_host *host)
 {
 	struct ahci_host_priv *hpriv = host->private_data;
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	struct pci_dev *pdev = to_pci_dev(host->dev);
 #endif
 	void __iomem *mmio = ahci_base(host);
 	u32 vers, cap, cap2, impl, speed;
 	const char *speed_s;
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 	u16 cc;
 #endif
 	const char *scc_s;
@@ -3113,7 +3150,7 @@
 	else
 		speed_s = "?";
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 	scc_s = "SATA";
 #else
 	pci_read_config_word(pdev, 0x0a, &cc);
@@ -3173,7 +3210,7 @@
 		);
 }
 
-#ifdef SATA_TRID
+#ifdef SATA_ENTR
 
 #ifdef CONFIG_SATA_APOLLO_BIST
 static int ahci_ata_scsi_ioctl(
@@ -3981,7 +4018,7 @@
 MODULE_AUTHOR("Jeff Garzik/Nitin Garg");
 MODULE_DESCRIPTION("Trident Apollo AHCI SATA low-level driver");
 MODULE_LICENSE("GPL");
-#ifndef SATA_TRID
+#ifndef SATA_ENTR
 MODULE_DEVICE_TABLE(pci, ahci_pci_tbl);
 #endif
 MODULE_VERSION(DRV_VERSION);
