diff -Naur linux-2.6.34_Org/drivers/mtd/sfc/nx_sfc.c linux-2.6.34/drivers/mtd/sfc/nx_sfc.c
--- linux-2.6.34_Org/drivers/mtd/sfc/nx_sfc.c	2010-12-08 18:23:10.180846000 +0530
+++ linux-2.6.34/drivers/mtd/sfc/nx_sfc.c	2010-12-08 18:20:44.004668000 +0530
@@ -29,10 +29,13 @@
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/partitions.h>
 #include <linux/sched.h>
+#include <mach/gcs.h>
 #include "nx_sfc.h"
 
 #define FLASH_PAGESIZE        256
 #define SFC_PREFETCH_BUFSIZE   64
+#define SFC_DCSN_BASE_REG (MMIO_GCS_BASE +0x14)
+#define SFC_DCSN_SIZE  0x8000000
 
 /* Flash opcodes. */
 #define  OPCODE_WREN       0x06  /* Write enable */
@@ -46,6 +49,9 @@
 #define  OPCODE_CHIP_ERASE 0xc7  /* Erase whole flash chip */
 #define  OPCODE_SE         0xd8  /* Sector erase (usually 64KiB) */
 #define  OPCODE_RDID       0x9f  /* Read JEDEC ID */
+#ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+#define OPCODE_QUADIO_READ 0xeb  /* fast read quad I/O */
+#endif
 
 /* Status Register bits. */
 #define  SR_WIP         1  /* Write in progress */
@@ -63,8 +69,8 @@
 
 #define  CMD_SIZE    4
 
-#ifdef CONFIG_M25PXX_USE_FAST_READ
-#define OPCODE_READ  OPCODE_FAST_READ
+#ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+#define OPCODE_READ  OPCODE_QUADIO_READ
 #define FAST_READ_DUMMY_BYTE 1
 #else
 #define OPCODE_READ  OPCODE_NORM_READ
@@ -93,7 +99,74 @@
 /****************************************************************************/
 /* IP2070 GCS: SFC Routines                                                 */
 /****************************************************************************/
- 
+
+/*
+  * for fast read quad I/O operations
+  */
+#ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+ssize_t nx_sfc_read_quad(struct nx_sfc_mtd *flash)
+{
+	u32 cnt, round_len =0; 
+	unsigned long *buf_base, buf_store;
+	u8 *buf_ptr =flash->cd.buffer;
+	u8 *mem_buf_ptr = (u8*)&buf_store;
+
+	/* Program the Pin Configuration Register */
+ 	writel( SFC_PIN_CONFIG_QUAD_READ, flash->mmio_base+IPBGCSFLSHNTWK_SFC_SFC_PIN_CONFIG_REG); 
+
+	round_len = flash->cd.length % 4;
+	if(round_len)
+	{
+	      round_len = flash->cd.length + (4 - round_len);
+	      writel(round_len,flash->mmio_base + IPBGCSFLSHNTWK_SFC_SFC_TX_RX_DATA_CNT_REG);
+	}
+	else
+		writel(flash->cd.length,flash->mmio_base + IPBGCSFLSHNTWK_SFC_SFC_TX_RX_DATA_CNT_REG);
+
+	if ((flash->cd.offset >= SZ_16M) && (flash->info.jedec_id == 0xc22019))
+	{
+	      nx_sfc_32b_en(flash);
+	}
+	else
+	{	 /* Program the protocol delay regsister */
+		writel( SFC_PROTCOL_DELAY_QUADRD, flash->mmio_base+IPBGCSFLSHNTWK_SFC_SFC_PROTOCOL_DELAY_REG); 
+	}
+	writel( SFC_CSR_QUAD_READ, flash->mmio_base+IPBGCSFLSHNTWK_SFC_SFC_CSR_REG);
+	/* Program the SPI Clock Configuration Register */
+       writel(0x0, flash->mmio_base+ IPBGCSFLSHNTWK_SFC_SFC_SCK_CSR_REG); 	
+	/* Program the Device Command Register with Quad read command */
+	writel( SFC_DEV_CMD_QUAD_READ, flash->mmio_base+IPBGCSFLSHNTWK_SFC_SFC_DEVICE_CMD_REG);
+  
+	buf_base = (( unsigned long *)(flash->io_base+flash->cd.offset));
+	for (cnt=0;cnt<flash->cd.length/4; cnt++)
+	{
+		buf_store=readl(buf_base);
+		memcpy(buf_ptr, mem_buf_ptr, 4);
+		buf_base++;
+		buf_ptr +=0x04;
+	}
+
+	if(flash->cd.length%4)
+	{
+		buf_store = readl(buf_base);
+		memcpy(buf_ptr, mem_buf_ptr, flash->cd.length%4);
+	}
+	/* Set the default settings */
+	writel( SFC_PIN_CONFIG_DEFAULT, flash->mmio_base+IPBGCSFLSHNTWK_SFC_SFC_PIN_CONFIG_REG); 
+       writel(0x01, flash->mmio_base+ IPBGCSFLSHNTWK_SFC_SFC_SCK_CSR_REG); 	
+    	if((flash->cd.offset >= SZ_16M) && (flash->info.jedec_id == 0xc22019))
+    	{
+      		nx_sfc_32b_dis(flash);
+    	}
+	else
+	{
+ 		writel( SFC_PROTOCOL_DELAY_VAL_24B, flash->mmio_base+IPBGCSFLSHNTWK_SFC_SFC_PROTOCOL_DELAY_REG);		
+	}   	   
+	return flash->cd.length;
+
+}
+#endif
+
 ssize_t nx_sfc_prefetch_read(struct nx_sfc_mtd *flash) 
 {
    volatile unsigned long *prefetch_buf_base;
@@ -290,7 +363,11 @@
    writel(0xB70D0203, flash->mmio_base + IPBGCSFLSHNTWK_SFC_SFC_DEVICE_CMD_REG);
    nx_sfc_wait(flash->mmio_base);
    status = nx_sfc_read_RSCUR(flash->mmio_base);
+   #ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+   writel(SFC_PROTOCOL_DELAY_QUADVAL_32B,flash->mmio_base + IPBGCSFLSHNTWK_SFC_SFC_PROTOCOL_DELAY_REG);
+   #else
    writel(SFC_PROTOCOL_DELAY_VAL_32B,flash->mmio_base + IPBGCSFLSHNTWK_SFC_SFC_PROTOCOL_DELAY_REG);
+   #endif
 }
 
 void nx_sfc_32b_dis(struct nx_sfc_mtd *flash)
@@ -350,6 +427,26 @@
    return status;
 }
 
+/*
+ *nx_sfc_status2_read : to read status register 2 for Winbond serial flash
+ */
+
+#if 0  
+u32 nx_sfc_status2_read(void __iomem *sfc_regs)
+{	
+	u32 status=0;
+	writel( 0xa900001b, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_PIN_CONFIG_REG); 
+	writel( 0x10008000, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_PROTOCOL_DELAY_REG); 
+	writel(0x00000007, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_CSR_REG);
+	writel(0x01, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_TX_RX_DATA_CNT_REG);
+	writel(0x350D0203, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_DEVICE_CMD_REG);
+	nx_sfc_wait(sfc_regs);
+	status= readl(sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_SP_CMD_RD_WR0_DATA_REG);
+	return status;		
+}
+
+#endif
+
 void nx_sfc_write_sr(void __iomem * sfc_regs)
 {
 
@@ -374,9 +471,53 @@
    while (status & 0x10000);
 }
 
+
+void nx_sfc_reset(void __iomem * sfc_regs)
+{
+   u32 tmp=100;	
+   writel(0x80000000,sfc_regs + IPBGCSFLSHNTWK_SFC_SFC_CSR_REG); 
+   do{
+   	tmp=tmp-1;	
+   }
+   while(tmp>0);
+   writel(0x00000000,sfc_regs + IPBGCSFLSHNTWK_SFC_SFC_CSR_REG); 
+   return;
+}
+
+void nx_sfc_set_quad_bit(void __iomem *sfc_regs)
+{
+	nx_sfc_write_en(sfc_regs);
+	writel(0x00020005, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_CSR_REG);
+	writel(0x10000000, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_PROTOCOL_DELAY_REG);
+	writel(0x00002000, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_TX_RX_DATA_CNT_REG);
+	writel(0x00000200, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_SP_CMD_RD_WR0_DATA_REG);
+	writel(0x00000000, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_SP_CMD_RD_WR1_DATA_REG);
+	writel(0x010D0203, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_DEVICE_CMD_REG);
+	nx_sfc_wait(sfc_regs);
+}
+
+
+void nx_sfc_reset_quad_bit(void __iomem *sfc_regs)
+{
+	nx_sfc_reset(sfc_regs);
+	nx_sfc_write_en(sfc_regs);
+	writel(0x00020005, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_CSR_REG);
+	writel(0x10000000, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_PROTOCOL_DELAY_REG);
+	writel(0x00002000, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_TX_RX_DATA_CNT_REG);
+	writel(0x00000000, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_SP_CMD_RD_WR0_DATA_REG);
+	writel(0x00000000, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_SP_CMD_RD_WR1_DATA_REG);
+	writel(0x010D0203, sfc_regs+IPBGCSFLSHNTWK_SFC_SFC_DEVICE_CMD_REG);
+	nx_sfc_wait(sfc_regs);
+}
+
 void nx_sfc_init(void __iomem * sfc_regs)
 {
    writel(0x1,sfc_regs + IPBGCSFLSHNTWK_SFC_SFC_SCK_CSR_REG); 
+   writel(SFC_PROTOCOL_DELAY_VAL_24B, sfc_regs + IPBGCSFLSHNTWK_SFC_SFC_PROTOCOL_DELAY_REG);
+   writel(0x01, APOLLO_GCS_CLOCK_MUX);
+   #ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+   nx_sfc_set_quad_bit(sfc_regs);
+   #endif
    return;
 }
 
@@ -617,12 +758,16 @@
    }
    else
    {
+      #ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+      nx_sfc_read_quad(flash);
+      #else
       #ifdef SFC_DMAC_ENABLE
       if (page_size == FLASH_PAGESIZE)
-         nx_sfc_read(flash);
+      		nx_sfc_read(flash);
       else
       #endif
-      nx_sfc_prefetch_read(flash);
+      		nx_sfc_prefetch_read(flash);
+      #endif
    }
 }
 
@@ -674,6 +819,17 @@
    /* Set up the write data buffer. */
    flash->cd.command[0] = OPCODE_READ;
 
+#ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+    for (i = 0, pgoffset = 0; i < len; i += page_size, pgoffset += page_size) 
+   {
+      page_size = len - i;
+
+      if (page_size > FLASH_PAGESIZE)
+         page_size = FLASH_PAGESIZE;
+
+      sfc_sync(flash, from, buf, page_size, pgoffset, 0);
+   }
+#else
    /* write everything in PAGESIZE chunks */
    for (i = 0, pgoffset = 0; i < len; i += page_size, pgoffset += page_size) 
    {
@@ -683,7 +839,8 @@
          page_size = SFC_PREFETCH_BUFSIZE;
 
       sfc_sync(flash, from, buf, page_size, pgoffset, 0);
-   }
+   }	
+#endif
 
    if (retlen)
       *retlen = len;
@@ -912,8 +1069,11 @@
    struct flash_info *info;
    unsigned    i;
    int err;
- 
-   struct resource *res;
+   struct resource *res;   
+#ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+   unsigned long sfc_dcsn_base;
+   void __iomem *io_regs =NULL;
+#endif
 //  unsigned long size;
    void __iomem *mmio_regs = NULL;
    resource_size_t mmio_start, mmio_len;
@@ -939,6 +1099,24 @@
          err = -ENOMEM;
          return err;
    }
+
+
+#ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+   sfc_dcsn_base = readl(SFC_DCSN_BASE_REG);
+   if (!request_mem_region(sfc_dcsn_base, SFC_DCSN_SIZE, pdev->name)) {
+         dev_err(&pdev->dev, "request_mem_region for io failure\n");
+         return -EBUSY;
+   }
+
+   io_regs = ioremap(sfc_dcsn_base, SFC_DCSN_SIZE );
+   if(!io_regs) {
+         dev_err(&pdev->dev, "ioremap for io failure\n");
+         err = -ENOMEM;
+         return err;
+   }
+
+ #endif
+   
    nx_sfc_init(mmio_regs);
    #ifdef SFC_DMAC_ENABLE
    err = nx_sfc_dma_init();
@@ -967,7 +1145,9 @@
    flash->mmio_start    = mmio_start;
    flash->mmio_len      = mmio_len;
    flash->mmio_base     = mmio_regs;
-
+#ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+   flash->io_base		= io_regs;
+#endif
 
    /* Platform data helps sort out which chip type we have, as
     * well as how this board partitions it.  If we don't have
diff -Naur linux-2.6.34_Org/drivers/mtd/sfc/nx_sfc.h linux-2.6.34/drivers/mtd/sfc/nx_sfc.h
--- linux-2.6.34_Org/drivers/mtd/sfc/nx_sfc.h	2010-12-08 18:23:09.825930000 +0530
+++ linux-2.6.34/drivers/mtd/sfc/nx_sfc.h	2010-12-08 18:21:03.306136000 +0530
@@ -382,12 +382,18 @@
    #define IPBGCSFLSHNTWK_SFC_MODULE_ID_REG  (0xfc)
 
 #define SFC_PROTCOL_DELAY_READ      0x10008000
+#define SFC_PROTCOL_DELAY_QUADRD 	0x10008006
 #define SFC_PROTOCL_DELAY_WRITE     0x10038000
+#define SFC_PIN_CONFIG_DEFAULT       0xa900001b
+#define SFC_PIN_CONFIG_QUAD_READ  0xa9001a1b
 
 #define SFC_PROTOCOL_DELAY_VAL_16B  0x00008000
 #define SFC_PROTOCOL_DELAY_VAL_24B  0x10008000
 #define SFC_PROTOCOL_DELAY_VAL_32B  0x20008000
+#define SFC_PROTOCOL_DELAY_QUADVAL_32B  0x20008006
+
 #define SFC_CSR_READ                0x0000027
+#define SFC_CSR_QUAD_READ     0x000000e7
 #define SFC_CSR_WRITE               0x00420001
 #define SFC_CSR_ERASE               0x20001
 #define SFC_CSR_WREN                0x67
@@ -395,6 +401,7 @@
 #define SFC_CSR_READ_STATUS         0x7
 #define SFC_CSR_WRITE_STATUS        0x20001
 #define SFC_DEV_CMD_READ            0x03850203 
+#define SFC_DEV_CMD_QUAD_READ 0x000c02eb
 #define SFC_DEV_CMD_WRITE           0x02810203
 #define SFC_DEV_CMD_ERASE           0xD8810203
 #define SFC_DEV_CMD_WREN            0x060D0203
@@ -467,6 +474,9 @@
    resource_size_t         mmio_start;
    resource_size_t         mmio_len;
    void __iomem            *mmio_base;
+   #ifdef CONFIG_MTD_NX_SFC_QUAD_MODE
+   void __iomem		*io_base;
+   #endif
 };
 
 #if 0
