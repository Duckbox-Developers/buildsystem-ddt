diff -Naurp linux-2.6.34_Org/drivers/mmc/core/core.c linux-2.6.34/drivers/mmc/core/core.c
--- linux-2.6.34_Org/drivers/mmc/core/core.c	2013-02-05 11:52:30.982859000 +0530
+++ linux-2.6.34/drivers/mmc/core/core.c	2013-02-05 14:36:59.050189000 +0530
@@ -1215,9 +1215,16 @@ void mmc_rescan(struct work_struct *work
 		container_of(work, struct mmc_host, detect.work);
 	u32 ocr;
 	int err;
-#ifdef CONFIG_MMC_SD_FALLBACK
 	unsigned long flags;
-#endif
+
+	spin_lock_irqsave(&host->lock, flags);
+
+	if (host->rescan_disable) {
+		spin_unlock_irqrestore(&host->lock, flags);
+		return;
+	}
+
+	spin_unlock_irqrestore(&host->lock, flags);
 
 	mmc_bus_get(host);
 
@@ -1479,28 +1486,64 @@ int mmc_resume_host(struct mmc_host *hos
 			printk(KERN_WARNING "%s: error %d during resume "
 					    "(card was removed?)\n",
 					    mmc_hostname(host), err);
-			if (host->bus_ops->remove)
-				host->bus_ops->remove(host);
-			mmc_claim_host(host);
-			mmc_detach_bus(host);
-			mmc_release_host(host);
-			/* no need to bother upper layers */
 			err = 0;
 		}
 	}
 	mmc_bus_put(host);
 
-	/*
-	 * We add a slight delay here so that resume can progress
-	 * in parallel.
-	 */
-	mmc_detect_change(host, 1);
-
 	return err;
 }
 
 EXPORT_SYMBOL(mmc_resume_host);
 
+/* Do the card removal on suspend if card is assumed removeable
+ * Do that in pm notifier while userspace isn't yet frozen, so we will be able
+   to sync the card.
+*/
+int mmc_pm_notify(struct notifier_block *notify_block,
+                    unsigned long mode, void *unused)
+{
+    struct mmc_host *host = container_of(
+        notify_block, struct mmc_host, pm_notify);
+    unsigned long flags;
+
+
+    switch (mode) {
+    case PM_HIBERNATION_PREPARE:
+    case PM_SUSPEND_PREPARE:
+
+        spin_lock_irqsave(&host->lock, flags);
+        host->rescan_disable = 1;
+        spin_unlock_irqrestore(&host->lock, flags);
+        cancel_delayed_work_sync(&host->detect);
+
+        if (!host->bus_ops || host->bus_ops->suspend)
+            break;
+
+        mmc_claim_host(host);
+
+        if (host->bus_ops->remove)
+            host->bus_ops->remove(host);
+
+        mmc_detach_bus(host);
+        mmc_release_host(host);
+        host->pm_flags = 0;
+        break;
+
+    case PM_POST_SUSPEND:
+    case PM_POST_HIBERNATION:
+	case PM_POST_RESTORE:
+
+        spin_lock_irqsave(&host->lock, flags);
+        host->rescan_disable = 0;
+        spin_unlock_irqrestore(&host->lock, flags);
+        mmc_detect_change(host, 0);
+
+    }
+
+    return 0;
+}
+
 #endif
 
 #ifdef CONFIG_MMC_SD_FALLBACK
diff -Naurp linux-2.6.34_Org/drivers/mmc/core/host.c linux-2.6.34/drivers/mmc/core/host.c
--- linux-2.6.34_Org/drivers/mmc/core/host.c	2013-02-05 11:52:30.990864000 +0530
+++ linux-2.6.34/drivers/mmc/core/host.c	2013-02-05 14:38:54.105849000 +0530
@@ -17,6 +17,7 @@
 #include <linux/pagemap.h>
 #include <linux/leds.h>
 #include <linux/slab.h>
+#include <linux/suspend.h>
 
 #include <linux/mmc/host.h>
 
@@ -85,6 +86,7 @@ struct mmc_host *mmc_alloc_host(int extr
 	init_waitqueue_head(&host->wq);
 	INIT_DELAYED_WORK(&host->detect, mmc_rescan);
 	INIT_DELAYED_WORK_DEFERRABLE(&host->disable, mmc_host_deeper_disable);
+	host->pm_notify.notifier_call = mmc_pm_notify;
 
 	/*
 	 * By default, hosts do not support SGIO or large requests.
@@ -133,6 +135,7 @@ int mmc_add_host(struct mmc_host *host)
 #endif
 
 	mmc_start_host(host);
+	register_pm_notifier(&host->pm_notify);
 
 	return 0;
 }
@@ -149,6 +152,7 @@ EXPORT_SYMBOL(mmc_add_host);
  */
 void mmc_remove_host(struct mmc_host *host)
 {
+	unregister_pm_notifier(&host->pm_notify);
 	mmc_stop_host(host);
 
 #ifdef CONFIG_DEBUG_FS
diff -Naurp linux-2.6.34_Org/include/linux/mmc/host.h linux-2.6.34/include/linux/mmc/host.h
--- linux-2.6.34_Org/include/linux/mmc/host.h	2013-02-05 11:53:02.784283000 +0530
+++ linux-2.6.34/include/linux/mmc/host.h	2013-02-05 14:40:30.989022000 +0530
@@ -121,6 +121,7 @@ struct mmc_host {
 	unsigned int		f_min;
 	unsigned int		f_max;
 	u32			ocr_avail;
+	struct notifier_block	pm_notify;
 
 #define MMC_VDD_165_195		0x00000080	/* VDD voltage 1.65 - 1.95 */
 #define MMC_VDD_20_21		0x00000100	/* VDD voltage 2.0 ~ 2.1 */
@@ -180,6 +181,7 @@ struct mmc_host {
 
 	/* Only used with MMC_CAP_DISABLE */
 	int			enabled;	/* host is enabled */
+	int			rescan_disable;	/* disable card detection */
 	int			nesting_cnt;	/* "enable" nesting count */
 	int			en_dis_recurs;	/* detect recursion */
 	unsigned int		disable_delay;	/* disable delay in msecs */
@@ -255,6 +257,7 @@ int mmc_card_can_sleep(struct mmc_host *
 int mmc_host_enable(struct mmc_host *host);
 int mmc_host_disable(struct mmc_host *host);
 int mmc_host_lazy_disable(struct mmc_host *host);
+int mmc_pm_notify(struct notifier_block *notify_block, unsigned long, void *);
 
 static inline void mmc_set_disable_delay(struct mmc_host *host,
 					 unsigned int disable_delay)
