diff --git a/shared/util.h b/shared/util.h
index c6af2e3..d9ed118 100644
--- a/shared/util.h
+++ b/shared/util.h
@@ -96,24 +96,14 @@ static _always_inline_ unsigned int ALIGN_POWER2(unsigned int u)
 
 static inline bool uadd32_overflow(uint32_t a, uint32_t b, uint32_t *res)
 {
-#if (HAVE___BUILTIN_UADD_OVERFLOW && __SIZEOF_INT__ == 4)
-	return __builtin_uadd_overflow(a, b, res);
-#else
 	*res = a + b;
 	return UINT32_MAX - a < b;
-#endif
 }
 
 static inline bool uadd64_overflow(uint64_t a, uint64_t b, uint64_t *res)
 {
-#if (HAVE___BUILTIN_UADDL_OVERFLOW && __SIZEOF_LONG__ == 8)
-	return __builtin_uaddl_overflow(a, b, res);
-#elif (HAVE___BUILTIN_UADDLL_OVERFLOW && __SIZEOF_LONG_LONG__ == 8)
-	return __builtin_uaddll_overflow(a, b, res);
-#else
 	*res = a + b;
 	return UINT64_MAX - a < b;
-#endif
 }
 
 static inline bool uaddsz_overflow(size_t a, size_t b, size_t *res)
@@ -129,24 +119,14 @@ static inline bool uaddsz_overflow(size_t a, size_t b, size_t *res)
 
 static inline bool umul32_overflow(uint32_t a, uint32_t b, uint32_t *res)
 {
-#if (HAVE___BUILTIN_UMUL_OVERFLOW && __SIZEOF_INT__ == 4)
-	return __builtin_umul_overflow(a, b, res);
-#else
 	*res = a * b;
 	return UINT32_MAX / a < b;
-#endif
 }
 
 static inline bool umul64_overflow(uint64_t a, uint64_t b, uint64_t *res)
 {
-#if (HAVE___BUILTIN_UMULL_OVERFLOW && __SIZEOF_LONG__ == 8)
-	return __builtin_umull_overflow(a, b, res);
-#elif (HAVE___BUILTIN_UMULLL_OVERFLOW && __SIZEOF_LONG_LONG__ == 8)
-	return __builtin_umulll_overflow(a, b, res);
-#else
 	*res = a * b;
 	return UINT64_MAX / a < b;
-#endif
 }
 
 static inline bool umulsz_overflow(size_t a, size_t b, size_t *res)
