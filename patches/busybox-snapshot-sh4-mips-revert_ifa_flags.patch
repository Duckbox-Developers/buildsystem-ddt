--- b/networking/libiproute/ip_common.h
+++ a/networking/libiproute/ip_common.h
@@ -33,8 +33,4 @@
 
 POP_SAVED_FUNCTION_VISIBILITY
 
-#ifndef	INFINITY_LIFE_TIME
-#define     INFINITY_LIFE_TIME      0xFFFFFFFFU
-#endif
-
 #endif
--- b/networking/libiproute/ipaddress.c
+++ a/networking/libiproute/ipaddress.c
@@ -601,14 +601,6 @@
 	return 0;
 }
 
-static void set_lifetime(unsigned int *lifetime, char *argv, const char *errmsg)
-{
-	if (strcmp(argv, "forever") == 0)
-		*lifetime = INFINITY_LIFE_TIME;
-	else
-		*lifetime = get_u32(argv, errmsg);
-}
-
 static int default_scope(inet_prefix *lcl)
 {
 	if (lcl->family == AF_INET) {
@@ -624,13 +616,10 @@
 	/* If you add stuff here, update ipaddr_full_usage */
 	static const char option[] ALIGN1 =
 		"peer\0""remote\0""broadcast\0""brd\0"
+		"anycast\0""scope\0""dev\0""label\0""noprefixroute\0""local\0";
-		"anycast\0""valid_lft\0""preferred_lft\0"
-		"scope\0""dev\0""label\0""noprefixroute\0""local\0";
 #define option_peer      option
 #define option_broadcast (option           + sizeof("peer") + sizeof("remote"))
 #define option_anycast   (option_broadcast + sizeof("broadcast") + sizeof("brd"))
-#define option_valid_lft (option_anycast   + sizeof("anycast"))
-#define option_pref_lft  (option_valid_lft + sizeof("valid_lft"))
 	struct rtnl_handle rth;
 	struct {
 		struct nlmsghdr  n;
@@ -639,8 +628,6 @@
 	} req;
 	char *d = NULL;
 	char *l = NULL;
-	char *valid_lftp = NULL;
-	char *preferred_lftp = NULL;
 	inet_prefix lcl;
 	inet_prefix peer;
 	int local_len = 0;
@@ -648,8 +635,6 @@
 	int brd_len = 0;
 	int any_len = 0;
 	bool scoped = 0;
-	__u32 valid_lft = INFINITY_LIFE_TIME;
-	__u32 preferred_lft = INFINITY_LIFE_TIME;
 	unsigned int ifa_flags = 0;
 
 	memset(&req, 0, sizeof(req));
@@ -662,9 +647,10 @@
 	while (*argv) {
 		unsigned arg = index_in_strings(option, *argv);
 		/* if search fails, "local" is assumed */
+		if ((int)arg >= 0 && arg != 8)
+			NEXT_ARG();
 
 		if (arg <= 1) { /* peer, remote */
-			NEXT_ARG();
 			if (peer_len) {
 				duparg(option_peer, *argv);
 			}
@@ -677,7 +663,6 @@
 			req.ifa.ifa_prefixlen = peer.bitlen;
 		} else if (arg <= 3) { /* broadcast, brd */
 			inet_prefix addr;
-			NEXT_ARG();
 			if (brd_len) {
 				duparg(option_broadcast, *argv);
 			}
@@ -694,7 +679,6 @@
 			}
 		} else if (arg == 4) { /* anycast */
 			inet_prefix addr;
-			NEXT_ARG();
 			if (any_len) {
 				duparg(option_anycast, *argv);
 			}
@@ -704,39 +687,22 @@
 			}
 			addattr_l(&req.n, sizeof(req), IFA_ANYCAST, &addr.data, addr.bytelen);
 			any_len = addr.bytelen;
+		} else if (arg == 5) { /* scope */
-		} else if (arg == 5) { /* valid_lft */
-			if (valid_lftp)
-				duparg(option_valid_lft, *argv);
-			NEXT_ARG();
-			valid_lftp = *argv;
-			set_lifetime(&valid_lft, *argv, option_valid_lft);
-		} else if (arg == 6) { /* preferred_lft */
-			if (preferred_lftp)
-				duparg(option_pref_lft, *argv);
-			NEXT_ARG();
-			preferred_lftp = *argv;
-			set_lifetime(&preferred_lft, *argv, option_pref_lft);
-		} else if (arg == 7) { /* scope */
 			uint32_t scope = 0;
-			NEXT_ARG();
 			if (rtnl_rtscope_a2n(&scope, *argv)) {
 				invarg_1_to_2(*argv, "scope");
 			}
 			req.ifa.ifa_scope = scope;
 			scoped = 1;
+		} else if (arg == 6) { /* dev */
-		} else if (arg == 8) { /* dev */
-			NEXT_ARG();
 			d = *argv;
+		} else if (arg == 7) { /* label */
-		} else if (arg == 9) { /* label */
-			NEXT_ARG();
 			l = *argv;
 			addattr_l(&req.n, sizeof(req), IFA_LABEL, l, strlen(l) + 1);
+		} else if (arg == 8) { /* noprefixroute */
-		} else if (arg == 10) { /* noprefixroute */
 			ifa_flags |= IFA_F_NOPREFIXROUTE;
 		} else {
 			/* local (specified or assumed) */
-			if ((int)arg >= 0)
-				NEXT_ARG();
 			if (local_len) {
 				duparg2("local", *argv);
 			}
@@ -797,24 +764,6 @@
 
 	req.ifa.ifa_index = xll_name_to_index(d);
 
-	if (valid_lftp || preferred_lftp) {
-		struct ifa_cacheinfo cinfo = {};
-
-		if (!valid_lft) {
-			fprintf(stderr, "valid_lft is zero\n");
-			return 1;
-		}
-		if (valid_lft < preferred_lft) {
-			fprintf(stderr, "preferred_lft is greater than valid_lft\n");
-			return 1;
-		}
-
-		cinfo.ifa_prefered = preferred_lft;
-		cinfo.ifa_valid = valid_lft;
-		addattr_l(&req.n, sizeof(req), IFA_CACHEINFO, &cinfo,
-			  sizeof(cinfo));
-	}
-
 	if (rtnl_talk(&rth, &req.n, 0, 0, NULL, NULL, NULL) < 0)
 		return 2;
 
--- b/networking/ip.c
+++ a/networking/ip.c
@@ -139,13 +139,11 @@
 //usage:#define ipaddr_trivial_usage
 //usage:       "add|del IFADDR dev IFACE | show|flush [dev IFACE] [to PREFIX]"
 //usage:#define ipaddr_full_usage "\n\n"
+//usage:       "ipaddr add|change|replace|delete dev IFACE IFADDR\n"
-//usage:       "ipaddr add|change|replace|delete dev IFACE [CONFFLAG-LIST] IFADDR\n"
 //usage:       "	IFADDR := PREFIX | ADDR peer PREFIX [broadcast ADDR|+|-]\n"
 //usage:       "		[anycast ADDR] [label STRING] [scope SCOPE]\n"
 //usage:       "	PREFIX := ADDR[/MASK]\n"
 //usage:       "	SCOPE := [host|link|global|NUMBER]\n"
-//usage:       "	CONFFLAG-LIST := [CONFFLAG-LIST] CONFFLAG\n"
-//usage:       "	CONFFLAG := [noprefixroute]\n"
 //usage:       "ipaddr show|flush [dev IFACE] [scope SCOPE] [to PREFIX] [label PATTERN]"
 //usage:
 //--------------123456789.123456789.123456789.123456789.123456789.123456789.123456789.123....79
--- b/networking/libiproute/ipaddress.c
+++ a/networking/libiproute/ipaddress.c
@@ -228,7 +228,6 @@
 {
 	struct ifaddrmsg *ifa = NLMSG_DATA(n);
 	int len = n->nlmsg_len;
-	unsigned int ifa_flags;
 	struct rtattr *rta_tb[IFA_MAX+1];
 
 	if (n->nlmsg_type != RTM_NEWADDR && n->nlmsg_type != RTM_DELADDR)
@@ -245,8 +244,6 @@
 	//memset(rta_tb, 0, sizeof(rta_tb)); - parse_rtattr does this
 	parse_rtattr(rta_tb, IFA_MAX, IFA_RTA(ifa), n->nlmsg_len - NLMSG_LENGTH(sizeof(*ifa)));
 
-	ifa_flags = rta_tb[IFA_FLAGS] ? *(__u32*)RTA_DATA(rta_tb[IFA_FLAGS]) : ifa->ifa_flags;
-
 	if (!rta_tb[IFA_LOCAL])
 		rta_tb[IFA_LOCAL] = rta_tb[IFA_ADDRESS];
 	if (!rta_tb[IFA_ADDRESS])
@@ -256,7 +253,7 @@
 		return 0;
 	if ((G_filter.scope ^ ifa->ifa_scope) & G_filter.scopemask)
 		return 0;
+	if ((G_filter.flags ^ ifa->ifa_flags) & G_filter.flagmask)
-	if ((G_filter.flags ^ ifa_flags) & G_filter.flagmask)
 		return 0;
 	if (G_filter.label) {
 		const char *label;
@@ -334,32 +331,28 @@ static int FAST_FUNC print_addrinfo(const struct sockaddr_nl *who UNUSED_PARAM,
 		);
 	}
 	printf("scope %s ", rtnl_rtscope_n2a(ifa->ifa_scope));
-	if (ifa_flags & IFA_F_SECONDARY) {
-		ifa_flags &= ~IFA_F_SECONDARY;
+	if (ifa->ifa_flags & IFA_F_SECONDARY) {
+		ifa->ifa_flags &= ~IFA_F_SECONDARY;
 		printf("secondary ");
 	}
-	if (ifa_flags & IFA_F_TENTATIVE) {
-		ifa_flags &= ~IFA_F_TENTATIVE;
+	if (ifa->ifa_flags & IFA_F_TENTATIVE) {
+		ifa->ifa_flags &= ~IFA_F_TENTATIVE;
 		printf("tentative ");
 	}
-	if (ifa_flags & IFA_F_DADFAILED) {
-		ifa_flags &= ~IFA_F_DADFAILED;
+	if (ifa->ifa_flags & IFA_F_DADFAILED) {
+		ifa->ifa_flags &= ~IFA_F_DADFAILED;
 		printf("dadfailed ");
 	}
-	if (ifa_flags & IFA_F_DEPRECATED) {
-		ifa_flags &= ~IFA_F_DEPRECATED;
+	if (ifa->ifa_flags & IFA_F_DEPRECATED) {
+		ifa->ifa_flags &= ~IFA_F_DEPRECATED;
 		printf("deprecated ");
 	}
-	if (!(ifa_flags & IFA_F_PERMANENT)) {
+	if (!(ifa->ifa_flags & IFA_F_PERMANENT)) {
 		printf("dynamic ");
 	} else
-		ifa_flags &= ~IFA_F_PERMANENT;
-	if (ifa_flags & IFA_F_NOPREFIXROUTE) {
-		ifa_flags &= ~IFA_F_NOPREFIXROUTE;
-		printf("noprefixroute ");
-	}
-	if (ifa_flags)
-		printf("flags %02x ", ifa_flags);
+		ifa->ifa_flags &= ~IFA_F_PERMANENT;
+	if (ifa->ifa_flags)
+		printf("flags %02x ", ifa->ifa_flags);
 	if (rta_tb[IFA_LABEL])
 		fputs_stdout((char*)RTA_DATA(rta_tb[IFA_LABEL]));
 	if (rta_tb[IFA_CACHEINFO]) {
@@ -616,7 +609,7 @@
 	/* If you add stuff here, update ipaddr_full_usage */
 	static const char option[] ALIGN1 =
 		"peer\0""remote\0""broadcast\0""brd\0"
+		"anycast\0""scope\0""dev\0""label\0""local\0";
-		"anycast\0""scope\0""dev\0""label\0""noprefixroute\0""local\0";
 #define option_peer      option
 #define option_broadcast (option           + sizeof("peer") + sizeof("remote"))
 #define option_anycast   (option_broadcast + sizeof("broadcast") + sizeof("brd"))
@@ -635,7 +628,6 @@
 	int brd_len = 0;
 	int any_len = 0;
 	bool scoped = 0;
-	unsigned int ifa_flags = 0;
 
 	memset(&req, 0, sizeof(req));
 
@@ -647,7 +639,7 @@
 	while (*argv) {
 		unsigned arg = index_in_strings(option, *argv);
 		/* if search fails, "local" is assumed */
+		if ((int)arg >= 0)
-		if ((int)arg >= 0 && arg != 8)
 			NEXT_ARG();
 
 		if (arg <= 1) { /* peer, remote */
@@ -700,8 +692,6 @@
 		} else if (arg == 7) { /* label */
 			l = *argv;
 			addattr_l(&req.n, sizeof(req), IFA_LABEL, l, strlen(l) + 1);
-		} else if (arg == 8) { /* noprefixroute */
-			ifa_flags |= IFA_F_NOPREFIXROUTE;
 		} else {
 			/* local (specified or assumed) */
 			if (local_len) {
@@ -717,11 +707,6 @@
 		argv++;
 	}
 
-	if (ifa_flags <= 0xff)
-		req.ifa.ifa_flags = ifa_flags;
-	else
-		addattr32(&req.n, sizeof(req), IFA_FLAGS, ifa_flags);
-
 	if (!d) {
 		/* There was no "dev IFACE", but we need that */
 		bb_simple_error_msg_and_die("need \"dev IFACE\"");
