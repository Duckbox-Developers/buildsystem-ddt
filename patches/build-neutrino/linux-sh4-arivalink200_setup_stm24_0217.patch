*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/net/stmmac/stmmac_mdio.c	2011-11-24 22:22:25.000000000 +0200
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c	2011-11-24 23:33:55.732873713 +0200
***************
*** 169,174 ****
--- 169,175 ----
  	priv->mii = new_bus;
  
  	found = 0;
+ 
  	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
***************
*** 191,202 ****
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
! 			    (priv->plat->phy_addr == -1))
  				priv->plat->phy_addr = addr;
  
- 			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
- 				(priv->plat->phy_addr == addr);
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";
--- 192,215 ----
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 
! 			act = 0;
! 
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && (/*(priv->plat->phy_addr == -1) ||*/
! 					(phydev->phy_id == 0x0181b880) || // Davicom DM9161E
! 					(phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
! 					(phydev->phy_id == 0x00181b80) || // Davicom DM9131
! 					(phydev->phy_id == 0x1c040011) || // STe100p
! 					(phydev->phy_id == 0x00061c50) || // STe101p
!					(phydev->phy_id == 0x00061c52) || // STe101p-1A
! 					(phydev->phy_id == 0x00008201) || // RTL8201CP
! 					(phydev->phy_id == 0x0007c0f1) || // Pingulux
! 					(phydev->phy_id == 0x001cc912)))  // RTL821x
! 			{
  				priv->plat->phy_addr = addr;
+ 				act=1;
+ 			}
  
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";
*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/net/stmmac/dwmac_lib.c	2011-11-24 22:22:25.000000000 +0200
--- linux-sh4/drivers/net/stmmac/dwmac_lib.c	2011-11-24 23:33:55.732873713 +0200
@@ -210,7 +210,7 @@
 	}
 	/* Optional hardware blocks, interrupts should be disabled */
 	if (unlikely(intr_status &
-		     (DMA_STATUS_GPI | DMA_STATUS_GMI | DMA_STATUS_GLI)))
+		     (DMA_STATUS_GPI | DMA_STATUS_GMI | DMA_STATUS_GLI)) && printk_ratelimit())
 		pr_info("%s: unexpected status %08x\n", __func__, intr_status);
 	/* Clear the interrupt by writing a logic 1 to the CSR5[15-0] */
 	writel((intr_status & 0x1ffff), ioaddr + DMA_STATUS);
diff -crp linux-sh4/drivers/net/phy/realtek.c linux-sh4/drivers/net/phy/realtek.c
*** linux-sh4/drivers/net/phy/realtek.c	2009-12-03 04:51:21.000000000 +0100
--- linux-sh4/drivers/net/phy/realtek.c	2014-07-10 17:43:32.815015201 +0200
*************** static int rtl821x_config_intr(struct ph
*** 48,53 ****
--- 48,65 ----
  	return err;
  }
  
+ /* RTL8201CP */
+ static struct phy_driver rtl8201cp_driver = {
+ 	.phy_id         = 0x00008201,
+ 	.name           = "RTL8201CP Ethernet",
+ 	.phy_id_mask    = 0x0000ffff,
+ 	.features       = PHY_BASIC_FEATURES,
+ 	.flags          = PHY_HAS_INTERRUPT,
+ 	.config_aneg    = &genphy_config_aneg,
+ 	.read_status    = &genphy_read_status,
+ 	.driver         = { .owner = THIS_MODULE,},
+ };
+ 
  /* RTL8211B */
  static struct phy_driver rtl821x_driver = {
  	.phy_id		= 0x001cc912,
*************** static int __init realtek_init(void)
*** 66,72 ****
--- 78,89 ----
  {
  	int ret;
  
+ 	ret = phy_driver_register(&rtl8201cp_driver);
+ 	if (ret < 0)
+ 		return -ENODEV;
  	ret = phy_driver_register(&rtl821x_driver);
+ 	if (ret < 0)
+ 		return -ENODEV;
  
  	return ret;
  }
diff -crp linux-sh4/arch/sh/kernel/setup.c linux-sh4/arch/sh/kernel/setup.c
*** linux-sh4/arch/sh/kernel/setup.c	2012-09-14 12:37:42.000000000 +0200
--- linux-sh4/arch/sh/kernel/setup.c	2012-09-14 13:22:11.000000000 +0200
*************** void __init setup_arch(char **cmdline_p)
*** 389,394 ****
--- 389,418 ----
  #endif
  #endif
  
+ 	{
+ 		/* spider: remove bigphysarea allocation from command line */
+ 		int i;
+ 		int command_line_len = strlen(command_line);
+ 
+ 		for(i = 0; i < (command_line_len-11); i++)
+ 		{
+ 			if(!strncmp(command_line + i + 1, "bigphysarea", 11))
+ 			{
+ 				// search for next pos
+ 				int k;
+ 				int pos=command_line_len;
+ 				for(k=i+1; k<command_line_len; k++)
+ 					if(command_line[k]==' ') {
+ 						pos=k;
+ 						break;
+ 					}
+ 				memmove(command_line+i, command_line+pos, command_line_len-pos);
+ 				memset(&command_line[command_line_len-(pos-i)], '\0', pos-i);
+ 				break;
+ 			}
+ 		}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;
diff -urN linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/boards/arivalink200/mach.c linux-sh4/arch/sh/boards/arivalink200/mach.c
--- linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/boards/arivalink200/mach.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-sh4/arch/sh/boards/arivalink200/mach.c	2011-07-03 17:37:41.000000000 +0200
@@ -0,0 +1,60 @@
+/*
+ * arch/sh/boards/st/mb442/mach.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * Machine vector for the STMicroelectronics STb7100 Reference board.
+ */
+
+#include <linux/init.h>
+#include <linux/irq.h>
+#include <asm/system.h>
+#include <asm/io.h>
+#include <asm/machvec.h>
+#include <asm/irq-stx7100.h>
+
+static void __iomem *mb442_ioport_map(unsigned long port, unsigned int size)
+{
+#ifdef CONFIG_BLK_DEV_ST40IDE
+	/*
+	 * The IDE driver appears to use memory addresses with IO port
+	 * calls. This needs fixing.
+	 */
+	return (void __iomem *)port;
+#endif
+
+	/* However picking somewhere safe isn't as easy as you might think.
+	 * I used to use external ROM, but that can cause problems if you are
+	 * in the middle of updating Flash. So I'm now using the processor core
+	 * version register, which is guaranted to be available, and non-writable.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init mb442_init_irq(void)
+{
+	/* enable individual interrupt mode for externals */
+	plat_irq_setup_pins(IRQ_MODE_IRQ);
+
+	/* Set the ILC to route external interrupts to the the INTC */
+	/* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
+	/* Inputs sys-irq2 and 3 are unused (pulled high) */
+	ilc_route_external(ILC_EXT_IRQ0, 4, 0);		/* SMC Ethernet */
+	ilc_route_external(ILC_EXT_IRQ1, 5, 0);		/* ATA */
+	ilc_route_external(ILC_EXT_IRQ2, 6, 0);		/* Unused */
+	ilc_route_external(ILC_EXT_MDINT, 7, 0);	/* STe100 PHY */
+}
+
+void __init mb442_setup(char**);
+
+static struct sh_machine_vector mv_mb442 __initmv = {
+	.mv_name		= "OHD-500 board",
+	.mv_setup		= mb442_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= mb442_init_irq,
+	.mv_ioport_map		= mb442_ioport_map,
+};
diff -urN linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/boards/arivalink200/Makefile linux-sh4/arch/sh/boards/arivalink200/Makefile
--- linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/boards/arivalink200/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ linux-sh4/arch/sh/boards/arivalink200/Makefile	2011-07-03 17:37:41.000000000 +0200
@@ -0,0 +1,5 @@
+#
+# Makefile for STMicroelectronics STb7100 Reference board
+#
+
+obj-y := setup.o mach.o
diff -urN linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/boards/arivalink200/setup.c linux-sh4/arch/sh/boards/arivalink200/setup.c
--- linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/boards/arivalink200/setup.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-sh4/arch/sh/boards/arivalink200/setup.c	2011-07-03 17:37:41.000000000 +0200
@@ -0,0 +1,177 @@
+/*
+ * arch/sh/boards/st/mb442/setup.c
+ *
+ * Copyright (C) 2005 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STb7100 Reference board support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/lirc.h>
+#include <linux/phy.h>
+#include <linux/delay.h>
+#include <linux/spi/spi.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/physmap.h>
+#include <linux/stm/platform.h>
+#include <linux/stm/stx7100.h>
+#include <asm/irl.h>
+#include <linux/bpa2.h>
+
+
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers","v4l2-coded-video-buffers", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "LMI_VID",
+		.start = 0x10800000,
+		.size  = 0x03800000,
+		.flags = 0,
+		.aka   = LMI_VID_partalias
+	},
+	{
+		.name  = "LMI_SYS",
+		.start = 0,
+		.size  = 0x02000000,
+		.flags = 0,
+		.aka   = LMI_SYS_partalias
+	}
+};
+
+void __init mb442_setup(char** cmdline_p)
+{
+	printk("OHD-500 board initialisation\n");
+
+	stx7100_early_device_init();
+
+	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
+			.hw_flow_control = 0,
+			.is_console = 1, });
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+static struct mtd_partition mb442_physmap_flash_partitions[] = {
+	{
+		.name 		= "Boot firmware 0x00100000-0x00020000",
+		.offset 	= 0x00000000,
+		.size		= 0x00100000,
+//		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+	{
+		.name		= "Kernel        0x00100000-0x00200000",
+		.offset		= 0x00100000,
+		.size		= 0x00200000,
+	},
+	{	.name		= "Root FS       0x00300000-0x01d00000",
+		.offset		= 0x00300000,
+		.size		= 0x01d00000,
+//		.mask_flags	= MTD_WRITEABLE,
+	},
+//	{
+//		.name		= "nor.root",
+//		.offset		= 0x002A0000,
+//		.size		= MTDPART_SIZ_FULL,
+//	},
+//	{
+//		.name		= "nor.kernel_root",
+//		.offset		= 0x00060000,
+//		.size		= 0x03FA0000,
+//	},
+};
+
+static struct physmap_flash_data mb442_physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(mb442_physmap_flash_partitions),
+	.parts		= mb442_physmap_flash_partitions
+};
+
+static struct platform_device mb442_physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start		= 0x00000000,
+			.end		= 0x04000000 - 1,
+			.flags		= IORESOURCE_MEM,
+		}
+	},
+
+	.dev		= {
+		.platform_data	= &mb442_physmap_flash_data,
+	},
+
+};
+
+static int mb442_phy_reset(void* bus)
+{
+	return 1;
+}
+
+#define STMMAC_PHY_ADDR 3
+static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
+	[STMMAC_PHY_ADDR] = IRL3_IRQ,
+};
+
+static struct stmmac_mdio_bus_data mb442_phy_private_data = {
+	.bus_id = 0,
+	.phy_mask = 1,
+	.phy_reset = &mb442_phy_reset,
+
+};
+
+static struct platform_device mb442_phy_device = {
+	.name		= "stmmacphy",
+	.id		= 0,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+                {
+			.name	= "phyirq",
+			.start	= -1,
+			.end	= -1,
+			.flags	= IORESOURCE_IRQ,
+		},
+	},
+	.dev.platform_data = &mb442_phy_private_data,
+};
+
+static struct platform_device *mb442_devices[] __initdata = {
+	&mb442_physmap_flash,
+	&mb442_phy_device,
+};
+
+static int __init mb442_device_init(void)
+{
+	//stx7100_configure_sata();
+	stx7100_configure_ssc_i2c(0, NULL);
+	stx7100_configure_ssc_i2c(1, NULL);
+	stx7100_configure_ssc_i2c(2, NULL);
+
+	stx7100_configure_usb();
+
+	stx7100_configure_lirc(&(struct stx7100_lirc_config) {
+			.rx_mode = stx7100_lirc_rx_mode_ir,
+			.tx_enabled = 0,
+			.tx_od_enabled = 0, });
+
+	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
+			.mode = stx7100_ethernet_mode_mii,
+			.ext_clk = 0,
+			.phy_bus = 0,
+			.phy_addr = STMMAC_PHY_ADDR,
+			.mdio_bus_data = &mb442_phy_private_data,
+		});
+
+	return platform_add_devices(mb442_devices,
+			ARRAY_SIZE(mb442_devices));
+}
+device_initcall(mb442_device_init);
diff -urN linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/boards/Kconfig linux-sh4/arch/sh/boards/Kconfig
--- linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/boards/Kconfig	2011-07-17 20:30:23.000000000 +0200
+++ linux-sh4/arch/sh/boards/Kconfig	2011-07-17 23:23:34.590734928 +0200
@@ -702,6 +702,17 @@
 	  Select this option to enable a simple driver for the front
 	  pannel button on the mb705.
 
+comment "Ferguson Boards"
+
+config SH_ARIVALINK200
+	bool "arivalink200: STb7100 Ferguson board"
+	depends on CPU_SUBTYPE_STX7100
+	default n
+	help
+	  Select STb7100 Ariva@link200 if configuring for an
+	  STMicroelectronics STb7100 Reference Board (product code:
+	  STb7100-REF). This is sometimes referred to as the CoCo board.
+
 endmenu
 
 source "arch/sh/boards/mach-r2d/Kconfig"
diff -urN linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/Makefile linux-sh4/arch/sh/Makefile
--- linux-sh4-2.6.32.61_stm24_0215.org/arch/sh/Makefile	2011-07-17 20:30:23.000000000 +0200
+++ linux-sh4/arch/sh/Makefile	2011-07-17 23:24:40.798578590 +0200
@@ -182,6 +182,7 @@
 machdir-$(CONFIG_SH_ST_MB837)			+= mach-mb837
 machdir-$(CONFIG_SH_ST_MB839)			+= mach-mb839
 machdir-$(CONFIG_SH_ST_MB903)			+= mach-mb903
+machdir-$(CONFIG_SH_ARIVALINK200)		+= arivalink200
 
 ifneq ($(machdir-y),)
 core-y	+= $(addprefix arch/sh/boards/, \
--- linux-sh4/drivers/stm/stx7100_comms.c.orig	2011-01-09 14:19:17.000000000 +0100
+++ linux-sh4/drivers/stm/stx7100_comms.c	2011-01-09 14:19:52.000000000 +0100
@@ -36,34 +36,25 @@
 	[1] = {
 		.gpios_num = 4,
 		.gpios = (struct stm_pad_gpio []) {
-			STM_PAD_PIO_OUT(1, 0, 1),	/* TX */
-			STM_PAD_PIO_IN(1, 1, -1),	/* RX */
-			STM_PAD_PIO_IN_NAMED(1, 4, -1, "CTS"),
-			STM_PAD_PIO_OUT_NAMED(1, 5, 1, "RTS"),
+			STM_PAD_PIO_OUT(5, 0, 1),	/* TX */
+			STM_PAD_PIO_IN(5, 1, -1),	/* RX */
+			STM_PAD_PIO_IN_NAMED(5, 2, -1, "CTS"),
+			STM_PAD_PIO_OUT_NAMED(5, 3, 1, "RTS"),
 		},
 	},
 	[2] = {
 		.gpios_num = 4,
 		.gpios = (struct stm_pad_gpio []) {
 			STM_PAD_PIO_OUT(4, 3, 1),	/* TX */
 			STM_PAD_PIO_IN(4, 2, -1),	/* RX */
 			STM_PAD_PIO_IN_NAMED(4, 4, -1, "CTS"),
 			STM_PAD_PIO_OUT_NAMED(4, 5, 1, "RTS"),
 		},
 		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SCIF_PIO_OUT_EN = 0 */
 			STM_PAD_SYS_CFG(7, 0, 0, 0),
 		},
 	},
-	[3] = {
-		.gpios_num = 4,
-		.gpios = (struct stm_pad_gpio []) {
-			STM_PAD_PIO_OUT(5, 0, 1),	/* TX */
-			STM_PAD_PIO_IN(5, 1, -1),	/* RX */
-			STM_PAD_PIO_IN_NAMED(5, 2, -1, "CTS"),
-			STM_PAD_PIO_OUT_NAMED(5, 3, 1, "RTS"),
-		},
-	},
 };
 
@@ -240,12 +240,12 @@
 			STM_PAD_PIO_BIDIR_NAMED(3, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(3, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC1_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 2, 2, 0),
 			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+			//STM_PAD_SYS_CFG(7, 10, 10, 0),
 		},
 	},
 	[2] = {
@@ -344,7 +344,7 @@
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
diff -urN linux-sh4-2.6.32.61_stm24_0215.org/drivers/usb/core/hub.c linux-sh4/drivers/usb/core/hub.c
--- linux-sh4-2.6.32.61_stm24_0215.org/drivers/usb/core/hub.c	2011-08-16 07:36:25.947316046 +0200
+++ linux-sh4/drivers/usb/core/hub.c	2011-08-16 07:24:47.494815389 +0200
@@ -1051,7 +1051,11 @@
 				dev_warn(hub_dev,
 					"insufficient power available "
 					"to use all downstream ports\n");
+#if defined(CONFIG_SH_ARIVALINK200)
+			hub->mA_per_port = 500;
+#else
 			hub->mA_per_port = 100;		/* 7.2.1.1 */
+#endif
 		}
 	} else {	/* Self-powered external hub */
 		/* FIXME: What about battery-powered external hubs that
--- linux-sh4/drivers/stm/stx7100_hispeed.c
+++ linux-sh4/drivers/stm/stx7100_hispeed.c
@@ -193,6 +193,12 @@
 	 */
 	stx7100_usb_pwr_gpio = stm_pad_gpio_request_output(state, "PWR", 1);
 	BUG_ON(stx7100_usb_pwr_gpio == STM_GPIO_INVALID);
+
+	//reset usb on boot - some DVB-T dongles (as102) need it to work properly.
+	gpio_set_value(stx7100_usb_pwr_gpio, 0);
+	mdelay(2000);
+	gpio_set_value(stx7100_usb_pwr_gpio, 1);
+	mdelay(600);
 
 	return 0;
 }
