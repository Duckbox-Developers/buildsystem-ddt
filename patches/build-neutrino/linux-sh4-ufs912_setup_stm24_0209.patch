*** a/drivers/mtd/chips/cfi_probe.c	2011-01-02 21:05:30.000000000 +0100
--- b/cfi_probe.c	2011-01-05 20:38:36.087467593 +0100
***************
*** 221,226 ****
--- 221,242 ----
  	for (i=0; i<cfi->cfiq->NumEraseRegions; i++) {
  		cfi->cfiq->EraseRegionInfo[i] = le32_to_cpu(cfi->cfiq->EraseRegionInfo[i]);
  
+ 	/* kdhong */
+ 	printk( "CFI MFR = %x DEV = %x\n", cfi->mfr, cfi->id );
+ 
+ 	if( cfi->mfr == 0x00c2 && cfi->id == 0x227e )
+ 	{
+ 		int devsize = (1 << cfi->cfiq->DevSize) * cfi->interleave;
+ 
+ 		printk( "devsize = %x\n", devsize );
+ 
+ 		if( devsize == 0x400000 )
+ 		{
+ 			cfi->cfiq->EraseRegionInfo[i] = 0x100003f;
+ 		}
+ 	}
+ 	/* kdhong */
+ 
  #ifdef DEBUG_CFI
  		printk("  Erase Region #%d: BlockSize 0x%4.4X bytes, %d blocks\n",
  		       i, (cfi->cfiq->EraseRegionInfo[i] >> 8) & ~0xff,
--- a/drivers/stm/stx7111_comms.c.org	2011-07-02 05:58:19.000000000 -0700
+++ b/drivers/stm/stx7111_comms.c	2011-07-03 05:30:59.771608244 -0700
@@ -211,10 +211,17 @@
 			STM_PAD_PIO_BIDIR_NAMED(2, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(2, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 1,
+		.sysconfs_num = 5,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC0_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 1, 1, 0),
+
+			/* some additional sysconfig settings to enable i2c, cic and cec */
+			STM_PAD_SYS_CFG(5, 0, 0, 1), // cic
+			STM_PAD_SYS_CFG(5, 17, 17, 1), // cic
+			STM_PAD_SYS_CFG(5, 8, 8, 1), //cec
+			STM_PAD_SYS_CFG(7, 15, 15, 1), //i2c
+
 			/* spi_boot_not_comm = 0 should be set here... */
 			/* This is a signal from SPI block */
 			/* Hope this is set correctly by default */
 
--- a/arch/sh/boards/mach-mb618/setup.c.org	2012-03-08 08:58:51.000000000 -0800
+++ b/arch/sh/boards/mach-mb618/setup.c	2012-03-09 08:48:35.000000000 -0800
@@ -17,35 +17,78 @@
 #include <linux/phy.h>
 #include <linux/i2c.h>
 #include <linux/gpio.h>
+#include <linux/stm/gpio.h>
 #include <linux/gpio_keys.h>
 #include <linux/input.h>
 #include <linux/irq.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7111.h>
 #include <linux/stm/emi.h>
-#include <linux/stm/pci-glue.h>
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
+#include <linux/stm/nand.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
-#include <linux/spi/spi.h>
-#include <linux/spi/flash.h>
 #include <asm/irq-ilc.h>
 #include <asm/irl.h>
 #include <sound/stm.h>
 #include <mach/common.h>
+#include <linux/bpa2.h>
 
+#define MB618_PIO_PHY_RESET stm_gpio(4, 4)
 
-
-/* Whether the hardware supports NOR or NAND Flash depends on J34.
- * In position 1-2 CSA selects NAND, in position 2-3 is selects NOR.
- * Note that J30A must be in position 2-3 to select the on board Flash
- * (both NOR and NAND).
- */
-#define FLASH_NOR
-#define MB618_PIO_FLASH_VPP stm_gpio(3, 4)
-
-
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+ 
+#ifdef CONFIG_BPA2_DIRECTFBOPTIMIZED
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb) 
+0x47600000 - 0x483FFFFF - bigphys ( 14mb (0x00E00000))
+0x48400000 - 0x4FFFFFFF - lmi_io  ( 124mb (0x07C00000))
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x47600000,
+ 	    .size  = 0x07C00000, /* 124 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    }, 
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x4F200000,
+ 	    .size  = 0x00E00000, /* 14 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    }, 
+ };
+#else
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb) 
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    }, 
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x06000000, /* 96 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    }, 
+ };
+#endif
 
 static void __init mb618_setup(char** cmdline_p)
 {
@@ -53,119 +70,85 @@
 
 	stx7111_early_device_init();
 
-	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
+	stx7111_configure_asc(1, &(struct stx7111_asc_config) {
 			.hw_flow_control = 1,
 			.is_console = 1, });
-	stx7111_configure_asc(3, &(struct stx7111_asc_config) {
-			.hw_flow_control = 1,
-			.is_console = 0, });
-}
-
-
-
-static struct platform_device mb618_leds = {
-	.name = "leds-gpio",
-	.id = -1,
-	.dev.platform_data = &(struct gpio_led_platform_data) {
-		.num_leds = 2,
-		.leds = (struct gpio_led[]) {
-			{
-				.name = "HB green",
-				.default_trigger = "heartbeat",
-				.gpio = stm_gpio(6, 0),
-			}, {
-				.name = "HB red",
-				.gpio = stm_gpio(6, 1),
-			},
-		},
-	},
-};
-
 
+  	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
 
-static struct gpio_keys_button mb618_buttons[] = {
+// Nor Flash Configuration
+static struct mtd_partition nor_parts[] = {
 	{
-		.code = BTN_0,
-		.gpio = stm_gpio(6, 2),
-		.desc = "SW2",
-	}, {
-		.code = BTN_1,
-		.gpio = stm_gpio(6, 3),
-		.desc = "SW3",
-	}, {
-		.code = BTN_2,
-		.gpio = stm_gpio(6, 4),
-		.desc = "SW4",
+		.name   = "NOR U-BOOT     0xA000.0000-0xA007.FFFF (512KB)",
+		.size   = 0x00080000,
+		.offset = 0
 	}, {
-		.code = BTN_3,
-		.gpio = stm_gpio(6, 5),
-		.desc = "SW5",
-	},
-};
-
-static struct platform_device mb618_button_device = {
-	.name = "gpio-keys",
-	.id = -1,
-	.num_resources = 0,
-	.dev.platform_data = &(struct gpio_keys_platform_data) {
-		.buttons = mb618_buttons,
-		.nbuttons = ARRAY_SIZE(mb618_buttons),
-	},
+		.name   = "NOR R00T       0xA008.0000-0xA03F.FFFF (3,5MB)",
+		.size   = MTDPART_SIZ_FULL,
+		.offset = MTDPART_OFS_APPEND
+	}
 };
 
-
-
-#ifdef FLASH_NOR
-/* J34 must be in the 1-2 position to enable NOR Flash */
-static void mb618_nor_set_vpp(struct map_info *info, int enable)
-{
-	gpio_set_value(MB618_PIO_FLASH_VPP, enable);
-}
-
-static struct platform_device mb618_nor_flash = {
+static struct platform_device mb618_nor_device = {
 	.name		= "physmap-flash",
 	.id		= -1,
 	.num_resources	= 1,
 	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 32*1024*1024),
+		STM_PLAT_RESOURCE_MEM(0, 4*1024*1024),
 	},
 	.dev.platform_data = &(struct physmap_flash_data) {
 		.width		= 2,
-		.set_vpp	= mb618_nor_set_vpp,
-		.nr_parts	= 3,
-		.parts		=  (struct mtd_partition []) {
-			{
-				.name = "NOR Flash 1",
-				.size = 0x00080000,
-				.offset = 0x00000000,
-			}, {
-				.name = "NOR Flash 2",
-				.size = 0x00200000,
-				.offset = MTDPART_OFS_NXTBLK,
-			}, {
-				.name = "NOR Flash 3",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
+		.nr_parts	= ARRAY_SIZE(nor_parts),
+		.parts		= nor_parts
 	},
 };
+
+// Nand Flash Configuration
+static struct mtd_partition nand_parts[] = {
+#ifdef ORIGINAL_MTD
+	 {
+	 .name = "NAND KERNEL    0x0000.0000-0x002F.FFFF",
+	 .size = 0x300000,
+	 .offset = 0
+	 }, {
+	 .name = "NAND ROOT      0x0030.0000-0x027F.FFFF",
+	 .size = 0x2500000,
+	 .offset = 0x300000
+	 }, {
+	 .name = "NAND CONFIG    0x0280.0000-0x04FF.FFFF",
+	 .size = 0x2800000,
+	 .offset = 0x2800000
+	 }, {
+	 .name = "NAND DATA      0x0500.0000-0x07FF.FFFF",
+	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
+	 .offset = 0x05000000
+	 }
 #else
-struct stm_nand_bank_data mb618_nand_flash = {
-	.csn		= 0,
+	 {
+	 .name   = "NAND KERNEL    0x0000.0000-0x003F.FFFF (  4MB)",
+	 .size   = 0x400000,
+	 .offset = 0
+	 }, {
+	 .name   = "NAND FW        0x0040.0000-0x00BF.FFFF (  8MB)",
+	 .size   = 0x800000,
+	 .offset = MTDPART_OFS_APPEND
+	 }, {
+	 .name   = "NAND ROOT      0x00C0.0000-0x04BF.FFFF ( 64MB)",
+	 .size   = 0x4000000,
+	 .offset = MTDPART_OFS_APPEND
+	 }, {
+	 .name   = "NAND DATA      0x04C0.0000-0x07FF.FFFF ( 52MB)",
+	 .size   = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
+	 .offset = MTDPART_OFS_APPEND
+	 }
+#endif
+};
+static struct stm_nand_bank_data nand_bank_data = {
+	.csn		= 1,
+	.nr_partitions	= ARRAY_SIZE(nand_parts),
+	.partitions	= nand_parts,
 	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
-	.nr_partitions	= 2,
-	.partitions	= (struct mtd_partition []) {
-		{
-			.name	= "NAND Flash 1",
-			.offset	= 0,
-			.size 	= 0x00800000
-		}, {
-			.name	= "NAND Flash 2",
-			.offset = MTDPART_OFS_NXTBLK,
-			.size	= MTDPART_SIZ_FULL
-		},
-	},
 	.timing_data	= &(struct stm_nand_timing_data) {
 		.sig_setup	= 50,		/* times in ns */
 		.sig_hold	= 50,
@@ -171,37 +154,21 @@
 		.sig_hold	= 50,
 		.CE_deassert	= 0,
 		.WE_to_RBn	= 100,
-		.wr_on		= 20,
-		.wr_off		= 50,
-		.rd_on		= 20,
-		.rd_off		= 50,
+		.wr_on		= 10,
+		.wr_off		= 30,
+		.rd_on		= 10,
+		.rd_off		= 30,
		.chip_delay	= 50,		/* in us */
 	},
+	.emi_withinbankoffset	= 0,
 };
-#endif
 
-/* Serial Flash (Board Rev D and later) */
-static struct spi_board_info mb618_serial_flash = {
-	.modalias       = "m25p80",
-	.bus_num        = 0,
-	.chip_select    = stm_gpio(6, 7),
-	.max_speed_hz   = 7000000,
-	.mode           = SPI_MODE_3,
-	.platform_data  = &(struct flash_platform_data) {
-		.name = "m25p80",
-		.type = "m25p80",
-		.nr_parts	= 2,
-		.parts = (struct mtd_partition []) {
-			{
-				.name = "Serial Flash 1",
-				.size = 0x00080000,
-				.offset = 0,
-			}, {
-				.name = "Serial Flash 2",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
+static struct platform_device mb618_nand_device = {
+	.name		= "stm-nand-emi",
+	.dev.platform_data = &(struct stm_plat_nand_emi_data){
+		.nr_banks	= 1,
+		.banks		= &nand_bank_data,
+		.emi_rbn_gpio	= -1,
 	},
 };
 
@@ -216,13 +183,13 @@
 	return 1;
 }
 
-static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
+static struct stmmac_mdio_bus_data mb618_phy_private_data = {
 	.bus_id = 0,
 	.phy_reset = mb618_phy_reset,
 	.phy_mask = 0,
 };
 
-static struct platform_device epld_device = {
+static struct platform_device mb618_epld_device = {
 	.name		= "epld",
 	.id		= -1,
 	.num_resources	= 1,
@@ -239,129 +206,39 @@
 	},
 };
 
-
-
-static struct stm_plat_pci_config mb618_pci_config = {
-	/* We don't bother with INT[BCD] as they are shared with the ssc
-	 * J20-A must be removed, J20-B must be 5-6 */
-	.pci_irq = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_UNUSED,
-		[2] = PCI_PIN_UNUSED,
-		[3] = PCI_PIN_UNUSED
-	},
-	.serr_irq = PCI_PIN_DEFAULT, /* J32-F fitted */
-	.idsel_lo = 30,
-	.idsel_hi = 30,
-	.req_gnt = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_UNUSED,
-		[2] = PCI_PIN_UNUSED,
-		[3] = PCI_PIN_UNUSED
-	},
-	.pci_clk = 33333333,
-	.pci_reset_gpio = -EINVAL,	/* Reset done by EPLD on power on */
-};
-
-int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
-{
-       /* We can use the standard function on this board */
-       return stx7111_pcibios_map_platform_irq(&mb618_pci_config, pin);
-}
-
 static struct platform_device *mb618_devices[] __initdata = {
-	&mb618_leds,
-	&epld_device,
-#ifdef FLASH_NOR
-	&mb618_nor_flash,
-#endif
-	&mb618_button_device,
-};
-
-/* SCART switch simple control */
-
-/* Enable CVBS output to both (TV & VCR) SCART outputs */
-static int mb618_scart_audio_init(struct i2c_client *client, void *priv)
-{
-	const char cmd[] = { 0x2, 0x11 };
-	int cmd_len = sizeof(cmd);
-
-	return i2c_master_send(client, cmd, cmd_len) != cmd_len;
-}
-
-/* Audio on SCART outputs control */
-static struct i2c_board_info mb618_scart_audio __initdata = {
-	I2C_BOARD_INFO("snd_conv_i2c", 0x4b),
-	.type = "STV6417",
-	.platform_data = &(struct snd_stm_conv_i2c_info) {
-		.group = "Analog Output",
-		.source_bus_id = "snd_pcm_player.1",
-		.channel_from = 0,
-		.channel_to = 1,
-		.format = SND_STM_FORMAT__I2S |
-				SND_STM_FORMAT__SUBFRAME_32_BITS,
-		.oversampling = 256,
-		.init = mb618_scart_audio_init,
-		.enable_supported = 1,
-		.enable_cmd = (char []){ 0x01, 0x09 },
-		.enable_cmd_len = 2,
-		.disable_cmd = (char []){ 0x01, 0x00 },
-		.disable_cmd_len = 2,
-	},
+	&mb618_epld_device,
+	&mb618_nor_device,
+	&mb618_nand_device,
 };
 
 static int __init mb618_devices_init(void)
 {
-	int peripherals_i2c_bus;
-
-	stx7111_configure_pci(&mb618_pci_config);
-
-	stx7111_configure_pwm(&(struct stx7111_pwm_config) {
-			.out0_enabled = 1,
-			.out1_enabled = 0, });
-
-	stx7111_configure_ssc_spi(0, NULL);
+	stx7111_configure_ssc_i2c(0);
 	stx7111_configure_ssc_i2c(1); /* J12=1-2, J16=1-2 */
-	peripherals_i2c_bus = stx7111_configure_ssc_i2c(2);
+	stx7111_configure_ssc_i2c(2);
 	stx7111_configure_ssc_i2c(3);
 
 	stx7111_configure_usb(&(struct stx7111_usb_config) {
 			.invert_ovrcur = 1, });
 
+	gpio_request(MB618_PIO_PHY_RESET, "PHY_RESET");
+	gpio_direction_output(MB618_PIO_PHY_RESET, STM_GPIO_DIRECTION_OUT);
+	gpio_set_value(MB618_PIO_PHY_RESET, 1);
+
 	stx7111_configure_ethernet(&(struct stx7111_ethernet_config) {
 			.mode = stx7111_ethernet_mode_mii,
 			.ext_clk = 0,
 			.phy_bus = 0,
 			.phy_addr = -1,
-			.mdio_bus_data = &stmmac_mdio_bus,
+			.mdio_bus_data = &mb618_phy_private_data,
 		});
 
-	stx7111_configure_lirc(&(struct stx7111_lirc_config) {
-#ifdef CONFIG_LIRC_STM_UHF
-			.rx_mode = stx7111_lirc_rx_mode_uhf,
-#else
-			.rx_mode = stx7111_lirc_rx_mode_ir,
-#endif
-			.tx_enabled = 1,
-			.tx_od_enabled = 0, });
-
-	gpio_request(MB618_PIO_FLASH_VPP, "Flash VPP");
-	gpio_direction_output(MB618_PIO_FLASH_VPP, 0);
-
-	i2c_register_board_info(peripherals_i2c_bus, &mb618_scart_audio, 1);
-	spi_register_board_info(&mb618_serial_flash, 1);
-
-#ifndef FLASH_NOR
 	stx7111_configure_nand(&(struct stm_nand_config) {
 			.driver = stm_nand_flex,
 			.nr_banks = 1,
-			.banks = &mb618_nand_flash,
-			.rbn.flex_connected = 1,});
-
-	/* The MTD NAND code doesn't understand the concept of VPP,
-	 * (or hardware write protect) so permanently enable it. */
-	gpio_direction_output(MB618_PIO_FLASH_VPP, 1);
-#endif
+			.banks = &nand_bank_data,
+			.rbn.flex_connected = 0,});
 
 	return platform_add_devices(mb618_devices, ARRAY_SIZE(mb618_devices));
 }
@@ -405,7 +282,7 @@
 	const int version_offset = 0;
 	int version;
 
-	epld_early_init(&epld_device);
+	epld_early_init(&mb618_epld_device);
 
 	epld_write(0, 0);	/* bank = Test */
 	epld_write(0x63, test_offset);
@@ -438,10 +315,9 @@
 }
 
 struct sh_machine_vector mv_mb618 __initmv = {
-	.mv_name		= "STx7111 Mboard",
+	.mv_name		= "STx7111 Mboard (Kathrein UFS-912)",
 	.mv_setup		= mb618_setup,
 	.mv_nr_irqs		= NR_IRQS,
 	.mv_init_irq		= mb618_init_irq,
 	.mv_ioport_map		= mb618_ioport_map,
-	STM_PCI_IO_MACHINE_VEC
 };
