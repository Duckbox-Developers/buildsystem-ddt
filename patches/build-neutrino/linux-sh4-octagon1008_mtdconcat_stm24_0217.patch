*** linux-sh4-2.6.23.17_stm23_0123_orig/drivers/mtd/maps/physmap.c	2011-06-19 18:34:29.000000000 +0300
--- linux-sh4/drivers/mtd/maps/physmap.c	2011-07-29 06:50:51.114192548 +0300
@@ -83,6 +83,121 @@
 static const char *part_probe_types[] = { "cmdlinepart", "RedBoot", NULL };
 #endif
 
+static struct mtd_partition partition_info[]=
+{
+	{
+		.name   = "Boot_firmware",      //mtd0
+		.size   = 0x00300000,           // 3MB
+		.offset = 0x00000000
+	},
+	{
+		.name   = "kernel",             //mtd1
+		.size   = 0x00300000,           // 3MB
+		.offset = 0x00300000            // 3MB
+	},
+	{
+		.name   = "app_low_unusable",   //mtd2
+		.size   = 0x00500000,           // 5MB (squashfs)
+		.offset = 0x00600000            // 6MB
+	},
+	{
+		.name   = "app_high_sq",        //mtd3
+		.size   = 0x00020000,           // 128kB (squashfs dummy)
+		.offset = 0x00b00000            // 11MB
+	},
+	{
+		.name   = "app_high_real",      //mtd4
+		.size   = 0x004c0000,           // 5MB - 128kB squashfs dummy - 128kB checksum block
+		.offset = 0x00b20000
+	},
+	{
+		.name   = "ROOT_FS_real",       //mtd5
+		.size   = 0x007c0000,           // 8MB - 128kB squashfs dummy - 128kB checksum block
+		.offset = 0x01020000
+	},
+ 	{
+		.name   = "Device_real",        //mtd6
+		.size   = 0x002c0000,           // 3MB - 128kB squashfs dummy - 128kB checksum block
+		.offset = 0x01820000
+	},
+	{
+		.name   = "Config_real",        //mtd7
+		.size   = 0x000c0000,           // 768kB
+		.offset = 0x01b00000
+	},
+	{
+		.name = "User",                 //mtd8
+		.size =   0x00400000,           // 4MB
+		.offset = 0x01c00000
+	},
+	{
+		.name   = "ROOT_FS_sq",         //mtd9
+		.size   = 0x00020000,           // 128kB (squashfs dummy)
+		.offset = 0x01000000            // 16MB
+	},
+ 	{
+		.name   = "Device_sq",          //mtd10
+		.size   = 0x00020000,           // 128kB (squashfs dummy)
+		.offset = 0x01800000            // 24MB
+	},
+	{
+		.name   = "Config_unusable",    //mtd11
+		.size   = 0x00040000,           // 256kB
+		.offset = 0x01bc0000
+	}
+};
+
+static struct mtd_partition higlvl_partition_info[]=
+{
+	{
+		.name   = "Boot_firmware",       //mtd0
+		.size   = 0x00300000,            // 3MB
+		.offset = 0x00000000
+	},
+	{
+		.name   = "kernel",              //mtd1
+		.size   = 0x00300000,            //   3MB
+		.offset = 0x00300000             //   3MB
+	},
+	{
+		.name   = "app_lo",              //mtd2
+		.size   = 0x00500000,            // 5MB (squashfs)
+		.offset = 0x00600000
+	},
+	{
+		.name   = "app_hi_squash_dummy", //mtd3
+		.size   = 0x0001fffe,            // 128kB, one word too small, forces read-only mount
+		.offset = 0x00b00000
+	},
+	{
+		.name   = "Real_ROOT",           //mtd4
+		.size   = 0x01400000,            // 20.375MB, 3x 128k too small to preserve checksums
+		.offset = 0x00b20000             // 11.125MB
+	},
+	{
+		.name   = "root_squash_dummy",   //mtd5
+		.size   = 0x0001fffe,            // 128kB, one word too small, forces read-only mount
+		.offset = 0x01f20000
+	},
+ 	{
+		.name   = "dev_squash_dummy",    //mtd6
+		.size   = 0x0001fffe,            // 128kB, one word too small, forces read-only mount
+		.offset = 0x01f40000
+	},
+	{
+		.name   = "ConfigC",             //mtd7
+		.size   = 0x0003fffe,            // 256kB, one word too small, forces read-only mount
+		.offset = 0x01f60000
+	}
+};
+
+#define NUM_PARTITIONS ARRAY_SIZE(partition_info)
+#define NUM_HIGHLVL_PARTITIONS ARRAY_SIZE(higlvl_partition_info)
+
+static struct mtd_info *lowlvl_parts[NUM_PARTITIONS];
+static struct mtd_info *merged_mtd;
+
+
 static int physmap_flash_probe(struct platform_device *dev)
 {
 	struct physmap_flash_data *physmap_data;
@@ -106,7 +187,7 @@
 	platform_set_drvdata(dev, info);
 
 	for (i = 0; i < dev->num_resources; i++) {
-		printk(KERN_NOTICE "physmap platform flash device: %.8llx at %.8llx\n",
+		printk("physmap platform flash device: %.8llx at %.8llx\n",
 		       (unsigned long long)(dev->resource[i].end - dev->resource[i].start + 1),
 		       (unsigned long long)dev->resource[i].start);
 
@@ -126,6 +207,8 @@
 		info->map[i].set_vpp = physmap_data->set_vpp;
 		info->map[i].pfow_base = physmap_data->pfow_base;
 
+		printk("MAP[%d]: %s %p %lu %d %p\n", i, info->map[i].name, info->map[i].phys, info->map[i].size, info->map[i].bankwidth, info->map[i].set_vpp);
+
 		info->map[i].virt = devm_ioremap(&dev->dev, info->map[i].phys,
 						 info->map[i].size);
 		if (info->map[i].virt == NULL) {
@@ -142,6 +258,8 @@
 		simple_map_init(&info->map[i]);
 
+		printk("MAP[%d]: virtual address: 0x%p\n", i, info->map[i].virt);
+
 		probe_type = rom_probe_types;
 		for (; info->mtd[i] == NULL && *probe_type != NULL; probe_type++)
 			info->mtd[i] = do_map_probe(*probe_type, &info->map[i]);
 		if (info->mtd[i] == NULL) {
@@ -174,6 +293,29 @@
 	if (err)
 		goto err_out;
 
+	partition_info[0].mtdp = &lowlvl_parts[0];
+	partition_info[1].mtdp = &lowlvl_parts[1];
+	partition_info[2].mtdp = &lowlvl_parts[2];
+	partition_info[3].mtdp = &lowlvl_parts[3];
+	partition_info[4].mtdp = &lowlvl_parts[4];
+	partition_info[5].mtdp = &lowlvl_parts[5];
+	partition_info[6].mtdp = &lowlvl_parts[6];
+	partition_info[7].mtdp = &lowlvl_parts[7];
+	partition_info[8].mtdp = &lowlvl_parts[8];
+	partition_info[9].mtdp = &lowlvl_parts[9];
+	partition_info[10].mtdp = &lowlvl_parts[10];
+	partition_info[11].mtdp = &lowlvl_parts[11];
+
+	add_mtd_partitions(info->cmtd, partition_info, NUM_PARTITIONS);
+
+	merged_mtd = mtd_concat_create(lowlvl_parts, NUM_PARTITIONS, "NOR Flash Concatenated");
+	if(merged_mtd)
+	{
+		add_mtd_partitions(merged_mtd, higlvl_partition_info, NUM_HIGHLVL_PARTITIONS);
+	}
+
+
+#if 0
 #ifdef CONFIG_MTD_PARTITIONS
 	err = parse_mtd_partitions(info->cmtd, part_probe_types,
 				&info->parts, 0);
@@ -192,6 +334,7 @@
 #endif
 
 	add_mtd_device(info->cmtd);
+#endif
 	return 0;
 
 err_out:
*** linux-sh4-2.6.23.17_stm23_0123_orig/drivers/mtdpart.c	2011-06-19 18:34:29.000000000 +0300
--- linux-sh4/drivers/mtd/mtdpart.c	2011-07-29 06:50:51.114192548 +0300
@@ -27,7 +27,9 @@
 	struct mtd_info mtd;
 	struct mtd_info *master;
 	uint64_t offset;
+	int index;
 	struct list_head list;
+	int registered;
 };
 
 /*
@@ -345,7 +347,8 @@
 	list_for_each_entry_safe(slave, next, &mtd_partitions, list)
 		if (slave->master == master) {
 			list_del(&slave->list);
+			if (slave->registered)
+				del_mtd_device(&slave->mtd);
-			del_mtd_device(&slave->mtd);
 			kfree(slave);
 		}
 
@@ -438,6 +441,7 @@
 	slave->mtd.erase = part_erase;
 	slave->master = master;
 	slave->offset = part->offset;
+	slave->index = partno;
 
 	if (slave->offset == MTDPART_OFS_APPEND)
 		slave->offset = cur_offset;
@@ -530,9 +534,15 @@
 		slave->mtd.flags |= MTD_SPANS_MASTER;
 
 out_register:
+	if (part->mtdp) {
+		/* store the object pointer (caller may or may not register it*/
+		*part->mtdp = &slave->mtd;
+		slave->registered = 0;
+	} else {
+		/* register our partition */
+		add_mtd_device(&slave->mtd);
+		slave->registered = 1;
+	}
-	/* register our partition */
-	add_mtd_device(&slave->mtd);
-
 	return slave;
 }
 
*** linux-sh4-2.6.23.17_stm23_0123_orig/include/linux/mtd/partitions.h	2011-06-19 18:34:29.000000000 +0300
--- linux-sh4/include/linux/mtd/partitions.h	2011-07-29 06:50:51.114192548 +0300
@@ -40,6 +40,7 @@ struct mtd_partition {
 	uint64_t offset;		/* offset within the master MTD space */
 	uint32_t mask_flags;		/* master MTD flags to mask out for this partition */
 	struct nand_ecclayout *ecclayout;	/* out of band layout for this partition (NAND only)*/
+	struct mtd_info **mtdp;		/* pointer to store the MTD object */
 };
 
 #define MTDPART_OFS_NXTBLK	(-2)
