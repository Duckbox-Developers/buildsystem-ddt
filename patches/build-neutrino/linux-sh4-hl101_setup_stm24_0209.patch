*** linux-sh4-2.6.32.28_stm24_0207_orig/arch/sh/boards/mach-mb442/setup.c	2011-08-04 16:27:41.414157989 +0300
--- linux-sh4/arch/sh/boards/mach-mb442/setup.c	2011-08-05 17:40:27.204158605 +0300
***************
*** 22,35 ****
  #include <linux/stm/platform.h>
  #include <linux/stm/stx7100.h>
  #include <asm/irl.h>
  
! 
! 
! #define MB442_PIO_STE100P_RESET stm_gpio(2, 4)
! #define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
  #define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
  
  
  
  void __init mb442_setup(char** cmdline_p)
  {
--- 22,51 ----
  #include <linux/stm/platform.h>
  #include <linux/stm/stx7100.h>
  #include <asm/irl.h>
+ #include <linux/bpa2.h>
  
! #define MB442_PIO_STE100P_RESET stm_gpio(3, 6)
  #define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
  
+ const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
+ const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
  
+ static struct bpa2_partition_desc bpa2_parts_table[] = {
+       {
+ 	      .name  = "LMI_VID",
+ 	      .start = 0x10800000,
+ 	      .size  = 0x03800000,
+ 	      .flags = 0,
+ 	      .aka   = LMI_VID_partalias
+       },
+       {
+ 	      .name  = "LMI_SYS",
+ 	      .start = 0,
+ 	      .size  = 0x02600000,
+ 	      .flags = 0,
+ 	      .aka   = LMI_SYS_partalias
+       }
+ };
  
  void __init mb442_setup(char** cmdline_p)
  {
***************
*** 43,48 ****
--- 59,66 ----
  	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
  			.hw_flow_control = 0,
  			.is_console = 0, });
+ 
+   	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct resource mb442_smc91x_resources[] = {
***************
*** 70,75 ****
--- 88,123 ----
  	gpio_set_value(MB442_PIO_FLASH_VPP, enable);
  }
  
+ static struct mtd_partition mtd_parts_table[] =
+ {
+ 	{
+ 		.name = "Boot Firmware",
+ 		.size =   0x00040000,	//u-boot 0x00000000-0xa003ffff  256k
+ 		.offset = 0x00000000,
+ 		mask_flags: 0
+ 	},
+ 	{
+ 		.name = "Boot Config",
+ 		.size =   0x00020000,	//boot config 0xa0040000-0xa005ffff  128k
+ 		.offset = 0x00040000,
+  	},
+ 	{
+ 		.name = "Kernel",
+ 		.size =   0x00280000,	//kernel 0x40000-0x2dffff 2.5MB
+ 		.offset = 0x00060000,
+ 	},
+ 	{
+ 		.name = "ROOTFS (Backup)",
+ 		.size =   0x002E0000,
+ 		.offset = 0x00240000,
+ 	},
+  	{
+ 		.name = "Full without bootloader",
+ 		.size =   0x00580000,
+ 		.offset = 0x00040000,
+ 	},
+ };
+ 
  static struct platform_device mb442_physmap_flash = {
  	.name		= "physmap-flash",
  	.id		= -1,
***************
*** 80,85 ****
--- 128,135 ----
  	.dev.platform_data = &(struct physmap_flash_data) {
  		.width		= 2,
  		.set_vpp	= mb442_set_vpp,
+     	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+     	.parts		= mtd_parts_table
  	},
  };
  
***************
*** 95,101 ****
  	return 1;
  }
  
! #define STMMAC_PHY_ADDR 14
  static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
  	[STMMAC_PHY_ADDR] = IRL3_IRQ,
  };
--- 145,151 ----
  	return 1;
  }
  
! #define STMMAC_PHY_ADDR 2
  static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
  	[STMMAC_PHY_ADDR] = IRL3_IRQ,
  };
***************
*** 120,126 ****
  			.out1_enabled = 1, });
  
  	stx7100_configure_ssc_i2c(0);
! 	stx7100_configure_ssc_spi(1, NULL);
  	stx7100_configure_ssc_i2c(2);
  
  	stx7100_configure_usb();
--- 170,176 ----
  			.out1_enabled = 1, });
  
  	stx7100_configure_ssc_i2c(0);
! 	stx7100_configure_ssc_i2c(1);
  	stx7100_configure_ssc_i2c(2);
  
  	stx7100_configure_usb();
***************
*** 130,140 ****
  			.tx_enabled = 0,
  			.tx_od_enabled = 0, });
  
- 	stx7100_configure_pata(&(struct stx7100_pata_config) {
- 			.emi_bank = 3,
- 			.pc_mode = 1,
- 			.irq = IRL1_IRQ, });
- 
  	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
  	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
  
--- 180,185 ----
***************
*** 149,162 ****
  			.mdio_bus_data = &stmmac_mdio_bus,
  		});
  
- 	/* Reset the SMSC 91C111 Ethernet chip */
- 	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
- 	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
- 	udelay(1);
- 	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
- 	udelay(1);
- 	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
- 
  	return platform_add_devices(mb442_devices,
  			ARRAY_SIZE(mb442_devices));
  }
--- 194,199 ----
*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/phy/phy_device.c	2011-08-04 16:27:16.440157990 +0300
--- linux-sh4/drivers/net/phy/phy_device.c	2011-08-05 17:35:37.308158605 +0300
***************
*** 962,968 ****
  		return retval;
  	}
  
! 	pr_debug("%s: Registered new driver\n", new_driver->name);
  
  	return 0;
  }
--- 962,968 ----
  		return retval;
  	}
  
! 	pr_info("%s: Registered new driver (0x%08x)\n", new_driver->name, new_driver->phy_id);
  
  	return 0;
  }
*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/stmmac/stmmac_mdio.c	2011-08-04 16:27:14.747157990 +0300
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c	2011-08-05 17:35:30.704158605 +0300
***************
*** 191,198 ****
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
! 			    (priv->plat->phy_addr == -1))
  				priv->plat->phy_addr = addr;
  
  			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
--- 191,204 ----
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && ((priv->plat->phy_addr == -1) ||
! 					(phydev->phy_id == 0x0181b880) || // Davicom DM9161E
! 					(phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
! 					(phydev->phy_id == 0x00181b80) || // Davicom DM9131
! 					(phydev->phy_id == 0x1c040011) || // STe100p
! 					(phydev->phy_id == 0x00061c50) || // STe101p
! 					(phydev->phy_id == 0x001cc912)))  // RTL821x
  				priv->plat->phy_addr = addr;
  
  			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&

*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/stm/gpio.c	2011-08-06 17:16:42.676314198 +0300
--- linux-sh4/drivers/stm/gpio.c	2011-08-07 03:21:10.140239689 +0300
***************
*** 27,38 ****
  #include <linux/stm/platform.h>
  #include <linux/stm/pad.h>
  #include <linux/stm/pio.h>
  #include "reg_pio.h"
  
  
- 
  struct stpio_pin {
  #ifdef CONFIG_STPIO
  	void (*func)(struct stpio_pin *pin, void *dev);
  	void* dev;
  	unsigned short port_no, pin_no;
--- 27,42 ----
  #include <linux/stm/platform.h>
  #include <linux/stm/pad.h>
  #include <linux/stm/pio.h>
+ #ifdef CONFIG_PROC_FS
+ #include <linux/proc_fs.h>
+ #include <linux/kallsyms.h>
+ #endif
  #include "reg_pio.h"
  
  
  struct stpio_pin {
  #ifdef CONFIG_STPIO
+ 	const char *pin_name;
  	void (*func)(struct stpio_pin *pin, void *dev);
  	void* dev;
  	unsigned short port_no, pin_no;
***************
*** 41,47 ****
  
  struct stm_gpio_pin {
  	unsigned char flags;
! #define PIN_FAKE_EDGE		4
  #define PIN_IGNORE_EDGE_FLAG	2
  #define PIN_IGNORE_EDGE_VAL	1
  #define PIN_IGNORE_RISING_EDGE	(PIN_IGNORE_EDGE_FLAG | 0)
--- 45,51 ----
  
  struct stm_gpio_pin {
  	unsigned char flags;
! #define PIN_FAKE_EDGE			4
  #define PIN_IGNORE_EDGE_FLAG	2
  #define PIN_IGNORE_EDGE_VAL	1
  #define PIN_IGNORE_RISING_EDGE	(PIN_IGNORE_EDGE_FLAG | 0)
***************
*** 75,81 ****
  static struct sysdev_class stm_gpio_sysdev_class;
  
  
- 
  int stm_gpio_num; /* Number of available internal PIOs (pins) */
  EXPORT_SYMBOL(stm_gpio_num);
  
--- 79,84 ----
***************
*** 352,357 ****
--- 355,363 ----
  
  	port->pins[offset].direction = direction;
  	set__PIO_PCx(port->base, offset, direction);
+ 
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
  }
  
  
***************
*** 465,477 ****
  
  	gpio_pin->stpio.port_no = port_no;
  	gpio_pin->stpio.pin_no = pin_no;
! 
  	return &gpio_pin->stpio;
  }
  EXPORT_SYMBOL(__stpio_request_pin);
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
  	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
  }
  EXPORT_SYMBOL(stpio_free_pin);
--- 475,491 ----
  
  	gpio_pin->stpio.port_no = port_no;
  	gpio_pin->stpio.pin_no = pin_no;
! 	gpio_pin->stpio.pin_name = (name==NULL)?"-----":name;
  	return &gpio_pin->stpio;
  }
  EXPORT_SYMBOL(__stpio_request_pin);
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
+ 	stpio_configure_pin(pin, STPIO_IN);
+ 	pin->pin_name = NULL;
+ 	pin->func = 0;
+ 	pin->dev = 0;
  	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
  }
  EXPORT_SYMBOL(stpio_free_pin);
***************
*** 587,592 ****
--- 601,687 ----
  }
  EXPORT_SYMBOL(stpio_set_irq_type);
  
+ #ifdef CONFIG_PROC_FS
+ 
+ static struct proc_dir_entry *proc_stpio;
+ 
+ static inline const char *stpio_get_direction_name(unsigned int direction)
+ {
+ 	switch (direction) {
+ 	case STPIO_NONPIO:		return "IN  (pull-up)      ";
+ 	case STPIO_BIDIR:		return "BI  (open-drain)   ";
+ 	case STPIO_OUT:			return "OUT (push-pull)    ";
+ 	case STPIO_IN:			return "IN  (Hi-Z)         ";
+ 	case STPIO_ALT_OUT:		return "Alt-OUT (push-pull)";
+ 	case STPIO_ALT_BIDIR:	return "Alt-BI (open-drain)";
+ 	default:				return "forbidden          ";
+ 	}
+ };
+ 
+ static inline const char *stpio_get_handler_name(void *func)
+ {
+ 	static char sym_name[KSYM_NAME_LEN];
+ 	char *modname;
+ 	unsigned long symbolsize, offset;
+ 	const char *symb;
+ 
+ 	if (func == NULL)
+ 		return "";
+ 
+ 	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+ 			&modname, sym_name);
+ 
+ 	return symb ? symb : "???";
+ }
+ 
+ static int stpio_read_proc(char *page, char **start, off_t off, int count,
+ 		int *eof, void *data_unused)
+ {
+ 	int len;
+ 	int port_no, pin_no;
+ 	off_t begin = 0;
+ 	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+ 	struct stm_gpio_port *port;
+ 	struct stm_gpio_pin *pin;
+ 
+ 	len = sprintf(page, "  port      name          direction\n");
+ 	for (port_no = 0; port_no < num_ports; port_no++)
+ 	{
+ 		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++) {
+ 
+ 			port = &stm_gpio_ports[port_no];
+ 			if(!port) continue;
+ 
+ 			pin = &port->pins[pin_no];
+ 			if(!pin) continue;
+ 
+ 			char *name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+ 			len += sprintf(page + len,
+ 					"PIO %d.%d [%-10s] [%s] [%s]\n",
+ 					port_no, pin_no, name,
+ 					stpio_get_direction_name(pin->direction),
+ 					stpio_get_handler_name(pin->stpio.func));
+ 
+ 			if (len + begin > off + count)
+ 				goto done;
+ 			if (len + begin < off) {
+ 				begin += len;
+ 				len = 0;
+ 			}
+ 		}
+ 	}
+ 
+ 	*eof = 1;
+ 
+ done:
+ 	if (off >= len + begin)
+ 		return 0;
+ 	*start = page + (off - begin);
+ 	return ((count < begin + len - off) ? count : begin + len - off);
+ }
+ 
+ #endif /* CONFIG_PROC_FS */
+ 
  #endif /* CONFIG_STPIO */
  
  
***************
*** 967,972 ****
--- 1062,1073 ----
  {
  	int ret;
  
+ #ifdef CONFIG_PROC_FS
+ 	proc_stpio = create_proc_entry("stpio", 0, NULL);
+ 	if (proc_stpio)
+ 		proc_stpio->read_proc = stpio_read_proc;
+ #endif
+ 
  	ret = sysdev_class_register(&stm_gpio_sysdev_class);
  	if (ret)
  		return ret;

