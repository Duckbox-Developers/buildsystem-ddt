--- linux-sh4-2.6.32.16_stm24_0205/arch/sh/boards/mach-st/epld.c.org	2011-01-03 18:09:34.000000000 +0100
+++ linux-sh4-2.6.32.16_stm24_0205/arch/sh/boards/mach-st/epld.c	2011-01-03 18:09:45.000000000 +0100
@@ -9,7 +9,7 @@
 #include <linux/kernel.h>
 #include <linux/platform_device.h>
 #include <linux/io.h>
-#include <mach/common.h>
+#include <mach-st/mach/common.h>
 
 #define DRIVER_NAME "epld"
 
--- linux-sh4-2.6.32.16_stm24_0205/arch/sh/boards/mach-mb448/mach.c.org	2011-01-03 13:49:54.000000000 +0100
+++ linux-sh4-2.6.32.16_stm24_0205/arch/sh/boards/mach-mb448/mach.c	2011-01-03 23:24:43.000000000 +0100
@@ -41,16 +41,18 @@
 
 	/* Set the ILC to route external interrupts to the the INTC */
 	/* Outputs 0-3 are the interrupt pins, 4-7 are routed to the INTC */
-	ilc_route_external(ILC_EXT_MDINT, 4, 1);	/* STe100 PHY */
 	ilc_route_external(ILC_EXT_IRQ1, 5, 0);		/* VoIP */
 	ilc_route_external(ILC_EXT_IRQ2, 6, 0);		/* ATA */
-	ilc_route_external(ILC_EXT_IRQ3, 7, 0);		/* SMC Ethernet */
+
+	/* Route STe101p PHY interrupt to SH4 - only for TF7700HDPVR */
+	ilc_route_external(ILC_EXT_MDINT, 7, 1);
+
 }
 
 void __init mb448_setup(char**);
 
 static struct sh_machine_vector mv_mb448 __initmv = {
-	.mv_name		= "mb448",
+	.mv_name		= "mb448 (TF77000HDPVR)",
 	.mv_setup		= mb448_setup,
 	.mv_nr_irqs		= NR_IRQS,
 	.mv_init_irq		= mb448_init_irq,
--- linux-sh4-2.6.32.16_stm24_0205/arch/sh/boards/mach-mb448/setup.c.org	2011-07-23 01:58:30.000000000 -0700
+++ linux-sh4-2.6.32.16_stm24_0205/arch/sh/boards/mach-mb448/setup.c	2011-07-23 04:02:47.000000000 -0700
@@ -20,17 +20,116 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
+#include <linux/stm/sysconf.h>
+#include <linux/dma-mapping.h>
+#include <mach-st/mach/common.h>
+#include <mach-mb411/mach/epld.h>
+#include "../mach-st/epld.c"
+#include <linux/bpa2.h>
+
+#define ASC2_INTEN ((unsigned int*)(0xb8032010))
+#define ASC3_INTEN ((unsigned int*)(0xb8033010))
+#define ASC3BaseAddress 0xb8033000
+#define ASC_TX_BUFF     0x004
+#define ASC_INT_STA     0x014
+#define ASC_INT_STA_THE   0x04
+
+#define UHOST2C_BASE                    0x19100000
+#define AHB2STBUS_WRAPPER_GLUE_BASE     (UHOST2C_BASE)
+#define AHB2STBUS_OHCI_BASE             (UHOST2C_BASE + 0x000ffc00)
+#define AHB2STBUS_EHCI_BASE             (UHOST2C_BASE + 0x000ffe00)
+#define AHB2STBUS_PROTOCOL_BASE         (UHOST2C_BASE + 0x000fff00)
+
+#define TF7700_PIO_PHY_RESET stm_gpio(5, 3)
+#define TF7700_PIO_DAC_MUTE stm_gpio(2, 4)
+
+/* additional info:
+ 
+ LMI_SYS:
+ 0x04000000-0x07FFFFFF = 64MB RAM for linux
+ 
+ LMI_VID:
+ 0x10000000-0x103FFFFF = 4MB RAM for ST231-0 (video delta)
+ 0x10400000-0x107FFFFF = 4MB RAM for ST231-1 (audio delta)
+ 0x10800000-0x13FFFFFF = 56MB RAM for allocator
+*/
+ 
+const char *LMI_VID_partalias[] = {
+ 	"BPA2_Region1",
+ 	"coredisplay-video",
+ 	"v4l2-video-buffers",
+ 	"gfx-memory",
+ 	NULL };
+ 
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers",  NULL };
+ 
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	  {
+	          .name  = "LMI_VID",
+	          .start = 0x10800000,
+	          .size  = 0x03800000,
+	          .flags = 0,
+	          .aka   = LMI_VID_partalias
+	  },
+	  {
+	          .name  = "LMI_SYS",
+	          .start = 0,
+	          .size  = 0x02600000,
+	          .flags = 0,
+	          .aka   = LMI_SYS_partalias
+	  }
+};
+ 
+/* prototypes */
+static void phy_reset(void* bus);
+static void send_fp_byte(unsigned char Data);
+ 
+static void send_fp_byte(unsigned char Data)
+{
+	unsigned char *ASC_3_TX_BUFF = (unsigned char*)(ASC3BaseAddress + ASC_TX_BUFF);
+	unsigned int *ASC_3_INT_STA = (unsigned int*)(ASC3BaseAddress + ASC_INT_STA);
+	unsigned long Counter = 100000;
 
+	while (((*ASC_3_INT_STA & ASC_INT_STA_THE) == 0) && --Counter);
+	*ASC_3_TX_BUFF = Data;
+}
+ 
+static void tf7700_power_off(void)
+{
+	send_fp_byte(0x02);
+	send_fp_byte(0x11);
+	send_fp_byte(0x81);
+	send_fp_byte(0x03);
+	send_fp_byte(0x02);
+	send_fp_byte(0x21);
+	send_fp_byte(0x01);
+	send_fp_byte(0x03);
+}
+ 
+static void phy_reset(void* bus)
+{
+	static int pin_requested = 0;
 
+	printk ("Resetting the network PHY\n");
 
-#define MB448_PIO_SMC91X_RESET stm_gpio(2, 6)
-#define MB448_PIO_FLASH_VPP stm_gpio(2, 7)
+	if (pin_requested == 0)
+	{
+		gpio_request(TF7700_PIO_PHY_RESET, "PHY RST");
+		gpio_direction_output(TF7700_PIO_PHY_RESET, 0);
+		pin_requested = 1;
+	}
 
+	gpio_set_value(TF7700_PIO_PHY_RESET, 1);
+	udelay(1);
+	gpio_set_value(TF7700_PIO_PHY_RESET, 0);
+	udelay(1000);
+	gpio_set_value(TF7700_PIO_PHY_RESET, 1);
+}
 
 
 void __init mb448_setup(char **cmdline_p)
 {
-	printk("STMicroelectronics STb7109E Reference board initialisation\n");
+	printk("Topfield TF7700HDPVR board initialisation\n");
 
 	stx7100_early_device_init();
 
@@ -40,65 +139,121 @@
 	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
 			.is_console = 0, });
-}
-
 
+ 
+	/* disable interrupts to prevent a system lockup */
+	*ASC2_INTEN = *ASC2_INTEN & ~0x000001fe;
+	*ASC3_INTEN = *ASC3_INTEN & ~0x000001fe;
+ 
+ 	printk("LOAD bpa2_parts_table\n");
+ 	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
 
-static struct resource mb448_smc91x_resources[] = {
-	[0] = {
-		.start	= 0xa2000300,
-		.end	= 0xa2000300 + 0xff,
-		.flags	= IORESOURCE_MEM,
-	},
-	[1] = {
-		.start	= IRL3_IRQ,
-		.end	= IRL3_IRQ,
-		.flags	= IORESOURCE_IRQ,
-	},
-};
-
-static struct platform_device mb448_smc91x_device = {
-	.name		= "smc91x",
-	.id		= 0,
-	.num_resources	= ARRAY_SIZE(mb448_smc91x_resources),
-	.resource	= mb448_smc91x_resources,
+static struct platform_device epld_device = {
+	  .name           = "epld",
+	  .id             = -1,
+	  .num_resources  = 1,
+	  .resource       = (struct resource[]) {
+	          {
+	                  .start  = EPLD_BASE,
+	                  .end    = EPLD_BASE + EPLD_SIZE - 1,
+	                  .flags  = IORESOURCE_MEM,
+	          }
+	  },
+	  .dev.platform_data = &(struct plat_epld_data) {
+	           .opsize = 8,
+	  },
 };
 
-
-
 static void mb448_set_vpp(struct map_info *info, int enable)
 {
-	gpio_set_value(MB448_PIO_FLASH_VPP, enable);
+	  if (enable) {
+	          epld_write(3, EPLD_FLASH);
+	  } else {
+	          epld_write(2, EPLD_FLASH);
+	  }
 }
 
+static struct mtd_partition mtd_parts_table[] = {
+	{
+	 .name = "TF Boot Loader",
+	 .size = 0x00030000,
+	 .offset = 0x00000000,
+	 .mask_flags = MTD_WRITEABLE
+	 },
+	{
+	 .name = "U-Boot",
+	 .size = 0x00020000,
+	 .offset = MTDPART_OFS_NXTBLK,
+	 },
+	{
+	 .name = "U-Boot Settings",
+	 .size = 0x00010000,
+	 .offset = MTDPART_OFS_NXTBLK,
+	 },
+	{
+	 .name = "TF Kernel",
+	 .size = 0x00300000,
+	 .offset = MTDPART_OFS_NXTBLK,
+	 },
+	{
+	 .name = "Root FS (unused)",
+	 .size = MTDPART_SIZ_FULL,
+	 .offset = MTDPART_OFS_NXTBLK
+	 },
+	{
+	 .name   = "TF Firmware (overwrites U-Boot and Kernel!)",
+	 .offset = 0x00030000,
+	 .size   = 0x00790000,
+	 },
+	{
+	 .name   = "TF Settings",
+	 .offset = 0x007c0000,
+	 .size   = 0x00020000,
+	 },
+	{
+	 .name   = "TF Defaults",
+	 .offset = 0x007e0000,
+	 .size   = 0x00020000,
+	 }
+};
+
+static struct physmap_flash_data physmap_flash_data = {
+        .width          = 2,
+        .set_vpp        = mb448_set_vpp,
+        .nr_parts       = ARRAY_SIZE(mtd_parts_table),
+        .parts          = mtd_parts_table
+};
+
+static struct resource physmap_flash_resource = {
+        .start          = 0x00000000,
+        .end            = 0x00800000 - 1,
+        .flags          = IORESOURCE_MEM,
+};
+
 static struct platform_device mb448_physmap_flash = {
 	.name		= "physmap-flash",
 	.id		= -1,
 	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
-	},
-	.dev.platform_data = &(struct physmap_flash_data) {
-		.width		= 2,
-		.set_vpp	= mb448_set_vpp,
-	},
+	.resource	= &physmap_flash_resource,
+	.dev.platform_data = &physmap_flash_data,
 };
 
 
 
-#define STMMAC_PHY_ADDR 14
+#define STMMAC_PHY_ADDR 0
 static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
 	[STMMAC_PHY_ADDR] = IRL0_IRQ,
 };
 static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
 	.bus_id = 0,
-	.phy_mask = 1,
+	.phy_mask = 0,
 	.irqs = stmmac_phy_irqs,
 };
 
 static struct platform_device *mb448_devices[] __initdata = {
-	&mb448_smc91x_device,
 	&mb448_physmap_flash,
+	&epld_device
 };
 
 static int __init mb448_device_init(void)
@@ -106,7 +261,7 @@
 	stx7100_configure_sata();
 
 	stx7100_configure_ssc_i2c(0, NULL);
-	stx7100_configure_ssc_spi(1, NULL);
+	stx7100_configure_ssc_i2c(1, NULL);
 	stx7100_configure_ssc_i2c(2, NULL);
 
 	stx7100_configure_usb();
@@ -119,16 +274,14 @@
 			.mdio_bus_data = &stmmac_mdio_bus,
 		});
 
-	gpio_request(MB448_PIO_FLASH_VPP, "Flash VPP");
-	gpio_direction_output(MB448_PIO_FLASH_VPP, 0);
-
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB448_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB448_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB448_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB448_PIO_SMC91X_RESET, 0);
+	/* assign power-off function */
+	pm_power_off = tf7700_power_off;
+ 
+	/* The Audio DAC (UDA1334ATS) uses GPIO pin 2-4 as an active high mute signal */
+	gpio_request(TF7700_PIO_DAC_MUTE, "PHY RST");
+	gpio_direction_output(TF7700_PIO_DAC_MUTE, 0);
+ 
+ 	phy_reset(NULL);
 
 	return platform_add_devices(mb448_devices,
 			ARRAY_SIZE(mb448_devices));
--- linux-sh4-2.6.32.16_stm24_0205/drivers/stm/stx7100_hispeed.c.org	2011-01-03 17:06:42.000000000 +0100
+++ linux-sh4-2.6.32.16_stm24_0205/drivers/stm/stx7100_hispeed.c	2011-01-03 23:27:51.000000000 +0100
@@ -190,7 +190,8 @@
 	 * option to select an inverted output from the TPS2052, so no
 	 * software work around is required.)
 	 */
-	stx7100_usb_pwr_gpio = stm_pad_gpio_request_output(state, "PWR", 1);
+	/* TF7700HDPVR has an active-low USB power activation */
+	stx7100_usb_pwr_gpio = stm_pad_gpio_request_output(state, "PWR", 0);
 	BUG_ON(stx7100_usb_pwr_gpio == STM_GPIO_INVALID);
 
 	return 0;
--- linux-sh4/drivers/stm/stx7100_comms.c.orig	2011-01-09 14:19:17.000000000 +0100
+++ linux-sh4/drivers/stm/stx7100_comms.c	2011-01-09 14:19:52.000000000 +0100
@@ -240,12 +240,12 @@
 			STM_PAD_PIO_BIDIR_NAMED(3, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(3, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC1_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 2, 2, 0),
 			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+			//STM_PAD_SYS_CFG(7, 10, 10, 0),
 		},
 	},
 	[2] = {
@@ -344,7 +344,7 @@
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
