diff -uNr linux-sh4-0209/arch/sh/boards/Kconfig linux-sh4-0209-vitamin_hd5000/arch/sh/boards/Kconfig
--- linux-sh4-0209/arch/sh/boards/Kconfig	2011-11-10 12:28:56.000000000 +0100
+++ linux-sh4-0209-vitamin_hd5000/arch/sh/boards/Kconfig	2012-04-23 15:59:39.000000000 +0200
@@ -787,6 +787,13 @@
 	help
 	  Select this option to enable a simple driver for the front
 	  pannel button on the mb705.
+	  
+config SH_ST_VITAMIN_HD5000
+	bool "vitamin_hd5000: STx7111 Vitamin HD5000 customer board"
+	depends on CPU_SUBTYPE_STX7111
+	select SYS_SUPPORTS_PCI
+	select I2C
+	default n
 
 endmenu
 
diff -uNr linux-sh4-0209/arch/sh/boards/mach-vitamin_hd5000/Makefile linux-sh4-0209-vitamin_hd5000/arch/sh/boards/mach-vitamin_hd5000/Makefile
--- linux-sh4-0209/arch/sh/boards/mach-vitamin_hd5000/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ linux-sh4-0209-vitamin_hd5000/arch/sh/boards/mach-vitamin_hd5000/Makefile	2011-11-10 12:28:56.000000000 +0100
@@ -0,0 +1,5 @@
+#
+# Makefile for STMicroelectronics STx7111 Mboard (mb618) board
+#
+
+obj-y := setup.o
diff -uNr linux-sh4-0209/arch/sh/boards/mach-vitamin_hd5000/setup.c linux-sh4-0209-vitamin_hd5000/arch/sh/boards/mach-vitamin_hd5000/setup.c
--- linux-sh4-0209/arch/sh/boards/mach-vitamin_hd5000/setup.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-sh4-0209-vitamin_hd5000/arch/sh/boards/mach-vitamin_hd5000/setup.c	2012-08-09 16:43:28.000000000 +0200
@@ -0,0 +1,256 @@
+/*
+ * arch/sh/boards/st/vitamin_hd5000/setup.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STx7111 Mboard support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/leds.h>
+#include <linux/phy.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/input.h>
+#include <linux/irq.h>
+#include <linux/stm/platform.h>
+#include <linux/stm/stx7111.h>
+#include <linux/stm/emi.h>
+#include <linux/stm/gpio.h>
+#include <linux/stm/pio.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <asm/irq-ilc.h>
+#include <asm/irl.h>
+#include <sound/stm.h>
+#include <linux/bpa2.h>
+
+
+static struct stpio_pin*        pin_eth_reset;
+static struct stpio_pin*        pin_flash_vpp;
+
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+ 
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    }, 
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x06000000, /* 96 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    }, 
+};
+
+static void __init vitamin_hd5000_setup(char** cmdline_p)
+{
+	printk(KERN_INFO "Showbox Vitamin HD5000 board initialisation\n");
+
+	stx7111_early_device_init();
+
+	stx7111_configure_asc(1, &(struct stx7111_asc_config) {
+			.hw_flow_control = 1,
+			.is_console = 1, });
+	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
+			.hw_flow_control = 1,
+			.is_console = 0, });
+			
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+static void vitamin_hd5000_nor_set_vpp(struct map_info *info, int enable)
+{
+	stpio_set_pin(pin_flash_vpp, (enable > 0) ? 1:0);
+}
+
+static struct platform_device vitamin_hd5000_nor_flash = {
+	.name			= "physmap-flash",
+	.id				= -1,
+	.num_resources	= 1,
+	.resource		= (struct resource[]) {
+		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
+	},
+	.dev.platform_data = &(struct physmap_flash_data) {
+		.width		= 2,
+		.set_vpp	= vitamin_hd5000_nor_set_vpp,
+		.nr_parts	= 2,
+		.parts		= (struct mtd_partition []) {
+			{
+				.name = "boot",
+				.size = 0x00080000,
+				.offset = 0x00000000,
+			}, {
+				.name = "kernel",
+				.size = MTDPART_SIZ_FULL,
+				.offset = MTDPART_OFS_NXTBLK,
+			},
+		},
+	},
+};
+
+static int vitamin_hd5000_phy_reset(void *bus)
+{
+	stpio_set_pin(pin_eth_reset, 0);
+	udelay(2);
+	stpio_set_pin(pin_eth_reset, 1);
+
+	return 1;
+}
+
+static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
+	.bus_id = 0,
+	.phy_reset = vitamin_hd5000_phy_reset,
+	.phy_mask = 0,
+};
+
+static struct platform_device *vitamin_hd5000_devices[] __initdata = {
+	&vitamin_hd5000_nor_flash,
+};
+
+
+typedef struct
+{
+	int port;
+	int pin;
+	int direction;
+	char name[16];
+} pio_list_t;
+
+static pio_list_t vitamin_hd5000_pio_list[]={
+	{  1, 2, STPIO_IN,  "TSIN_CLK", 	},
+	{  2, 3, STPIO_IN,  "TSIN_VALID",	},
+	{  2, 4, STPIO_IN,  "TSIN_D0",		},
+	{  2, 5, STPIO_IN,  "TSIN_D1",		},
+	{  2, 6, STPIO_IN,  "TSIN_D2",		},
+	{  2, 7, STPIO_IN,  "TSIN_D3",		},
+	{  5, 0, STPIO_IN,  "TSIN_D4",		},
+	{  5, 1, STPIO_IN,  "TSIN_D5",		},
+	{  5, 2, STPIO_IN,  "TSIN_D6",		},
+	{  5, 3, STPIO_IN,  "TSIN_D7",		},
+	{  5, 5, STPIO_IN,  "TSIN_SYNC",	},
+	{ 10, 3, STPIO_OUT, "TSOUT_CLK",	},
+	{ 10, 4, STPIO_OUT, "TSOUT_VALID",	},
+	{ 10, 5, STPIO_OUT, "TSOUT_D0",		},
+	{ 10, 6, STPIO_OUT, "TSOUT_D1",		},
+	{ 10, 7, STPIO_OUT, "TSOUT_D2",		},
+	{ 11, 0, STPIO_OUT, "TSOUT_D3",		},
+	{ 11, 1, STPIO_OUT, "TSOUT_D4",		},
+	{ 11, 2, STPIO_OUT, "TSOUT_D5",		},
+	{ 11, 3, STPIO_OUT, "TSOUT_D6",		},
+	{ 11, 4, STPIO_OUT, "TSOUT_D7",		},
+	{ 11, 6, STPIO_OUT, "TSOUT_SYNC",	},	
+};	
+#define VITAMIN_HD5000_MAX_PIOS (sizeof(vitamin_hd5000_pio_list)/sizeof(pio_list_t))
+
+static void vitamin_hd5000_config(void)
+{
+	int i;
+	struct sysconf_field *sc;
+	
+	for (i=0; i<VITAMIN_HD5000_MAX_PIOS; i++)
+	{
+		gpio_request(stm_gpio(vitamin_hd5000_pio_list[i].port, vitamin_hd5000_pio_list[i].pin), 
+					 vitamin_hd5000_pio_list[i].name);
+		
+		if (vitamin_hd5000_pio_list[i].direction == STPIO_IN)
+			gpio_direction_input(stm_gpio(vitamin_hd5000_pio_list[i].port, vitamin_hd5000_pio_list[i].pin));
+		else if (vitamin_hd5000_pio_list[i].direction == STPIO_OUT)
+			gpio_direction_output(stm_gpio(vitamin_hd5000_pio_list[i].port, vitamin_hd5000_pio_list[i].pin), 0);
+	}
+	
+	/* set SYS_CFG0 = 0 --> FE standard mode */
+	sc = sysconf_claim(SYS_CFG, 0, 0, 31, "FE900");
+	sysconf_write(sc, 0);
+	sysconf_release(sc);
+
+	/* set SYS_CFG5[0] = 1 --> DVB_CI Mode 1 */
+	sc = sysconf_claim(SYS_CFG, 5, 0, 0, "DVB_CI_MODE");
+	sysconf_write(sc, 1);
+	sysconf_release(sc);
+
+	/* set SYS_CFG5[17] = 1 --> DVB_CI Mode 1 PIO pads */
+	sc = sysconf_claim(SYS_CFG, 5, 17, 17, "DVB_CI_PADS");
+	sysconf_write(sc, 1);
+	sysconf_release(sc);
+	
+	/* set SYS_CFG5[8] = 1 --> HDMI_CEC_RX on PIO 1.7 */
+	sc = sysconf_claim(SYS_CFG, 5, 8, 8, "HDMI_CEC_RX");
+	sysconf_write(sc, 1);
+	sysconf_release(sc);
+
+	return;
+}
+
+static int __init vitamin_hd5000_devices_init(void)
+{
+	pin_eth_reset = stpio_request_pin(2, 2, "PHY_RESET", STPIO_OUT);
+	pin_flash_vpp = stpio_request_pin(6, 3, "FLASH_VPP", STPIO_OUT);
+
+	stx7111_configure_pwm(&(struct stx7111_pwm_config) {
+			.out0_enabled = 0,
+			.out1_enabled = 0, });
+
+	/* I2C xxxA - HDMI */
+	stx7111_configure_ssc_i2c(0);
+	
+	/* I2C xxxB - EEPROM, ALPU, FRONTEND, AV SWITCH */
+	stx7111_configure_ssc_i2c(1); 
+	
+	/* I2C xxxC - CI */
+	stx7111_configure_ssc_i2c(2);
+	
+	/* I2C xxxD - INTERNAL FE900 */
+	stx7111_configure_ssc_i2c(3);
+
+	stx7111_configure_usb(&(struct stx7111_usb_config) {
+			.invert_ovrcur = 1, });
+
+	stx7111_configure_ethernet(&(struct stx7111_ethernet_config) {
+			.mode = stx7111_ethernet_mode_mii,
+			.ext_clk = 0,
+			.phy_bus = 0,
+			.phy_addr = -1,
+			.mdio_bus_data = &stmmac_mdio_bus,
+		});
+	
+	vitamin_hd5000_config();
+	
+	return platform_add_devices(vitamin_hd5000_devices, ARRAY_SIZE(vitamin_hd5000_devices));
+}
+arch_initcall(vitamin_hd5000_devices_init);
+
+static void __iomem *vitamin_hd5000_ioport_map(unsigned long port, unsigned int size)
+{
+	/*
+	 * If we have PCI then this should never be called because we
+	 * are using the generic iomap implementation. If we don't
+	 * have PCI then there are no IO mapped devices, so it still
+	 * shouldn't be called.
+	 */
+	BUG();
+	return (void __iomem *)CCN_PVR;
+}
+
+struct sh_machine_vector mv_vitamin_hd5000 __initmv = {
+	.mv_name		= "Vitamin HD5000",
+	.mv_setup		= vitamin_hd5000_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_ioport_map	= vitamin_hd5000_ioport_map,
+};
diff -uNr linux-sh4-0209/arch/sh/Makefile linux-sh4-0209-vitamin_hd5000/arch/sh/Makefile
--- linux-sh4-0209/arch/sh/Makefile	2011-11-10 12:28:56.000000000 +0100
+++ linux-sh4-0209-vitamin_hd5000/arch/sh/Makefile	2012-04-23 16:00:01.000000000 +0200
@@ -192,6 +192,7 @@
 machdir-$(CONFIG_SH_ST_MB837)			+= mach-mb837 mach-st
 machdir-$(CONFIG_SH_ST_MB839)			+= mach-mb839
 machdir-$(CONFIG_SH_ST_MB903)			+= mach-mb903
+machdir-$(CONFIG_SH_ST_VITAMIN_HD5000)		+= mach-vitamin_hd5000
 
 ifneq ($(machdir-y),)
 core-y	+= $(addprefix arch/sh/boards/, \
diff -uNr linux-sh4-0209/drivers/net/phy/Kconfig linux-sh4-0209-vitamin_hd5000/drivers/net/phy/Kconfig
--- linux-sh4-0209/drivers/net/phy/Kconfig	2011-11-10 12:28:57.000000000 +0100
+++ linux-sh4-0209-vitamin_hd5000/drivers/net/phy/Kconfig	2012-04-24 16:41:37.000000000 +0200
@@ -119,5 +119,8 @@
 
 	  To compile this driver as a module, choose M here: the module
 	  will be called mdio-gpio.
+	  
+config TERIDIAN_78Q2123
+	tristate "Support for Teridian 78Q2123 ETH PHY"
 
 endif # PHYLIB
diff -uNr linux-sh4-0209/drivers/net/phy/Makefile linux-sh4-0209-vitamin_hd5000/drivers/net/phy/Makefile
--- linux-sh4-0209/drivers/net/phy/Makefile	2011-11-10 12:28:57.000000000 +0100
+++ linux-sh4-0209-vitamin_hd5000/drivers/net/phy/Makefile	2012-04-24 16:41:52.000000000 +0200
@@ -21,3 +21,4 @@
 obj-$(CONFIG_NATIONAL_PHY)	+= national.o
 obj-$(CONFIG_STE10XP)		+= ste10Xp.o
 obj-$(CONFIG_MICREL_PHY)	+= micrel.o
+obj-$(CONFIG_TERIDIAN_78Q2123)	+= t78q2123.o
diff -uNr linux-sh4-0209/drivers/net/phy/t78q2123.c linux-sh4-0209-vitamin_hd5000/drivers/net/phy/t78q2123.c
--- linux-sh4-0209/drivers/net/phy/t78q2123.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-sh4-0209-vitamin_hd5000/drivers/net/phy/t78q2123.c	2012-04-24 18:09:05.000000000 +0200
@@ -0,0 +1,104 @@
+/*
+ * drivers/net/phy/t78q2123.c
+ *
+ * Driver for Teridian 78Q2123/78Q2133 PHY
+ *
+ * Author: Tomasz Szkutkowski <tomasz.szkutkowski@adp-technologies.com>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ */
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/kernel.h>
+#include <linux/moduleparam.h>
+#include <linux/interrupt.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/mii.h>
+#include <linux/phy.h>
+
+#define T78Q2123_PHY_ID			0x000E7230
+#define T78Q2123_PHY_ID_MASK	0xFFFFFFF0
+#define T78Q2123_REG_INT		17
+#define T78Q2123_REG_INT_MASK	0x0500
+
+static int t78q21x3_config_init(struct phy_device *phydev)
+{
+	int value, err;
+
+	/* Software Reset PHY */
+	value = phy_read(phydev, MII_BMCR);
+	if (value < 0)
+		return value;
+
+	value |= BMCR_RESET;
+	err = phy_write(phydev, MII_BMCR, value);
+	if (err < 0)
+		return err;
+
+	do {
+		value = phy_read(phydev, MII_BMCR);
+	} while (value & BMCR_RESET);
+
+	return 0;
+}
+
+static int t78q21x3_config_intr(struct phy_device *phydev)
+{
+	int value = phy_read(phydev, T78Q2123_REG_INT);
+
+	if (phydev->interrupts == PHY_INTERRUPT_ENABLED) 
+		value |= T78Q2123_REG_INT_MASK;
+	else
+		value &= ~(T78Q2123_REG_INT_MASK);
+
+	return phy_write(phydev, T78Q2123_REG_INT, value);
+}
+
+static int t78q21x3_ack_interrupt(struct phy_device *phydev)
+{
+	int err = phy_read(phydev, T78Q2123_REG_INT);
+	if (err < 0)
+		return err;
+	return 0;
+}
+
+
+static struct phy_driver t78q21x3_pdriver = {
+	.phy_id 		= T78Q2123_PHY_ID,
+	.phy_id_mask 	= T78Q2123_PHY_ID_MASK,
+	.name 			= "Teridan 78Q21x3 PHY",
+	.features 		= PHY_BASIC_FEATURES,
+	.flags 			= PHY_HAS_INTERRUPT,
+	.config_init 	= t78q21x3_config_init,
+	.config_aneg 	= genphy_config_aneg,
+	.read_status 	= genphy_read_status,
+	.ack_interrupt	= t78q21x3_ack_interrupt,
+	.config_intr 	= t78q21x3_config_intr,
+	.suspend 		= genphy_suspend,
+	.resume 		= genphy_resume,
+	.driver 		= {.owner = THIS_MODULE,}
+};
+
+static int __init t78q21x3_init(void)
+{
+	printk("Teridian 78Q21x3 PHY driver init\n");
+	return phy_driver_register(&t78q21x3_pdriver);
+}
+
+static void __exit t78q21x3_exit(void)
+{
+	phy_driver_unregister(&t78q21x3_pdriver);
+}
+
+module_init(t78q21x3_init);
+module_exit(t78q21x3_exit);
+
+MODULE_DESCRIPTION("Teridian 78Q21x3 PHY driver");
+MODULE_AUTHOR("ADPT <contact@adp-technologies.com>");
+MODULE_LICENSE("GPL");
