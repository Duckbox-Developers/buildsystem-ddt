--- a/arch/sh/kernel/setup.c
+++ a/arch/sh/kernel/setup.c
@@ -389,6 +389,44 @@
 #endif
 #endif

+	{
+		int command_line_len = strlen(command_line);
+		char flash_org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock2 ubi.mtd=2";
+		char flash_new_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock2 ubi.mtd=2 root=ubi0:rootfs rootfstype=ubifs rw init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 console_loglevel=7 stmmaceth=ethaddr:";
+		int flash_org_command_line_len = strlen(flash_org_command_line);
+		char usb_org_command_line[] = "console=ttyAS0,115200 root=/dev/root rw";
+		char usb_new_command_line[] = "console=ttyAS0,115200 root=/dev/sda2/root.img rootfstype=jffs2 rw nwhwconf=$nwhwnet init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 console_loglevel=7 rootdelay=5 stmmaceth=ethaddr:";
+		int usb_org_command_line_len = strlen(usb_org_command_line);
+		char mac[] = "00:00:00:00:00:00";
+		int i;
+
+		for (i = 0; i < (command_line_len - 7); i++)
+		{
+			if (!strncmp(command_line + i, "ethaddr", 7))
+			{
+				strlcpy(mac, command_line + i + 8, sizeof(mac));
+				break;
+			}
+			if (!strncmp(command_line + i, "hwaddr", 6))
+			{
+				strlcpy(mac, command_line + i + 7, sizeof(mac));
+				break;
+			}
+		}
+		/* boot from flash */
+		if (command_line_len >= flash_org_command_line_len && !strncmp(command_line, flash_org_command_line, flash_org_command_line_len))
+		{
+			strlcpy(command_line, flash_new_command_line, sizeof(command_line));
+			strlcat(command_line, mac, sizeof(command_line));
+		}
+		/* boot from USB */
+		if (command_line_len >= usb_org_command_line_len && !strncmp(command_line, usb_org_command_line, usb_org_command_line_len))
+		{
+			strlcpy(command_line, usb_new_command_line, sizeof(command_line));
+//			strlcat(command_line, mac, sizeof(command_line));
+		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
--- linux-sh4/arch/sh/boards/mach-hdk7111/setup.c	2012-03-31 15:26:54.000000000 +0200
+++ linux-sh4/arch/sh/boards/mach-hdk7111/setup.c.patched	2012-07-08 20:51:17.000000000 +0200
@@ -27,125 +27,140 @@
 #include <linux/stm/pci-glue.h>
 #include <linux/mtd/mtd.h>
 #include <linux/mtd/nand.h>
-#include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
-#include <linux/spi/spi.h>
-#include <linux/spi/flash.h>
 #include <asm/irq-ilc.h>
+#include <asm/irl.h>
+#include <sound/stm.h>
+#include <linux/bpa2.h>
 
-
-#define HDK7111_PIO_PHY_RESET stm_gpio(1, 6)
+#define HDK7111_PIO_USB_RESET stm_gpio(3, 5)
+#define HDK7111_PIO_FLASH_VPP stm_gpio(3, 6)
+#define HDK7111_PIO_PHY_RESET stm_gpio(4, 4)
 
-/* The hdk7111 board is populated with NOR, NAND, and Serial Flash.  The setup
- * below assumes the board is in its default boot-from-NOR configuration.  Other
- * boot configurations are possible but require board-level modifications to be
- * made, and equivalent changes to the setup here.  Note, only boot-from-NOR has
- * been fully tested.
+/* The Fortis HS7819 main board is populated with NAND Flash.  The setup
+ * below assumes the board is in its default boot-from-NAND configuration.
  */
 
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers",
+                                   "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+
+#if 0 //#ifdef CONFIG_BPA2_DIRECTFBOPTIMIZED
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4Mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4Mb)
+0x40800000 - 0x475FFFFF - linux     (110Mb)
+0x47600000 - 0x4F1FFFFF - lmi_io    (124Mb)
+0x4F200000 - 0x4FFFFFFF - bigphys   ( 14Mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "LMI_IO",
+		.start = 0x47600000,
+		.size  = 0x07C00000, /* 124 Mb */
+		.flags = 0,
+		.aka   = LMI_IO_partalias
+	},
+	{
+		.name  = "bigphysarea",
+		.start = 0x4F200000,
+		.size  = 0x00E00000, /* 14 Mb */
+		.flags = 0,
+		.aka   = NULL
+	},
+};
+#else
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4Mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4Mb)
+0x40800000 - 0x47FFFFFF - linux     (120Mb) 
+0x48000000 - 0x49FFFFFF - bigphys   ( 32Mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io    ( 96Mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "bigphysarea",
+		.start = 0x48000000,
+		.size  = 0x02000000, /* 32 Mb */
+		.flags = 0,
+		.aka   = NULL
+	},
+	{
+		.name  = "LMI_IO",
+		.start = 0x4A000000,
+		.size  = 0x06000000, /* 96 Mb */
+		.flags = 0,
+		.aka   = LMI_IO_partalias
+	},
+};
+#endif
+
 static void __init hdk7111_setup(char** cmdline_p)
 {
-	printk(KERN_INFO "STMicroelectronics STx7111 HDK initialisation\n");
+	printk(KERN_INFO "Fortis HS7819 main board initialisation\n");
 
 	stx7111_early_device_init();
 
 	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
 			.hw_flow_control = 0,
 			.is_console = 1, });
 
-}
-
-static struct platform_device hdk7111_leds = {
-	.name = "leds-gpio",
-	.id = -1,
-	.dev.platform_data = &(struct gpio_led_platform_data) {
-		.num_leds = 1,
-		.leds = (struct gpio_led[]) {
-			{
-				.name = "HB red",
-				.default_trigger = "heartbeat",
-				.gpio = stm_gpio(3, 0),
-			},
-		},
-	},
-};
-
-static struct gpio_keys_button hdk7111_buttons[] = {
-	{
-		.code = BTN_0,
-		.gpio = stm_gpio(6, 4),
-		.desc = "SW1",
-	},
-	{
-		.code = BTN_1,
-		.gpio = stm_gpio(6, 5),
-		.desc = "SW2",
-	},
-	{
-		.code = BTN_2,
-		.gpio = stm_gpio(6, 6),
-		.desc = "SW3",
-	},
-};
-
-static struct gpio_keys_platform_data hdk7111_button_data = {
-	.buttons = hdk7111_buttons,
-	.nbuttons = ARRAY_SIZE(hdk7111_buttons),
-};
-
-static struct platform_device hdk7111_button_device = {
-	.name = "gpio-keys",
-	.id = -1,
-	.num_resources = 0,
-	.dev = {
-		.platform_data = &hdk7111_button_data,
-	}
-};
-
-static struct platform_device hdk7111_nor_flash = {
-	.name		= "physmap-flash",
-	.id		= -1,
-	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 32*1024*1024),
-	},
-	.dev.platform_data = &(struct physmap_flash_data) {
-		.width		= 2,
-		.nr_parts	= 3,
-		.parts		=  (struct mtd_partition []) {
-			{
-				.name = "NOR Flash 1",
-				.size = 0x00080000,
-				.offset = 0x00000000,
-			}, {
-				.name = "NOR Flash 2",
-				.size = 0x00200000,
-				.offset = MTDPART_OFS_NXTBLK,
-			}, {
-				.name = "NOR Flash 3",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
-
-
-	},
-};
+	stx7111_configure_asc(3, &(struct stx7111_asc_config) {
+			.hw_flow_control = 0,
+			.is_console = 0, });
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
 
 struct stm_nand_bank_data hdk7111_nand_flash = {
 	.csn		= 1,
 	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
-	.nr_partitions	= 2,
+	.nr_partitions	= 9,
 	.partitions	= (struct mtd_partition []) {
 		{
-			.name	= "NAND Flash 1",
-			.offset	= 0,
-			.size 	= 0x00800000
-		}, {
-			.name	= "NAND Flash 2",
-			.offset = MTDPART_OFS_NXTBLK,
-			.size	= MTDPART_SIZ_FULL
-		},
+			.name   = "boot",             // mtd0
+			.offset = 0x00000000,
+			.size   = 0x00400000          // 256 kbyte (reserved flash space is 4 Mbyte)
+		},
+		{
+			.name   = "kernel",           // mtd1
+			.offset = 0x00500000,         //   5 Mbyte
+			.size   = 0x00300000          //   3 Mbyte
+		},
+		{
+			.name   = "rootfs",           // mtd2 (UBI)
+			.offset = MTDPART_OFS_NXTBLK, //   8 Mbyte
+			.size   = 0x06000000          //  96 Mbyte
+		},
+		{
+			.name   = "NAND 2",           // mtd3
+			.offset = 0x00000000,         //   0 Mbyte
+			.size   = 0x08000000          // 128 Mbyte
+		},
+		{
+			.name   = "NAND 3",           // mtd4
+			.offset = MTDPART_OFS_NXTBLK, // 128 Mbyte
+			.size   = MTDPART_SIZ_FULL    // 128 Mbyte
+		},
+		{
+			.name   = "config",           // mtd5
+			.offset = 0x00400000,         //   4 Mbyte
+			.size   = 0x00100000          //   1 Mbyte
+		},
+		{
+			.name   = "user",             // mtd6
+			.offset = 0x06800000,         // 104 Mbyte
+			.size   = 0x09000000          // 144 Mbyte
+		},
+		{
+			.name   = "ALL",              // mtd7
+			.offset = 0x00000000,         //   0 Mbyte
+			.size   = MTDPART_SIZ_FULL    // 256 Mbyte
+		},
+		{
+			.name   = "config1",          // mtd8
+			.offset = 0x0F800000,         // 248 Mbyte
+			.size   = 0x00500000          //   5 Mbyte
+ 		}
 	},
 	.timing_data	= &(struct stm_nand_timing_data) {
 		.sig_setup	= 50,		/* times in ns */
@@ -160,30 +175,6 @@
 	},
 };
 
-static struct spi_board_info hdk7111_serial_flash_board_info =  {
-	.modalias       = "m25p80",
-	.bus_num	= 0,
-	.max_speed_hz   = 7000000,
-	.chip_select	= stm_gpio(6, 7),
-	.mode		= SPI_MODE_3,
-	.platform_data  = &(struct flash_platform_data) {
-		.name = "m25p80",
-		.type = "m25p16",
-		.nr_parts	= 2,
-		.parts = (struct mtd_partition []) {
-			{
-				.name = "Serial Flash 1",
-				.size = 0x00080000,
-				.offset = 0,
-			}, {
-				.name = "Serial Flash 2",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
-	},
-};
-
 static int hdk7111_phy_reset(void *bus)
 {
 	gpio_set_value(HDK7111_PIO_PHY_RESET, 0);
@@ -203,27 +194,6 @@
 #define HDK7111_PCI_IDSEL stm_gpio(4, 4)
 #define HDK7111_PCI_SERR_IRQ ILC_EXT_IRQ(1)
 
-static struct stm_plat_pci_config hdk7111_pci_config = {
-	.pci_irq = {
-		/* Bizarre irq usage */
-		[0] = PCI_PIN_UNUSED,
-		[1] = PCI_PIN_DEFAULT,
-		[2] = PCI_PIN_DEFAULT,
-		[3] = PCI_PIN_UNUSED,
-	},
-	.serr_irq = HDK7111_PCI_SERR_IRQ,
-	.idsel_lo = 30, /* Actually unused, connected to PIO */
-	.idsel_hi = 30,
-	.req_gnt = {
-		[0] = PCI_PIN_DEFAULT,
-		[1] = PCI_PIN_UNUSED,
-		[2] = PCI_PIN_UNUSED,
-		[3] = PCI_PIN_UNUSED
-	},
-	.pci_clk = 33333333,
-	.pci_reset_gpio = stm_gpio(3, 7),
-};
-
 int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
 {
 	int ret = -EINVAL;
@@ -240,9 +210,7 @@
 }
 
 static struct platform_device *hdk7111_devices[] __initdata = {
-	&hdk7111_leds,
-	&hdk7111_button_device,
-	&hdk7111_nor_flash,
+//	&hdk7111_nand_flash_device,
 };
 
 static int __init hdk7111_devices_init(void)
@@ -254,24 +222,9 @@
 	/* Configure Flash according to boot-device */
 	sc = sysconf_claim(SYS_STA, 1, 16, 17, "boot_device");
 	switch (sysconf_read(sc)) {
-	case 0x0:
-		/* Boot-from-NOR: */
-		pr_info("Configuring FLASH for boot-from-NOR\n");
-		nor_bank_base = emi_bank_base(0);
-		nor_bank_size = emi_bank_base(1) - nor_bank_base;
-		hdk7111_nand_flash.csn = 1;
-		break;
 	case 0x1:
 		/* Boot-from-NAND */
 		pr_info("Configuring FLASH for boot-from-NAND\n");
-		nor_bank_base = emi_bank_base(1);
-		nor_bank_size = emi_bank_base(2) - nor_bank_base;
-		hdk7111_nand_flash.csn = 0;
-		break;
-	case 0x2:
-		/* Boot-from-SPI */
-		pr_info("Configuring FLASH for boot-from-SPI\n");
-		/* NOR mapped to EMIB, with physical offset of 0x06000000! */
 		nor_bank_base = emi_bank_base(1);
 		nor_bank_size = emi_bank_base(2) - nor_bank_base;
 		hdk7111_nand_flash.csn = 0;
@@ -282,41 +235,13 @@
 	}
 	sysconf_release(sc);
 
-	/* Update NOR Flash base address and size: */
-	/*     - reduce visibility of NOR flash to EMI bank size */
-	if (hdk7111_nor_flash.resource[0].end > nor_bank_size - 1)
-		hdk7111_nor_flash.resource[0].end = nor_bank_size - 1;
-	/*     - update resource parameters */
-	hdk7111_nor_flash.resource[0].start += nor_bank_base;
-	hdk7111_nor_flash.resource[0].end += nor_bank_base;
-
 	stx7111_configure_nand(&(struct stm_nand_config) {
 			.driver = stm_nand_flex,
 			.nr_banks = 1,
 			.banks = &hdk7111_nand_flash,
 			.rbn.flex_connected = 1,});
 
-	spi_register_board_info(&hdk7111_serial_flash_board_info, 1);
-
-	/* The hdk board is another board where the IDSEL line is erroneously
-	 * connected to a PIO rather than to the address lines. Since there is
-	 * only one card, we just claim it and drive it high permanently, so
-	 * that card is always selected for config cycles.
-	 */
-	if (!gpio_request(HDK7111_PCI_IDSEL, "pci idsel"))
-		gpio_direction_output(HDK7111_PCI_IDSEL, 1);
-	else
-		pr_err("Unable to claim IDSEL PCI signal\n");
-	/* The SERR interrupt is connected to the external IRQ pins */
-	set_irq_type(HDK7111_PCI_SERR_IRQ, IRQ_TYPE_LEVEL_LOW);
-	stx7111_configure_pci(&hdk7111_pci_config);
-
-	stx7111_configure_pwm(&(struct stx7111_pwm_config) {
-				.out0_enabled = 1,
-				.out1_enabled = 0,
-				});
-
-	stx7111_configure_ssc_spi(0, NULL);
+	stx7111_configure_ssc_i2c(0, NULL);
 	stx7111_configure_ssc_i2c(1, NULL);
 	stx7111_configure_ssc_i2c(2, NULL);
 	stx7111_configure_ssc_i2c(3, NULL);
--- linux-sh4/arch/sh/include/asm/irq-ilc.h	2012-03-31 15:26:54.634523363 +0200
+++ linux-sh4/arch/sh/include/asm/irq-ilc.h.patched	2012-03-31 15:26:54.084558439 +0200
@@ -44,7 +44,7 @@
 #define ILC_IRQ(x)	(ILC_FIRST_IRQ + (x))
 #elif	defined(CONFIG_CPU_SUBTYPE_STX7111)
 #define ILC_FIRST_IRQ	176
-#define ILC_NR_IRQS	(64+36)
+#define ILC_NR_IRQS	(64+35)
 #define ILC_INT_IRQ(x)	(ILC_FIRST_IRQ + (x))
 #define ILC_EXT_IRQ(x)	(ILC_FIRST_IRQ + 64 + (x))
 #define ILC_IRQ(x)	ILC_INT_IRQ(x)
--- linux-sh4/drivers/stm/stx7111_comms.c	2012-03-31 15:26:54.723480793 +0200
+++ linux-sh4/drivers/stm/stx7111_comms.c.patched	2012-03-31 15:26:54.982982566 +0200
@@ -69,10 +69,10 @@
 	[3] = {
 		.gpios_num = 4,
 		.gpios = (struct stm_pad_gpio []) {
-			STM_PAD_PIO_OUT(5, 0, 1),	/* TX */
-			STM_PAD_PIO_IN(5, 1, -1),	/* RX */
-			STM_PAD_PIO_IN_NAMED(5, 2, -1, "CTS"),
-			STM_PAD_PIO_OUT_NAMED(5, 3, 1, "RTS"),
+			STM_PAD_PIO_OUT(6, 7, 1),	/* TX */
+			STM_PAD_PIO_IN(6, 3, -1),	/* RX */
+			STM_PAD_PIO_IN_NAMED(6, 2, -1, "CTS"),
+			STM_PAD_PIO_OUT_NAMED(6, 6, 1, "RTS"),
 		},
 	},
 };
@@ -125,8 +125,8 @@
 		/* .id set in stx7111_configure_asc() */
 		.num_resources	= 4,
 		.resource	= (struct resource[]) {
-			STM_PLAT_RESOURCE_MEM(0xfd033000, 0x2c),
-			STM_PLAT_RESOURCE_IRQ(evt2irq(0x1100), -1),
+			STM_PLAT_RESOURCE_MEM(0xfd034000, 0x2c),
+			STM_PLAT_RESOURCE_IRQ(evt2irq(0x2440), -1),
 			STM_PLAT_RESOURCE_DMA_NAMED("rx_half_full", 14),
 			STM_PLAT_RESOURCE_DMA_NAMED("tx_half_empty", 18),
 		},
--- linux-sh4/drivers/stm/gpio.c	2012-03-31 15:26:55.000000000 +0200
+++ linux-sh4/drivers/stm/gpio.c.patched	2012-07-08 17:17:27.000000000 +0200
@@ -28,12 +28,17 @@
 #include <linux/stm/pad.h>
 #include <linux/stm/pio.h>
 #include <linux/stm/pm_sys.h>
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#endif
 #include "reg_pio.h"
 
 
 
 struct stpio_pin {
 #ifdef CONFIG_STPIO
+	const char *pin_name;
	void (*func)(struct stpio_pin *pin, void *dev);
	void* dev;
	unsigned short port_no, pin_no;
 #endif
@@ -52,6 +57,7 @@
 #ifdef CONFIG_HIBERNATION
 	unsigned char pm_saved_data;
 #endif
+	unsigned char direction;
 	struct stpio_pin stpio;
 };
 
@@ -392,6 +398,9 @@
 
 	gpio_pm_set_direction(&port->pins[offset], direction);
 	set__PIO_PCx(port->base, offset, direction);
+
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 }
 
 
@@ -510,6 +519,10 @@
 
 void stpio_free_pin(struct stpio_pin *pin)
 {
+	stpio_configure_pin(pin, STPIO_IN);
+	pin->pin_name = NULL;
+	pin->func = 0;
+	pin->dev = 0;
 	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
 }
 EXPORT_SYMBOL(stpio_free_pin);
@@ -624,6 +637,85 @@
 	set_irq_type(irq, triggertype);
 }
 EXPORT_SYMBOL(stpio_set_irq_type);
+#ifdef CONFIG_PROC_FS
+
+static struct proc_dir_entry *proc_stpio;
+
+static inline const char *stpio_get_direction_name(unsigned int direction)
+{
+	switch (direction) {
+	case STPIO_NONPIO:     return "IN  (pull-up)      ";
+	case STPIO_BIDIR:      return "BI  (open-drain)   ";
+	case STPIO_OUT:        return "OUT (push-pull)    ";
+	case STPIO_IN:         return "IN  (Hi-Z)         ";
+	case STPIO_ALT_OUT:    return "Alt-OUT (push-pull)";
+	case STPIO_ALT_BIDIR:  return "Alt-BI (open-drain)";
+	default:               return "forbidden          ";
+	}
+};
+
+static inline const char *stpio_get_handler_name(void *func)
+{
+	static char sym_name[KSYM_NAME_LEN];
+	char *modname;
+	unsigned long symbolsize, offset;
+	const char *symb;
+
+	if (func == NULL)
+		return "";
+
+	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+			&modname, sym_name);
+
+	return symb ? symb : "???";
+}
+
+static int stpio_read_proc(char *page, char **start, off_t off, int count,
+		int *eof, void *data_unused)
+{
+	int len;
+	int port_no, pin_no;
+	off_t begin = 0;
+	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+	struct stm_gpio_port *port;
+	struct stm_gpio_pin *pin;
+
+	len = sprintf(page, "  port      name          direction\n");
+	for (port_no = 0; port_no < num_ports; port_no++)
+	{
+		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++) {
+
+			port = &stm_gpio_ports[port_no];
+			if (!port) continue;
+
+			pin = &port->pins[pin_no];
+			if (!pin) continue;
+
+			char *name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+			len += sprintf(page + len,
+					"PIO %d.%d [%-10s] [%s] [%s]\n",
+					port_no, pin_no, name,
+					stpio_get_direction_name(pin->direction),
+					stpio_get_handler_name(pin->stpio.func));
+ 			if (len + begin > off + count)
+				goto done;
+			if (len + begin < off) {
+				begin += len;
+				len = 0;
+			}
+		}
+	}
+
+	*eof = 1;
+
+done:
+	if (off >= len + begin)
+		return 0;
+	*start = page + (off - begin);
+	return ((count < begin + len - off) ? count : begin + len - off);
+}
+
+#endif /* CONFIG_PROC_FS */
 
 #endif /* CONFIG_STPIO */
 
@@ -1031,7 +1123,11 @@
 static int __init stm_gpio_init(void)
 {
 	int ret;
-
+#ifdef CONFIG_PROC_FS
+	proc_stpio = create_proc_entry("stpio", 0, NULL);
+	if (proc_stpio)
+		proc_stpio->read_proc = stpio_read_proc;
+#endif
 	ret = platform_driver_register(&stm_gpio_driver);
 	if (ret)
 		return ret;
--- linux-sh4/drivers/net/phy/phy_device.c	2012-03-31 15:26:54.440157990 +0300
+++ linux-sh4/drivers/net/phy/phy_device.c.patched	2012-03-31 15:26:54.308158605 +0300
@@ -1104,7 +1104,7 @@
 		return retval;
 	}
 
-	pr_debug("%s: Registered new driver\n", new_driver->name);
+	pr_info("%s: Registered new driver (0x%08x)\n", new_driver->name, new_driver->phy_id);
 
 	return 0;
 }
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c	2012-03-31 15:26:54.233314199 +0300
+++ linux-sh4/drivers/net/stmmac/stmmac_mdio.c.patched	2012-03-31 15:26:54.531239690 +0300
@@ -170,6 +170,7 @@
 	priv->mii = new_bus;
 
 	found = 0;
+
 	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
 		struct phy_device *phydev = new_bus->phy_map[addr];
 		if (phydev) {
@@ -194,12 +195,22 @@
 			 * and no PHY number was provided to the MAC,
 			 * use the one probed here.
 			 */
-			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
-			    (priv->plat->phy_addr == -1))
+
+			act = 0;
+
+			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && (/*(priv->plat->phy_addr == -1) ||*/
+					(phydev->phy_id == 0x0181b880) || // Davicom DM9161E
+					(phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
+					(phydev->phy_id == 0x00181b80) || // Davicom DM9131
+					(phydev->phy_id == 0x1c040011) || // STe100p
+					(phydev->phy_id == 0x00061c50) || // STe101p
+					(phydev->phy_id == 0x00008201) || (phydev->phy_id == 0x0007c0f1) ||
+					(phydev->phy_id == 0x001cc912)))  // RTL821x
+			{
 				priv->plat->phy_addr = addr;
+ 				act = 1;
+ 			}
 
-			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
-				(priv->plat->phy_addr == addr);
 			switch (phydev->irq) {
 			case PHY_POLL:
 				irq_str = "POLL";
