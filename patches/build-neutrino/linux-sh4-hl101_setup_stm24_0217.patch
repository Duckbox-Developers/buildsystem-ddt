--- a/arch/sh/boards/mach-mb442/setup.c
+++ b/arch/sh/boards/mach-mb442/setup.c
@@ -22,14 +22,30 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
+#include <linux/bpa2.h>
 
-
-
-#define MB442_PIO_STE100P_RESET stm_gpio(2, 4)
-#define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
+#define MB442_PIO_STE100P_RESET stm_gpio(3, 6)
 #define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
 
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
 
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+ {
+         .name = "LMI_VID",
+         .start = 0x10800000,
+         .size = 0x03800000,
+         .flags = 0,
+         .aka = LMI_VID_partalias
+ },
+ {
+         .name = "LMI_SYS",
+         .start = 0,
+         .size = 0x01400000,
+         .flags = 0,
+         .aka = LMI_SYS_partalias
+ }
+};
 
 void __init mb442_setup(char** cmdline_p)
 {
@@ -43,6 +59,8 @@
 	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
 			.is_console = 0, });
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
 static struct resource mb442_smc91x_resources[] = {
@@ -70,6 +88,36 @@
 	gpio_set_value(MB442_PIO_FLASH_VPP, enable);
 }
 
+static struct mtd_partition mtd_parts_table[] =
+{
+        {
+                .name = "Boot Firmware",
+                .size = 0x00040000,        //u-boot 0x00000000-0xa003ffff 256k
+                .offset = 0x00000000,
+                mask_flags: 0
+        },
+        {
+                .name = "Boot Config",
+                .size = 0x00020000,        //boot config 0xa0040000-0xa005ffff 128k
+                .offset = 0x00040000,
+         },
+        {
+                .name = "Kernel",
+                .size = 0x00280000,        //kernel 0x40000-0x2dffff 2.5MB
+                .offset = 0x00060000,
+        },
+        {
+                .name = "ROOTFS (Backup)",
+                .size = 0x002E0000,
+                .offset = 0x00240000,
+        },
+         {
+                .name = "Full without bootloader",
+                .size = 0x00580000,
+                .offset = 0x00040000,
+        },
+};
+
 static struct platform_device mb442_physmap_flash = {
 	.name		= "physmap-flash",
 	.id		= -1,
@@ -80,6 +128,8 @@
 	.dev.platform_data = &(struct physmap_flash_data) {
 		.width		= 2,
 		.set_vpp	= mb442_set_vpp,
+		.nr_parts        = ARRAY_SIZE(mtd_parts_table),
+		.parts                = mtd_parts_table
 	},
 };
 
@@ -95,7 +145,7 @@
 	return 1;
 }
 
-#define STMMAC_PHY_ADDR 14
+#define STMMAC_PHY_ADDR 2
 static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
 	[STMMAC_PHY_ADDR] = IRL3_IRQ,
 };
@@ -119,9 +169,9 @@
 			.out0_enabled = 0,
 			.out1_enabled = 1, });
 
-	stx7100_configure_ssc_i2c(0, NULL);
-	stx7100_configure_ssc_spi(1, NULL);
-	stx7100_configure_ssc_i2c(2, NULL);
+	stx7100_configure_ssc_i2c(0);
+        stx7100_configure_ssc_i2c(1);
+        stx7100_configure_ssc_i2c(2);
 
 	stx7100_configure_usb();
 
@@ -130,11 +180,6 @@
 			.tx_enabled = 0,
 			.tx_od_enabled = 0, });
 
-	stx7100_configure_pata(&(struct stx7100_pata_config) {
-			.emi_bank = 3,
-			.pc_mode = 1,
-			.irq = IRL1_IRQ, });
-
 	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
 	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
 
@@ -149,14 +194,6 @@
 			.mdio_bus_data = &stmmac_mdio_bus,
 		});
 
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
-
 	return platform_add_devices(mb442_devices,
 			ARRAY_SIZE(mb442_devices));
 }

*** a/drivers/net/phy/phy_device.c
--- b/drivers/net/phy/phy_device.c
***************
*** 1104,1110 ****
  		return retval;
  	}
  
! 	pr_debug("%s: Registered new driver\n", new_driver->name);
  
  	return 0;
  }
--- 1104,1110 ----
  		return retval;
  	}
  
! 	pr_info("%s: Registered new driver (0x%08x)\n", new_driver->name, new_driver->phy_id);
  
  	return 0;
  }
*** a/drivers/net/stmmac/stmmac_mdio.c
--- b/drivers/net/stmmac/stmmac_mdio.c
***************
*** 194,202 ****
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
! 			    (priv->plat->phy_addr == -1))
! 				priv->plat->phy_addr = addr;
  
  			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
  				(priv->plat->phy_addr == addr);
--- 194,208 ----
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 
! 			 if ((priv->plat->bus_id == mdio_bus_data->bus_id) && ((priv->plat->phy_addr == -1) ||
! 			 (phydev->phy_id == 0x0181b880) || // Davicom DM9161E
! 			 (phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
! 			 (phydev->phy_id == 0x00181b80) || // Davicom DM9131
! 			 (phydev->phy_id == 0x1c040011) || // STe100p
! 			 (phydev->phy_id == 0x00061c50) || // STe101p
! 			 (phydev->phy_id == 0x001cc912))) // RTL821x
! 			 priv->plat->phy_addr = addr;
  
  			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
  				(priv->plat->phy_addr == addr);
--- a/include/linux/stm/stx7100.h
+++ b/include/linux/stm/stx7100_orig.h
@@ -34,15 +34,11 @@
 };
 void stx7100_configure_asc(int asc, struct stx7100_asc_config *config);
 
-
-struct stx7100_ssc_i2c_config {
-	unsigned int fastmode:1;
-};
 struct stx7100_ssc_spi_config {
 	void (*chipselect)(struct spi_device *spi, int is_on);
 };
 /* SSC configure functions return I2C/SPI bus number */
-int stx7100_configure_ssc_i2c(int ssc, struct stx7100_ssc_i2c_config *config);
+int stx7100_configure_ssc_i2c(int ssc);
 int stx7100_configure_ssc_spi(int ssc, struct stx7100_ssc_spi_config *config);
 
 
 struct stx7100_lirc_config {
--- a/drivers/stm/gpio.c.orig
+++ b/drivers/stm/gpio.c
@@ -27,13 +27,17 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/pad.h>
 #include <linux/stm/pio.h>
-#include <linux/stm/pm_sys.h>
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#endif
 #include "reg_pio.h"
 
 
 
 struct stpio_pin {
 #ifdef CONFIG_STPIO
+	const char *pin_name;
 	void (*func)(struct stpio_pin *pin, void *dev);
 	void* dev;
 	unsigned short port_no, pin_no;
@@ -49,50 +53,10 @@
 #define PIN_IGNORE_FALLING_EDGE	(PIN_IGNORE_EDGE_FLAG | 1)
 #define PIN_IGNORE_EDGE_MASK	(PIN_IGNORE_EDGE_FLAG | PIN_IGNORE_EDGE_VAL)
 
-#ifdef CONFIG_HIBERNATION
-	unsigned char pm_saved_data;
-#endif
+	unsigned char direction;
 	struct stpio_pin stpio;
 };
 
-#ifdef CONFIG_HIBERNATION
-#define GPIO_DIR_MASK  0x7f
-#define GPIO_VAL_MASK  0x80
-static inline void gpio_pm_set_direction(struct stm_gpio_pin *pin,
-	unsigned int dir)
-{
-	pin->pm_saved_data &= ~GPIO_DIR_MASK;
-	pin->pm_saved_data |= dir & GPIO_DIR_MASK;
-}
-
-static inline unsigned char gpio_pm_get_direction(struct stm_gpio_pin *pin)
-{
-	return pin->pm_saved_data & GPIO_DIR_MASK;
-}
-
-static inline void gpio_pm_set_value(struct stm_gpio_pin *pin, int val)
-{
-	pin->pm_saved_data &= ~GPIO_VAL_MASK;
-	pin->pm_saved_data |= (val ? GPIO_VAL_MASK : 0);
-}
-
-static inline int gpio_pm_get_value(struct stm_gpio_pin *pin)
-{
-	return (pin->pm_saved_data & GPIO_VAL_MASK) ? 1 : 0;
-}
-#else
-static inline void gpio_pm_set_direction(struct stm_gpio_pin *pin,
-	unsigned int dir)
-{
-	return;
-}
-
-static inline void gpio_pm_set_value(struct stm_gpio_pin *pin, int val)
-{
-	return;
-}
-
-#endif
 
 #define to_stm_gpio_port(chip) \
 		container_of(chip, struct stm_gpio_port, gpio_chip)
@@ -105,6 +69,8 @@
 	void *base;
 	unsigned long irq_level_mask;
 	struct stm_gpio_pin pins[STM_GPIO_PINS_PER_PORT];
+	struct sys_device sysdev;
+        pm_message_t pm_state;
 };
 
 struct stm_gpio_irqmux {
@@ -112,7 +78,7 @@
 	int port_first;
 };
 
-
+static struct sysdev_class stm_gpio_sysdev_class;
 
 
 int stm_gpio_num; /* Number of available internal PIOs (pins) */
@@ -374,7 +340,6 @@
 static inline void __stm_gpio_set(struct stm_gpio_port *port, unsigned offset,
 		int value)
 {
-	gpio_pm_set_value(&port->pins[offset], value);
 	if (value)
 		set__PIO_SET_POUT__SET_POUT__SET(port->base, offset);
 	else
@@ -390,8 +355,11 @@
 			direction != STM_GPIO_DIRECTION_ALT_OUT &&
 			direction != STM_GPIO_DIRECTION_ALT_BIDIR);
 
-	gpio_pm_set_direction(&port->pins[offset], direction);
+	port->pins[offset].direction = direction;
 	set__PIO_PCx(port->base, offset, direction);
+
+	if (!port->pins[offset].stpio.pin_name)
+                port->pins[offset].stpio.pin_name = "-----";
 }
 
 
@@ -424,7 +392,11 @@
 
 static int stm_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
 {
-	stm_pad_configure_gpio(chip->base + offset, STM_GPIO_DIRECTION_IN);
+	struct stm_gpio_port *port = to_stm_gpio_port(chip);
+
+	set__PIO_PCx__INPUT_HIGH_IMPEDANCE(port->base, offset);
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 
 	return 0;
 }
@@ -436,7 +408,9 @@
 
 	__stm_gpio_set(port, offset, value);
 
-	stm_pad_configure_gpio(chip->base + offset, STM_GPIO_DIRECTION_OUT);
+	set__PIO_PCx__OUTPUT_PUSH_PULL(port->base, offset);
+	if (!port->pins[offset].stpio.pin_name)
+		port->pins[offset].stpio.pin_name = "-----";
 
 	return 0;
 }
@@ -504,12 +478,17 @@
 	gpio_pin->stpio.port_no = port_no;
 	gpio_pin->stpio.pin_no = pin_no;
 
+	gpio_pin->stpio.pin_name = (name==NULL)?"-----":name;
 	return &gpio_pin->stpio;
 }
 EXPORT_SYMBOL(__stpio_request_pin);
 
 void stpio_free_pin(struct stpio_pin *pin)
 {
+	stpio_configure_pin(pin, STPIO_IN);
+	pin->pin_name = NULL;
+	pin->func = 0;
+	pin->dev = 0;
 	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
 }
 EXPORT_SYMBOL(stpio_free_pin);
@@ -625,6 +604,87 @@
 }
 EXPORT_SYMBOL(stpio_set_irq_type);
 
+#ifdef CONFIG_PROC_FS
+
+static struct proc_dir_entry *proc_stpio;
+
+static inline const char *stpio_get_direction_name(unsigned int direction)
+{
+        switch (direction) {
+        case STPIO_NONPIO:                return "IN (pull-up) ";
+        case STPIO_BIDIR:                return "BI (open-drain) ";
+        case STPIO_OUT:                        return "OUT (push-pull) ";
+        case STPIO_IN:                        return "IN (Hi-Z) ";
+        case STPIO_ALT_OUT:                return "Alt-OUT (push-pull)";
+        case STPIO_ALT_BIDIR:        return "Alt-BI (open-drain)";
+        default:                                return "forbidden ";
+        }
+};
+
+static inline const char *stpio_get_handler_name(void *func)
+{
+        static char sym_name[KSYM_NAME_LEN];
+        char *modname;
+        unsigned long symbolsize, offset;
+        const char *symb;
+
+        if (func == NULL)
+                return "";
+
+        symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+                        &modname, sym_name);
+
+        return symb ? symb : "???";
+}
+
+static int stpio_read_proc(char *page, char **start, off_t off, int count,
+                int *eof, void *data_unused)
+{
+        int len;
+        int port_no, pin_no;
+        off_t begin = 0;
+        int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+        struct stm_gpio_port *port;
+        struct stm_gpio_pin *pin;
+
+        len = sprintf(page, " port name direction\n");
+        for (port_no = 0; port_no < num_ports; port_no++)
+        {
+                for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++) {
+
+                        port = &stm_gpio_ports[port_no];
+                        if(!port) continue;
+
+                        pin = &port->pins[pin_no];
+                        if(!pin) continue;
+
+                        char *name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+                        len += sprintf(page + len,
+                                        "PIO %d.%d [%-10s] [%s] [%s]\n",
+                                        port_no, pin_no, name,
+                                        stpio_get_direction_name(pin->direction),
+                                        stpio_get_handler_name(pin->stpio.func));
+
+                        if (len + begin > off + count)
+                                goto done;
+                        if (len + begin < off) {
+                                begin += len;
+                                len = 0;
+                        }
+                }
+        }
+
+        *eof = 1;
+
+done:
+        if (off >= len + begin)
+                return 0;
+        *start = page + (off - begin);
+        return ((count < begin + len - off) ? count : begin + len - off);
+}
+
+#endif /* CONFIG_PROC_FS */
+
 #endif /* CONFIG_STPIO */
 
 
@@ -801,6 +861,7 @@
 	struct stm_gpio_port *port = &stm_gpio_ports[port_no];
 	struct resource *memory;
 	int irq;
+	int ret;
 
 	BUG_ON(port_no < 0);
 	BUG_ON(port_no >= stm_gpio_num);
@@ -828,7 +889,11 @@
 	port->gpio_chip.label = dev_name(&pdev->dev);
 	dev_set_drvdata(&pdev->dev, port);
 
-	return 0;
+	port->sysdev.id = port_no;
+	port->sysdev.cls = &stm_gpio_sysdev_class;
+	ret = sysdev_register(&port->sysdev);
+	if (ret)
+		return ret;
 
 	/* This is a good time to check consistency of linux/stm/gpio.h
 	 * declarations with the proper source... */
@@ -920,46 +985,18 @@
 /*** Drivers initialization ***/
 
 #ifdef CONFIG_PM
-#ifdef CONFIG_HIBERNATION
-/*
- * platform_allow_pm_gpio
- * Every platform implementation of this function has to check if
- * a specific gpio_pin can be managed or not in the PM core code
- */
-int __weak platform_allow_pm_gpio(int gpio, int freezing)
-{
-	return 1;
-}
-
-static int stm_gpio_port_restore(struct stm_gpio_port *port)
+static int stm_gpio_hibernation_resume(struct stm_gpio_port *port)
 {
 	int pin_no;
 
-	for (pin_no = 0; pin_no < port->gpio_chip.ngpio; ++pin_no) {
-		struct stm_gpio_pin *pin = &port->pins[pin_no];
-
-		if (!platform_allow_pm_gpio(
-			stm_gpio(port - stm_gpio_ports, pin_no), 0))
-			continue;
+	for (pin_no = 0; pin_no < port->gpio_chip.ngpio; ++pin_no)
 		/*
-		 * Direction can not be zero! Zero means 'un-claimed'
-		 */
-		if (!gpio_pm_get_direction(pin)) {
-			/*
-			 * On some chip the reset value ins't DIRECTION_IN...
-			 */
+		* Direction can not be zero!
+		* Zero means 'un-claimed'
+		*/
+		if (port->pins[pin_no].direction)
 			__stm_gpio_direction(port, pin_no,
-					STM_GPIO_DIRECTION_IN);
-			/* reset again to say 'un-claimed' as it was */
-			gpio_pm_set_direction(pin, 0);
-			continue;
-		}
-
-		/*
-		 * In case of Direction_Out set the Out value
-		 */
-		if (STM_GPIO_DIRECTION_OUT == gpio_pm_get_direction(pin))
-			__stm_gpio_set(port, pin_no, gpio_pm_get_value(pin));
+					port->pins[pin_no].direction);
 
 		__stm_gpio_direction(port, pin_no, gpio_pm_get_direction(pin));
 
@@ -967,21 +1004,7 @@
 	return 0;
 }
 
-static int stm_gpio_restore(void)
-{
-	int port_no, ret = 0;
-	int port_num = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
-
-	for (port_no = 0; port_no < port_num; ++port_no)
-		ret |= stm_gpio_port_restore(&stm_gpio_ports[port_no]);
-
-	return ret;
-}
-#else
-#define stm_gpio_restore	NULL
-#endif
-
-static int stm_gpio_port_suspend(struct stm_gpio_port *port)
+static int stm_gpio_suspend(struct stm_gpio_port *port)
 {
 	int port_no = port - stm_gpio_ports;
 	int pin_no;
@@ -1000,37 +1023,61 @@
 	return 0;
 }
 
-static int stm_gpio_suspend(void)
+static int stm_gpio_sysdev_suspend(struct sys_device *dev, pm_message_t state)
 {
-	int port_no, ret = 0;
-	int port_num = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+	struct stm_gpio_port *port = sysdev_to_stm_gpio(dev);
+	int ret = 0;
 
-	for (port_no = 0; port_no < port_num; ++port_no)
-		ret |= stm_gpio_port_suspend(&stm_gpio_ports[port_no]);
+	switch (state.event) {
+	case PM_EVENT_ON:
+		if (port->pm_state.event != PM_EVENT_FREEZE)
+			break;
+		ret = stm_gpio_hibernation_resume(port);
+		break;
 
-	return ret;
-}
+	case PM_EVENT_SUSPEND:
+		ret = stm_gpio_suspend(port);
+			break;
+
+	case PM_EVENT_FREEZE:
+		/* do nothing */
+		break;
+	}
+ 
+	port->pm_state = state;
 
 
-static struct stm_system stm_gpio_system = {
-	.name = "gpio",
-	.priority = stm_gpio_pr,
-	.suspend = stm_gpio_suspend,
-	.freeze = stm_gpio_suspend,
-	.restore = stm_gpio_restore,
-};
+	return ret;
+}
 
-static int stm_gpio_subsystem_init(void)
+static int stm_gpio_sysdev_resume(struct sys_device *dev)
 {
-	return stm_register_system(&stm_gpio_system);
+	return stm_gpio_sysdev_suspend(dev, PMSG_ON);
 }
 
-module_init(stm_gpio_subsystem_init);
+#else
+#define stm_gpio_sysdev_suspend NULL
+#define stm_gpio_sysdev_resume NULL
 #endif
 
+static struct sysdev_class stm_gpio_sysdev_class = {
+	.name = "stm-gpio",
+	.suspend = stm_gpio_sysdev_suspend,
+	.resume = stm_gpio_sysdev_resume,
+};
+
 static int __init stm_gpio_init(void)
 {
 	int ret;
+#ifdef CONFIG_PROC_FS
+	proc_stpio = create_proc_entry("stpio", 0, NULL);
+	if (proc_stpio)
+		proc_stpio->read_proc = stpio_read_proc;
+#endif
+
+	ret = sysdev_class_register(&stm_gpio_sysdev_class);
+	if (ret)
+		return ret;
 
 	ret = platform_driver_register(&stm_gpio_driver);
 	if (ret)
--- a/drivers/stm/stx7100_comms.c
+++ b/drivers/stm/stx7100_comms_orig.c
@@ -226,12 +226,10 @@
 			STM_PAD_PIO_BIDIR_NAMED(2, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(2, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC0_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 1, 1, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
 		},
 	},
 	[1] = {
@@ -334,8 +332,7 @@
 
 static int __initdata stx7100_ssc_configured[ARRAY_SIZE(stx7100_ssc_devices)];
 
-int __init stx7100_configure_ssc_i2c(int ssc,
-		struct stx7100_ssc_i2c_config *config)
+int __init stx7100_configure_ssc_i2c(int ssc)
 {
 	static int i2c_busnum;
 	struct stm_plat_ssc_data *plat_data;
@@ -345,13 +342,11 @@
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
 	plat_data->pad_config = &stx7100_ssc_i2c_pad_configs[ssc];
-	if (config)
-		plat_data->i2c_fastmode = config->fastmode;
 
 	/* I2C bus number reservation (to prevent any hot-plug device
 	 * from using it) */	
--- linux-sh4/drivers/stm/stx7100_hispeed.c.orig
+++ linux-sh4/drivers/stm/stx7100_hispeed.c
@@ -193,6 +193,12 @@
 	 */
 	stx7100_usb_pwr_gpio = stm_pad_gpio_request_output(state, "PWR", 1);
 	BUG_ON(stx7100_usb_pwr_gpio == STM_GPIO_INVALID);
+
+	//reset usb on boot - some DVB-T dongles (as102) need it to work properly.
+	gpio_set_value(stx7100_usb_pwr_gpio, 0);
+	mdelay(2000);
+	gpio_set_value(stx7100_usb_pwr_gpio, 1);
+	mdelay(600);
 
 	return 0;
 }
 }
