*** a/arch/sh/kernel/setup.c	2011-01-05 10:45:31.000000000 +0100
--- b/setup.c	2011-01-22 12:22:31.340928000 +0100
***************
*** 389,394 ****
--- 389,422 ----
  #endif
  #endif
  
+ 	{
+ 	char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+ 	char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3 rootfstype=squashfs init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 console_loglevel=7 stmmaceth=ethaddr:";
+ 	char mac[] = "00:00:00:00:00:00";
+ 	int command_line_len = strlen(command_line);
+ 	int org_command_line_len = strlen(org_command_line);
+ 
+ 	if(command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+ 	{
+ 		int i;
+ 		for(i = 0; i < (command_line_len - 7); i++)
+ 		{
+ 			if(!strncmp(command_line + i, "ethaddr", 7))
+ 			{
+ 				strlcpy(mac, command_line + i + 8, sizeof(mac));
+ 				break;
+ 			}
+ 			if(!strncmp(command_line + i, "hwaddr", 6))
+ 			{
+ 				strlcpy(mac, command_line + i + 7, sizeof(mac));
+ 				break;
+ 			}
+ 		}
+ 		strlcpy(command_line, tdt_command_line, sizeof(command_line));
+ 		strlcat(command_line, mac, sizeof(command_line));
+ 	}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;

--- linux-sh4-2.6.32.28_stm24_0207.orig/arch/sh/Makefile	2011-11-22 04:54:46.654521977 +0200
+++ linux-sh4/arch/sh/Makefile	2011-11-22 18:48:46.670896948 +0200
@@ -185,6 +185,7 @@
 machdir-$(CONFIG_SH_ST_MB837)			+= mach-mb837
 machdir-$(CONFIG_SH_ST_MB839)			+= mach-mb839
 machdir-$(CONFIG_SH_ST_MB903)			+= mach-mb903
+machdir-$(CONFIG_SH_ST_SAT7111)			+= mach-sat7111
 
 ifneq ($(machdir-y),)
 core-y	+= $(addprefix arch/sh/boards/, \
--- linux-sh4-2.6.32.28_stm24_0207.orig/arch/sh/boards/Kconfig	2011-11-22 04:54:46.786461622 +0200
+++ linux-sh4/arch/sh/boards/Kconfig	2011-11-22 18:18:05.016655787 +0200
@@ -467,6 +467,14 @@
 	help
 	  Select SH_ST_IPTV7105 if configuring for an STx7105 IPTV board
 
+config SH_ST_SAT7111
+	bool "sat7111: sat7111 board"
+	depends on CPU_SUBTYPE_STX7111
+	default n
+	help
+	  Select this if configuring for an
+	  STMicroelectronics sat7111 Reference Board.
+
 config SH_ST_MB360
 	bool "mb360: ST40RA Eval"
 	depends on CPU_SUBTYPE_ST40STB1
diff -urN linux-sh4-2.6.32.28_stm24_0207.orig/arch/sh/boards/mach-sat7111/Makefile linux-sh4/arch/sh/boards/mach-sat7111/Makefile
--- linux-sh4-2.6.32.28_stm24_0207.orig/arch/sh/boards/mach-sat7111/Makefile	1970-01-01 02:00:00.000000000 +0200
+++ linux-sh4/arch/sh/boards/mach-sat7111/Makefile	2011-11-21 20:05:15.000000000 +0200
@@ -0,0 +1,5 @@
+#
+# Makefile for STMicroelectronics SAT7111 reference board
+#
+
+obj-y := setup.o
diff -urN linux-sh4-2.6.32.28_stm24_0207.orig/arch/sh/boards/mach-sat7111/setup.c linux-sh4/arch/sh/boards/mach-sat7111/setup.c
--- linux-sh4-2.6.32.28_stm24_0207.orig/arch/sh/boards/mach-sat7111/setup.c	1970-01-01 02:00:00.000000000 +0200
+++ linux-sh4/arch/sh/boards/mach-sat7111/setup.c	2011-11-22 20:32:29.866709598 +0200
@@ -0,0 +1,214 @@
+/*
+ * arch/sh/boards/mach-sat7111/setup.c
+ *
+ * Copyright (C) 2011 STMicroelectronics Limited
+ * Author: Jon Frosdick (jon.frosdick@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics sat7111 board support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/leds.h>
+#include <linux/delay.h>
+#include <linux/phy.h>
+#include <linux/i2c.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/input.h>
+#include <linux/irq.h>
+#include <linux/stm/platform.h>
+#include <linux/stm/stx7111.h>
+#include <linux/stm/emi.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/flash.h>
+#include <asm/irq-ilc.h>
+#include <asm/irl.h>
+#include <sound/stm.h>
+#include <linux/bpa2.h>
+
+#define SAT7111_USB_RESET stm_gpio(3, 5)
+#define SAT7111_FLASH_VPP stm_gpio(3, 6)
+#define SAT7111_PHY_RESET stm_gpio(4, 4)
+
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb)
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    },
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x06000000, /* 96 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    },
+ };
+
+static void __init sat7111_setup(char** cmdline_p)
+{
+	printk(KERN_INFO "Fortis hs7810a board initialisation\n");
+
+	stx7111_early_device_init();
+
+	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
+			.hw_flow_control = 0,
+			.is_console = 1, });
+	stx7111_configure_asc(3, &(struct stx7111_asc_config) {
+			.hw_flow_control = 0,
+			.is_console = 0, });
+ 	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+/* enable NOR Flash */
+static void sat7111_nor_set_vpp(struct map_info *info, int enable)
+{
+	gpio_set_value(SAT7111_FLASH_VPP, enable);
+}
+
+static struct platform_device sat7111_nor_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		STM_PLAT_RESOURCE_MEM(0, 32*1024*1024),
+	},
+	.dev.platform_data = &(struct physmap_flash_data) {
+		.width		= 2,
+		.nr_parts	= 6,
+		.set_vpp	= sat7111_nor_set_vpp,
+		.parts		=  (struct mtd_partition []) {
+			{
+				.name = "Boot firmware",
+				.size = 0x00060000,	//	0,375M
+				.offset = 0x00000000,	//	ok
+			},
+			{
+				.name = "Kernel",
+				.size = 0x001c0000,	// 	1,75M
+				.offset = 0x0060000,	//	ok
+			},
+			{
+				.name = "Fw",
+				.size = 0x2a0000,		// 	2M
+				.offset = 0x00f80000,	//	ok
+			},
+			{
+				.name = "Root",
+				.size = 0x00d60000,	// 	13,375M
+				.offset = 0x00220000,	//	ok
+	 		},
+			{
+	 			.name = "Var", // org user
+	 			.size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
+	 			.offset = 0x01c00000, 
+	 		},
+			{
+			.name = "Swap", // org free + config
+			.size = 0x560000,     // 4,375M unused in org kernel
+			.offset = 0x016a0000,
+			},
+		},
+	},
+};
+
+static int sat7111_phy_reset(void *bus)
+{
+	gpio_set_value(SAT7111_PHY_RESET, 1);
+	udelay(1);
+	gpio_set_value(SAT7111_PHY_RESET, 0);
+	udelay(1);
+	gpio_set_value(SAT7111_PHY_RESET, 1);
+	return 1;
+};
+
+static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
+	.bus_id = 0,
+	.phy_reset = &sat7111_phy_reset,
+	.phy_mask = 0,
+};
+
+static struct platform_device *sat7111_devices[] __initdata = {
+	&sat7111_nor_flash,
+};
+
+static int __init sat7111_devices_init(void)
+{
+	stx7111_configure_ssc_i2c(0);
+	stx7111_configure_ssc_i2c(1);
+	stx7111_configure_ssc_i2c(2);
+	stx7111_configure_ssc_i2c(3);
+
+	stx7111_configure_usb(&(struct stx7111_usb_config) {
+			.invert_ovrcur = 1, });
+
+	stx7111_configure_ethernet(&(struct stx7111_ethernet_config) {
+			.mode = stx7111_ethernet_mode_mii,
+			.ext_clk = 0,
+			.phy_bus = 0,
+			.phy_addr = -1,
+			.mdio_bus_data = &stmmac_mdio_bus,});
+
+	gpio_request(SAT7111_PHY_RESET, "PHY");
+	gpio_direction_output(SAT7111_PHY_RESET, 0);
+
+	gpio_request(SAT7111_FLASH_VPP, "FLASH_VPP");
+	gpio_direction_output(SAT7111_FLASH_VPP, 0);
+
+	gpio_request(SAT7111_PHY_RESET, "USB_RESET");
+	gpio_set_value(SAT7111_USB_RESET, 1);
+	udelay(1);
+	gpio_set_value(SAT7111_USB_RESET, 0);
+	udelay(1);
+	gpio_set_value(SAT7111_USB_RESET, 1);
+
+	return platform_add_devices(sat7111_devices,
+				    ARRAY_SIZE(sat7111_devices));
+}
+arch_initcall(sat7111_devices_init);
+
+static void __iomem *sat7111_ioport_map(unsigned long port, unsigned int size)
+{
+	/*
+	 * If we have PCI then this should never be called because we
+	 * are using the generic iomap implementation. If we don't
+	 * have PCI then there are no IO mapped devices, so it still
+	 * shouldn't be called.
+	 */
+	BUG();
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init sat7111_init_irq(void)
+{
+
+}
+
+struct sh_machine_vector mv_sat7111 __initmv = {
+	.mv_name		= "sat7111",
+	.mv_setup		= sat7111_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= sat7111_init_irq,
+	.mv_ioport_map		= sat7111_ioport_map,
+};
--- linux-sh4-2.6.32.28_stm24_0207.orig/arch/sh/include/asm/irq-ilc.h	2011-11-22 04:54:46.634523363 +0200
+++ linux-sh4/arch/sh/include/asm/irq-ilc.h	2011-11-22 22:52:25.084558439 +0200
@@ -40,7 +40,7 @@
 #define ILC_IRQ(x)	(ILC_FIRST_IRQ + (x))
 #elif	defined(CONFIG_CPU_SUBTYPE_STX7111)
 #define ILC_FIRST_IRQ	176
-#define ILC_NR_IRQS	(64+33)
+#define ILC_NR_IRQS	(64+35)
 #define ILC_INT_IRQ(x)	(ILC_FIRST_IRQ + (x))
 #define ILC_EXT_IRQ(x)	(ILC_FIRST_IRQ + 64 + (x))
 #define ILC_IRQ(x)	ILC_INT_IRQ(x)
--- linux-sh4-2.6.32.28_stm24_0207.orig/drivers/stm/stx7111_comms.c	2011-11-22 04:54:42.723480793 +0200
+++ linux-sh4/drivers/stm/stx7111_comms.c	2011-11-22 22:42:00.982982566 +0200
@@ -69,10 +69,10 @@
 	[3] = {
 		.gpios_num = 4,
 		.gpios = (struct stm_pad_gpio []) {
-			STM_PAD_PIO_OUT(5, 0, 1),	/* TX */
-			STM_PAD_PIO_IN(5, 1, -1),	/* RX */
-			STM_PAD_PIO_IN_NAMED(5, 2, -1, "CTS"),
-			STM_PAD_PIO_OUT_NAMED(5, 3, 1, "RTS"),
+			STM_PAD_PIO_OUT(6, 7, 1),	/* TX */
+			STM_PAD_PIO_IN(6, 3, -1),	/* RX */
+			STM_PAD_PIO_IN_NAMED(6, 2, -1, "CTS"),
+			STM_PAD_PIO_OUT_NAMED(6, 6, 1, "RTS"),
 		},
 	},
 };
@@ -125,8 +125,8 @@
 		/* .id set in stx7111_configure_asc() */ 
 		.num_resources	= 4,
 		.resource	= (struct resource[]) {
-			STM_PLAT_RESOURCE_MEM(0xfd033000, 0x2c),
-			STM_PLAT_RESOURCE_IRQ(evt2irq(0x1100), -1),
+			STM_PLAT_RESOURCE_MEM(0xfd034000, 0x2c),
+			STM_PLAT_RESOURCE_IRQ(evt2irq(0x2440), -1),
 			STM_PLAT_RESOURCE_DMA_NAMED("rx_half_full", 14),
 			STM_PLAT_RESOURCE_DMA_NAMED("tx_half_empty", 18),
 		},
*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/stm/gpio.c	2011-08-06 17:16:42.676314198 +0300
--- linux-sh4/drivers/stm/gpio.c	2011-08-07 03:21:10.140239689 +0300
***************
*** 27,38 ****
  #include <linux/stm/platform.h>
  #include <linux/stm/pad.h>
  #include <linux/stm/pio.h>
  #include "reg_pio.h"
  
  
- 
  struct stpio_pin {
  #ifdef CONFIG_STPIO
  	void (*func)(struct stpio_pin *pin, void *dev);
  	void* dev;
  	unsigned short port_no, pin_no;
--- 27,42 ----
  #include <linux/stm/platform.h>
  #include <linux/stm/pad.h>
  #include <linux/stm/pio.h>
+ #ifdef CONFIG_PROC_FS
+ #include <linux/proc_fs.h>
+ #include <linux/kallsyms.h>
+ #endif
  #include "reg_pio.h"
  
  
  struct stpio_pin {
  #ifdef CONFIG_STPIO
+ 	const char *pin_name;
  	void (*func)(struct stpio_pin *pin, void *dev);
  	void* dev;
  	unsigned short port_no, pin_no;
***************
*** 41,47 ****
  
  struct stm_gpio_pin {
  	unsigned char flags;
! #define PIN_FAKE_EDGE		4
  #define PIN_IGNORE_EDGE_FLAG	2
  #define PIN_IGNORE_EDGE_VAL	1
  #define PIN_IGNORE_RISING_EDGE	(PIN_IGNORE_EDGE_FLAG | 0)
--- 45,51 ----
  
  struct stm_gpio_pin {
  	unsigned char flags;
! #define PIN_FAKE_EDGE			4
  #define PIN_IGNORE_EDGE_FLAG	2
  #define PIN_IGNORE_EDGE_VAL	1
  #define PIN_IGNORE_RISING_EDGE	(PIN_IGNORE_EDGE_FLAG | 0)
***************
*** 75,81 ****
  static struct sysdev_class stm_gpio_sysdev_class;
  
  
- 
  int stm_gpio_num; /* Number of available internal PIOs (pins) */
  EXPORT_SYMBOL(stm_gpio_num);
  
--- 79,84 ----
***************
*** 352,357 ****
--- 355,363 ----
  
  	port->pins[offset].direction = direction;
  	set__PIO_PCx(port->base, offset, direction);
+ 
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
  }
  
  
***************
*** 387,392 ****
--- 393,400 ----
  	struct stm_gpio_port *port = to_stm_gpio_port(chip);
  
  	set__PIO_PCx__INPUT_HIGH_IMPEDANCE(port->base, offset);
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
  
  	return 0;
  }
***************
*** 399,404 ****
--- 407,414 ----
  	__stm_gpio_set(port, offset, value);
  
  	set__PIO_PCx__OUTPUT_PUSH_PULL(port->base, offset);
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
  
  	return 0;
  }
***************
*** 465,477 ****
  
  	gpio_pin->stpio.port_no = port_no;
  	gpio_pin->stpio.pin_no = pin_no;
! 
  	return &gpio_pin->stpio;
  }
  EXPORT_SYMBOL(__stpio_request_pin);
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
  	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
  }
  EXPORT_SYMBOL(stpio_free_pin);
--- 475,491 ----
  
  	gpio_pin->stpio.port_no = port_no;
  	gpio_pin->stpio.pin_no = pin_no;
! 	gpio_pin->stpio.pin_name = (name==NULL)?"-----":name;
  	return &gpio_pin->stpio;
  }
  EXPORT_SYMBOL(__stpio_request_pin);
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
+ 	stpio_configure_pin(pin, STPIO_IN);
+ 	pin->pin_name = NULL;
+ 	pin->func = 0;
+ 	pin->dev = 0;
  	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
  }
  EXPORT_SYMBOL(stpio_free_pin);
***************
*** 587,592 ****
--- 601,687 ----
  }
  EXPORT_SYMBOL(stpio_set_irq_type);
  
+ #ifdef CONFIG_PROC_FS
+ 
+ static struct proc_dir_entry *proc_stpio;
+ 
+ static inline const char *stpio_get_direction_name(unsigned int direction)
+ {
+ 	switch (direction) {
+ 	case STPIO_NONPIO:		return "IN  (pull-up)      ";
+ 	case STPIO_BIDIR:		return "BI  (open-drain)   ";
+ 	case STPIO_OUT:			return "OUT (push-pull)    ";
+ 	case STPIO_IN:			return "IN  (Hi-Z)         ";
+ 	case STPIO_ALT_OUT:		return "Alt-OUT (push-pull)";
+ 	case STPIO_ALT_BIDIR:	return "Alt-BI (open-drain)";
+ 	default:				return "forbidden          ";
+ 	}
+ };
+ 
+ static inline const char *stpio_get_handler_name(void *func)
+ {
+ 	static char sym_name[KSYM_NAME_LEN];
+ 	char *modname;
+ 	unsigned long symbolsize, offset;
+ 	const char *symb;
+ 
+ 	if (func == NULL)
+ 		return "";
+ 
+ 	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+ 			&modname, sym_name);
+ 
+ 	return symb ? symb : "???";
+ }
+ 
+ static int stpio_read_proc(char *page, char **start, off_t off, int count,
+ 		int *eof, void *data_unused)
+ {
+ 	int len;
+ 	int port_no, pin_no;
+ 	off_t begin = 0;
+ 	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+ 	struct stm_gpio_port *port;
+ 	struct stm_gpio_pin *pin;
+ 
+ 	len = sprintf(page, "  port      name          direction\n");
+ 	for (port_no = 0; port_no < num_ports; port_no++)
+ 	{
+ 		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++) {
+ 
+ 			port = &stm_gpio_ports[port_no];
+ 			if(!port) continue;
+ 
+ 			pin = &port->pins[pin_no];
+ 			if(!pin) continue;
+ 
+ 			char *name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+ 			len += sprintf(page + len,
+ 					"PIO %d.%d [%-10s] [%s] [%s]\n",
+ 					port_no, pin_no, name,
+ 					stpio_get_direction_name(pin->direction),
+ 					stpio_get_handler_name(pin->stpio.func));
+ 
+ 			if (len + begin > off + count)
+ 				goto done;
+ 			if (len + begin < off) {
+ 				begin += len;
+ 				len = 0;
+ 			}
+ 		}
+ 	}
+ 
+ 	*eof = 1;
+ 
+ done:
+ 	if (off >= len + begin)
+ 		return 0;
+ 	*start = page + (off - begin);
+ 	return ((count < begin + len - off) ? count : begin + len - off);
+ }
+ 
+ #endif /* CONFIG_PROC_FS */
+ 
  #endif /* CONFIG_STPIO */
  
  
***************
*** 967,972 ****
--- 1062,1073 ----
  {
  	int ret;
  
+ #ifdef CONFIG_PROC_FS
+ 	proc_stpio = create_proc_entry("stpio", 0, NULL);
+ 	if (proc_stpio)
+ 		proc_stpio->read_proc = stpio_read_proc;
+ #endif
+ 
  	ret = sysdev_class_register(&stm_gpio_sysdev_class);
  	if (ret)
  		return ret;

*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/phy/phy_device.c	2011-08-04 16:27:16.440157990 +0300
--- linux-sh4/drivers/net/phy/phy_device.c	2011-08-05 17:35:37.308158605 +0300
***************
*** 962,968 ****
  		return retval;
  	}
  
! 	pr_debug("%s: Registered new driver\n", new_driver->name);
  
  	return 0;
  }
--- 962,968 ----
  		return retval;
  	}
  
! 	pr_info("%s: Registered new driver (0x%08x)\n", new_driver->name, new_driver->phy_id);
  
  	return 0;
  }

*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/stmmac/stmmac_mdio.c	2011-08-06 17:16:40.233314199 +0300
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c	2011-08-07 00:24:49.531239690 +0300
***************
*** 169,174 ****
--- 169,175 ----
  	priv->mii = new_bus;
  
  	found = 0;
+ 
  	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
***************
*** 191,202 ****
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
! 			    (priv->plat->phy_addr == -1))
  				priv->plat->phy_addr = addr;
  
- 			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
- 				(priv->plat->phy_addr == addr);
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";
--- 192,213 ----
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 
! 			act = 0;
! 
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && (/*(priv->plat->phy_addr == -1) ||*/
! 					(phydev->phy_id == 0x0181b880) || // Davicom DM9161E
! 					(phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
! 					(phydev->phy_id == 0x00181b80) || // Davicom DM9131
! 					(phydev->phy_id == 0x1c040011) || // STe100p
! 					(phydev->phy_id == 0x00061c50) || // STe101p
! 					(phydev->phy_id == 0x00008201) || (phydev->phy_id == 0x0007c0f1) ||
! 					(phydev->phy_id == 0x001cc912)))  // RTL821x
! 			{
  				priv->plat->phy_addr = addr;
+ 				act=1;
+ 			}
  
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";

