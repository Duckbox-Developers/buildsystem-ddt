--- a/arch/sh/kernel/setup.c	2011-01-05 10:45:31.000000000 +0100
+++ b/setup.c	2011-01-22 12:22:31.340928000 +0100
@@ -419,6 +419,34 @@
 #endif
 #endif
 
+	{
+		char org_command_line[] = "console=ttyAS1,115200 root=/dev/mtdblock3";
+		char tdt_command_line[] = "console=ttyAS1,115200 root=/dev/mtdblock4 rw rootfstype=jffs2 init=/bin/devinit coprocessor_mem=4m@0x10000000,4m@0x10400000 printk=1 console_loglevel=7 stmmaceth=ethaddr:";
+		char mac[] = "00:00:00:00:00:00";
+		int command_line_len = strlen(command_line);
+		int org_command_line_len = strlen(org_command_line);
+
+		if (command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+		{
+			int i;
+			for (i = 0; i < (command_line_len - 7); i++)
+			{
+				if (!strncmp(command_line + i, "ethaddr", 7))
+				{
+					strlcpy(mac, command_line + i + 8, sizeof(mac));
+					break;
+				}
+				if (!strncmp(command_line + i, "hwaddr", 6))
+				{
+					strlcpy(mac, command_line + i + 7, sizeof(mac));
+					break;
+				}
+			}
+			strlcpy(command_line, tdt_command_line, sizeof(command_line));
+			strlcat(command_line, mac, sizeof(command_line));
+		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
--- a/arch/sh/boards/mach-mb448/setup.c	2011-07-15 00:53:16.000000000 +0200
+++ b/setup.c.patched	2011-07-20 15:08:41.000000000 +0200
@@ -19,6 +19,7 @@
 #include <linux/mtd/physmap.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
+#include <linux/bpa2.h>
 #include <asm/irl.h>
 
 
@@ -26,6 +27,25 @@
 #define MB448_PIO_SMC91X_RESET stm_gpio(2, 6)
 #define MB448_PIO_FLASH_VPP stm_gpio(2, 7)
 
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "LMI_VID",
+		.start = 0x10800000,
+		.size  = 0x03800000,
+		.flags = 0,
+		.aka   = LMI_VID_partalias
+	},
+	{
+		.name  = "LMI_SYS",
+		.start = 0,
+		.size  = 0x02600000,
+		.flags = 0,
+		.aka   = LMI_SYS_partalias
+	}
+};
 
 
 void __init mb448_setup(char **cmdline_p)
@@ -30,16 +50,18 @@
 
 void __init mb448_setup(char **cmdline_p)
 {
-	printk("STMicroelectronics STb7109E Reference board initialisation\n");
+	printk("Fortis FS9000/9200 main board initialisation\n");

 	stx7100_early_device_init();
 
 	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
+			.hw_flow_control = 1,
 			.is_console = 1, });
 	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
-			.hw_flow_control = 0,
+			.hw_flow_control = 1,
 			.is_console = 0, });
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
 
@@ -68,25 +90,120 @@
 
 static void mb448_set_vpp(struct map_info *info, int enable)
 {
-	gpio_set_value(MB448_PIO_FLASH_VPP, enable);
+//	gpio_set_value(MB448_PIO_FLASH_VPP, enable);
 }
 
+static struct mtd_partition mtd_parts_table[] =
+{
+// enable this part if you want to build a flash image for TDT maxiboot:
+#if 0
+	{
+		.name   = "Boot Firmware",
+		.size   = 0x00020000,   //u-boot 0x00000000-0x0001ffff  128k
+		.offset = 0x00000000,
+		mask_flags: 0
+	},
+	{
+		.name   = "Kernel",
+		.size   = 0x00200000,   //kernel 0x00040000-0x0023ffff 2MB
+		.offset = 0x00040000
+	},
+	{
+		.name   = "ROOT SQUASHFS",
+		.size   = 0x00a00000,   //root 0x00240000-0x00c3ffff 10,0MB
+		.offset = 0x00240000,
+	},
+	{
+		.name   = "VAR-JFFS2",
+		.size   = 0x013c0000,   //var 0x00c40000-0x1ffffff 19,75MB
+		.offset = 0x00c40000
+	},
+	{
+		.name   = "Boot Config",
+		.size   = 0x00020000,   //boot config 0x00020000-0x0003ffff  128k
+		.offset = 0x00020000
+ 	},
+ 	{
+		.name   = "Full without bootloader",
+		.size   = 0x01fc0000,
+		.offset = 0x00040000
+	}
+//};
+// set above to #if 0 if you want to build an image for original bootloader,
+// flashable with an .ird file
+#else
+	{
+		.name   = "Boot firmware", //mtd0
+		.size   = 0x00300000,      // 3MB
+		.offset = 0x00000000,
+		mask_flags: 0
+	},
+	{
+		.name   = "Kernel",        //mtd1
+		.size   = 0x00300000,      // 3MB
+		.offset = 0x00300000
+	},
+	{
+		.name   = "APP",           //mtd2
+		.size   = 0x00a00000,      // 10MB squashfs
+		.offset = 0x00600000
+	},
+	{
+		.name   = "ROOT FS",       //mtd3
+		.size   = 0x00800000,      // 8MB squashfs
+		.offset = 0x01000000
+	},
+ 	{
+		.name   = "Device",        //mtd4
+		.size   = 0x00300000,      // 3MB squashfs
+		.offset = 0x01800000
+	},
+	{
+		.name   = "Config",        //mtd5
+		.size   = 0x00100000,      // 1MB
+		.offset = 0x01b00000
+	},
+	{
+		.name   = "User",          //mtd6
+		.size   = 0x00400000,      // 4MB
+		.offset = 0x01c00000
+	},
+	{
+		.name   = "All",           //mtd7
+		.size   = 0x02000000,      // 32MB
+		.offset = 0x00000000
+	},
+	{
+		.name   = "APP_ORG",       //mtd8
+		.size   = 0x00500000,      // 5MB squashfs, maintained by boot loader
+		.offset = 0x00600000
+	},
+	{
+		.name   = "APP_BAK",       //mtd9
+		.size   = 0x00500000,      // 5MB squashfs
+		.offset = 0x00c00000
+	}
+#endif
+};
+
 static struct platform_device mb448_physmap_flash = {
 	.name		= "physmap-flash",
 	.id		= -1,
 	.num_resources	= 1,
 	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
+		STM_PLAT_RESOURCE_MEM(0, 32*1024*1024),
 	},
 	.dev.platform_data = &(struct physmap_flash_data) {
 		.width		= 2,
 		.set_vpp	= mb448_set_vpp,
+		.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+		.parts		= mtd_parts_table
 	},
 };
 
 
 
-#define STMMAC_PHY_ADDR 14
+#define STMMAC_PHY_ADDR 2
 static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
 	[STMMAC_PHY_ADDR] = IRL0_IRQ,
 };
@@ -106,7 +223,7 @@
 	stx7100_configure_sata();
 
 	stx7100_configure_ssc_i2c(0);
-	stx7100_configure_ssc_spi(1, NULL);
+	stx7100_configure_ssc_i2c(1);
 	stx7100_configure_ssc_i2c(2);
 
 	stx7100_configure_usb();
@@ -119,17 +236,17 @@
 			.mdio_bus_data = &stmmac_mdio_bus,
 		});
 
-	gpio_request(MB448_PIO_FLASH_VPP, "Flash VPP");
+/*	gpio_request(MB448_PIO_FLASH_VPP, "Flash VPP");
 	gpio_direction_output(MB448_PIO_FLASH_VPP, 0);
-
-	/* Reset the SMSC 91C111 Ethernet chip */
+*/
+	/* Reset the SMSC 91C111 Ethernet chip
 	gpio_request(MB448_PIO_SMC91X_RESET, "SMC91x reset");
 	gpio_direction_output(MB448_PIO_SMC91X_RESET, 0);
 	udelay(1);
 	gpio_set_value(MB448_PIO_SMC91X_RESET, 1);
 	udelay(1);
 	gpio_set_value(MB448_PIO_SMC91X_RESET, 0);
-
+*/
 	return platform_add_devices(mb448_devices,
 			ARRAY_SIZE(mb448_devices));
 }
--- a/drivers/stm/stx7100_comms.c	2011-07-16 12:34:36.000000000 +0200
+++ b/stx7100_comms.c	2011-07-16 18:33:38.021124413 +0200
@@ -240,12 +240,12 @@
 			STM_PAD_PIO_BIDIR_NAMED(3, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(3, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC1_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 2, 2, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+			/* DVO_OUT_ON = 0 (SSC not DVO)
+			STM_PAD_SYS_CFG(7, 10, 10, 0),*/
 		},
 	},
 	[2] = {
