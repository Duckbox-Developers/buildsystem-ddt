--- a/arch/sh/kernel/setup.c	2012-03-31 15:26:54.000000000 +0100
+++ a/arch/sh/kernel/setup.c.patched	2012-03-31 15:26:54.340928000 +0100
@@ -388,6 +388,40 @@
 #endif
 #endif
 
+	{
+		char flash_org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+//		char usb_org_commandline[] = "console=ttyAS0,115200 root=/dev/root rw";
+		char flash_tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock5 rw rootfstype=jffs2 init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 console_loglevel=7 stmmaceth=ethaddr:";
+//		char usb_tdt_commandline[] = "console=ttyAS0,115200 root=/dev/root rw";
+		char mac[] = "00:00:00:00:00:00";
+		int command_line_len = strlen(command_line);
+		int flash_org_command_line_len = strlen(flash_org_command_line);
+//		int usb_org_command_line_len = strlen(usb_org_commandline);
+
+		if (command_line_len >= flash_org_command_line_len && !strncmp(command_line, flash_org_command_line, flash_org_command_line_len))
+		{ // boot from flash
+			int i;
+			for (i = 0; i < (command_line_len - 7); i++)
+			{
+				if (!strncmp(command_line + i, "ethaddr", 7))
+				{
+					strlcpy(mac, command_line + i + 8, sizeof(mac));
+					break;
+				}
+				if (!strncmp(command_line + i, "hwaddr", 6))
+				{
+					strlcpy(mac, command_line + i + 7, sizeof(mac));
+					break;
+				}
+			}
+			strlcpy(command_line, flash_tdt_command_line, sizeof(command_line));
+			strlcat(command_line, mac, sizeof(command_line));
+		}
+//		else
+//		{ // boot from USB
+//		}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
--- linux-sh4/arch/sh/boards/mach-sat7111/setup.c	2012-03-31 15:26:54.000000000 +0200
+++ linux-sh4/arch/sh/boards/mach-sat7111/setup.c.patched	2012-07-08 20:51:17.000000000 +0200
@@ -28,13 +28,14 @@
 #include <linux/mtd/nand.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
-#include <linux/spi/spi.h>
-#include <linux/spi/flash.h>
 #include <asm/irq-ilc.h>
 #include <asm/irl.h>
 #include <sound/stm.h>
+#include <linux/bpa2.h>
 
-#define SAT7111_PHY_RESET stm_gpio(2, 4)
+#define SAT7111_USB_RESET stm_gpio(3, 5)
+#define SAT7111_FLASH_VPP stm_gpio(3, 6)
+#define SAT7111_PHY_RESET stm_gpio(4, 4)
 
 /* The sat7111 board is populated with NOR, NAND, and Serial Flash.  The setup
  * below assumes the board is in its default boot-from-NOR configuration.  Other
@@ -43,9 +44,62 @@
  * been fully tested.
  */
 
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers",
+                                   "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+
+#if 0 //#ifdef CONFIG_BPA2_DIRECTFBOPTIMIZED
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4Mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4Mb)
+0x40800000 - 0x475FFFFF - linux     (110Mb)
+0x47600000 - 0x4F1FFFFF - lmi_io    (124Mb)
+0x4F200000 - 0x4FFFFFFF - bigphys   ( 14Mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "LMI_IO",
+		.start = 0x47600000,
+		.size  = 0x07C00000, /* 124 Mb */
+		.flags = 0,
+		.aka   = LMI_IO_partalias
+	},
+	{
+		.name  = "bigphysarea",
+		.start = 0x4F200000,
+		.size  = 0x00E00000, /* 14 Mb */
+		.flags = 0,
+		.aka   = NULL
+	},
+};
+#else
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4Mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4Mb)
+0x40800000 - 0x47FFFFFF - linux     (120Mb) 
+0x48000000 - 0x49FFFFFF - bigphys   ( 32Mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io    ( 96Mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "bigphysarea",
+		.start = 0x48000000,
+		.size  = 0x02000000, /* 32 Mb */
+		.flags = 0,
+		.aka   = NULL
+	},
+	{
+		.name  = "LMI_IO",
+		.start = 0x4A000000,
+		.size  = 0x06000000, /* 96 Mb */
+		.flags = 0,
+		.aka   = LMI_IO_partalias
+		},
+};
+#endif
+
 static void __init sat7111_setup(char** cmdline_p)
 {
-	printk(KERN_INFO "STMicroelectronics sat7111 reference board initialisation\n");
+	printk(KERN_INFO "Fortis HS7110 main board initialisation\n");
 
 	stx7111_early_device_init();
 
@@ -50,15 +104,14 @@
 	stx7111_early_device_init();
 
 	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
-			.hw_flow_control = 1,
+			.hw_flow_control = 0,
 			.is_console = 1, });
 	stx7111_configure_asc(3, &(struct stx7111_asc_config) {
-			.hw_flow_control = 1,
+			.hw_flow_control = 0,
 			.is_console = 0, });
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
-
-
 static struct platform_device sat7111_leds = {
 	.name = "leds-gpio",
 	.id = -1,
@@ -109,6 +162,12 @@
 	},
 };
 
+/* enable NOR Flash */
+static void sat7111_nor_set_vpp(struct map_info *info, int enable)
+{
+	gpio_set_value(SAT7111_FLASH_VPP, enable);
+}
+
 static struct platform_device sat7111_nor_flash = {
 	.name		= "physmap-flash",
 	.id		= -1,
@@ -118,75 +177,58 @@
 	},
 	.dev.platform_data = &(struct physmap_flash_data) {
 		.width		= 2,
-		.nr_parts	= 3,
+		.nr_parts	= 10,
+		.set_vpp	= sat7111_nor_set_vpp,
 		.parts		=  (struct mtd_partition []) {
 			{
-				.name = "NOR Flash 1",
-				.size = 0x00080000,
-				.offset = 0x00000000,
-			}, {
-				.name = "NOR Flash 2",
-				.size = 0x00200000,
-				.offset = MTDPART_OFS_NXTBLK,
-			}, {
-				.name = "NOR Flash 3",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
-
-
-	},
-};
-
-struct stm_nand_bank_data sat7111_nand_flash = {
-	.csn		= 1,
-	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
-	.nr_partitions	= 2,
-	.partitions	= (struct mtd_partition []) {
-		{
-			.name	= "NAND Flash 1",
-			.offset	= 0,
-			.size 	= 0x00800000
-		}, {
-			.name	= "NAND Flash 2",
-			.offset = MTDPART_OFS_NXTBLK,
-			.size	= MTDPART_SIZ_FULL
-		},
-	},
-	.timing_data	= &(struct stm_nand_timing_data) {
-		.sig_setup	= 50,		/* times in ns */
-		.sig_hold	= 50,
-		.CE_deassert	= 0,
-		.WE_to_RBn	= 100,
-		.wr_on		= 10,
-		.wr_off		= 40,
-		.rd_on		= 10,
-		.rd_off		= 40,
-		.chip_delay	= 30,		/* in us */
-	},
-};
-
-/* Serial Flash */
-static struct spi_board_info sat7111_serial_flash = {
-	.modalias       = "m25p80",
-	.bus_num        = 0,
-	.chip_select    = stm_gpio(6, 7),
-	.max_speed_hz   = 7000000,
-	.mode           = SPI_MODE_3,
-	.platform_data  = &(struct flash_platform_data) {
-		.name = "m25p80",
-		.type = "m25p16",
-		.nr_parts	= 2,
-		.parts = (struct mtd_partition []) {
-			{
-				.name = "Serial Flash 1",
-				.size = 0x00080000,
-				.offset = 0,
-			}, {
-				.name = "Serial Flash 2",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
+				.name   = "Boot firmware", //mtd0
+				.size   = 0x00060000,      // 384k
+				.offset = 0x00000000
+			},
+			{
+				.name   = "kernel",        //mtd1
+				.size   = 0x001C0000,      //1,75M
+				.offset = 0x00060000       //384k (0.375M)
+			},
+			{
+				.name   = "APP",           //mtd2
+				.size   = 0x006C0000,      //6.75M (squashfs)
+				.offset = 0x00220000       //2.125M, 128k hole at end is for checksum
+			},
+			{
+				.name   = "ROOT_FS",       //mtd3
+				.size   = 0x00F00000,      // 15M  (squashfs)
+				.offset = 0x00900000       //  9M, 128k hole at end is for checksum
+			},
+			{
+				.name   = "Device",        //mtd4
+				.size   = 0x002E0000,      //2.875M (squashfs)
+				.offset = 0x01800000       // 24M, 128k hole at end is for checksum
+			},
+			{
+				.name   = "Config",        //mtd5
+				.size   = 0x00100000,      //  1M
+				.offset = 0x01B00000       // 27M
+			},
+			{
+				.name   = "User",          //mtd6
+				.size   = 0x00400000,      //  4M
+				.offset = 0x01C00000       // 28M
+			},
+			{
+				.name   = "All",           //mtd7
+				.size   = 0x02000000,      // 32M
+				.offset = 0x00000000
+			},
+			{
+				.name   = "APP_ORG",       //mtd8
+				.size   = 0x006C0000,      //6.75M (squashfs)
+				.offset = 0x00220000       //2.125M
+			},
+			{
+				.name   = "APP_BAK",       //mtd9
+				.size   = 0x006C0000,      //6.75M (squashfs)
+				.offset = 0x00220000       //2.125M
 			},
 		},
 	},
@@ -216,15 +258,9 @@
 
 static int __init sat7111_devices_init(void)
 {
-	int peripherals_i2c_bus;
-
-	stx7111_configure_pwm(&(struct stx7111_pwm_config) {
-			.out0_enabled = 1,
-			.out1_enabled = 0, });
-
-	stx7111_configure_ssc_spi(0, NULL);
+	stx7111_configure_ssc_i2c(0);
 	stx7111_configure_ssc_i2c(1); /* J12=1-2, J16=1-2 */
-	peripherals_i2c_bus = stx7111_configure_ssc_i2c(2);
+	stx7111_configure_ssc_i2c(2);
 	stx7111_configure_ssc_i2c(3);
 
 	stx7111_configure_usb(&(struct stx7111_usb_config) {
@@ -246,14 +282,6 @@
 
 	gpio_direction_output(SAT7111_PHY_RESET, 0);
 
-	stx7111_configure_nand(&(struct stm_nand_config) {
-			.driver = stm_nand_flex,
-			.nr_banks = 1,
-			.banks = &sat7111_nand_flash,
-			.rbn.flex_connected = 1,});
-
-	spi_register_board_info(&sat7111_serial_flash, 1);
-
 	return platform_add_devices(sat7111_devices,
 				    ARRAY_SIZE(sat7111_devices));
 }
--- linux-sh4/arch/sh/include/asm/irq-ilc.h	2012-03-31 15:26:54.634523363 +0200
+++ linux-sh4/arch/sh/include/asm/irq-ilc.h.patched	2012-03-31 15:26:54.084558439 +0200
@@ -40,7 +40,7 @@
 #define ILC_IRQ(x)	(ILC_FIRST_IRQ + (x))
 #elif	defined(CONFIG_CPU_SUBTYPE_STX7111)
 #define ILC_FIRST_IRQ	176
-#define ILC_NR_IRQS	(64+36)
+#define ILC_NR_IRQS	(64+35)
 #define ILC_INT_IRQ(x)	(ILC_FIRST_IRQ + (x))
 #define ILC_EXT_IRQ(x)	(ILC_FIRST_IRQ + 64 + (x))
 #define ILC_IRQ(x)	ILC_INT_IRQ(x)
--- linux-sh4/drivers/stm/stx7111_comms.c	2012-03-31 15:26:54.723480793 +0200
+++ linux-sh4/drivers/stm/stx7111_comms.c.patched	2012-03-31 15:26:54.982982566 +0200
@@ -69,10 +69,10 @@
 	[3] = {
 		.gpios_num = 4,
 		.gpios = (struct stm_pad_gpio []) {
-			STM_PAD_PIO_OUT(5, 0, 1),	/* TX */
-			STM_PAD_PIO_IN(5, 1, -1),	/* RX */
-			STM_PAD_PIO_IN_NAMED(5, 2, -1, "CTS"),
-			STM_PAD_PIO_OUT_NAMED(5, 3, 1, "RTS"),
+			STM_PAD_PIO_OUT(6, 7, 1),	/* TX */
+			STM_PAD_PIO_IN(6, 3, -1),	/* RX */
+			STM_PAD_PIO_IN_NAMED(6, 2, -1, "CTS"),
+			STM_PAD_PIO_OUT_NAMED(6, 6, 1, "RTS"),
 		},
 	},
 };
@@ -125,8 +125,8 @@
 		/* .id set in stx7111_configure_asc() */
 		.num_resources	= 4,
 		.resource	= (struct resource[]) {
-			STM_PLAT_RESOURCE_MEM(0xfd033000, 0x2c),
-			STM_PLAT_RESOURCE_IRQ(evt2irq(0x1100), -1),
+			STM_PLAT_RESOURCE_MEM(0xfd034000, 0x2c),
+			STM_PLAT_RESOURCE_IRQ(evt2irq(0x2440), -1),
 			STM_PLAT_RESOURCE_DMA_NAMED("rx_half_full", 14),
 			STM_PLAT_RESOURCE_DMA_NAMED("tx_half_empty", 18),
 		},
--- linux-sh4/drivers/stm/gpio.c	2012-03-31 15:26:55.000000000 +0200
+++ linux-sh4/drivers/stm/gpio.c.patched	2012-07-08 17:17:27.000000000 +0200
@@ -27,12 +27,17 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/pad.h>
 #include <linux/stm/pio.h>
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#endif
 #include "reg_pio.h"
 
 
 
 struct stpio_pin {
 #ifdef CONFIG_STPIO
+	const char *pin_name;
 	void (*func)(struct stpio_pin *pin, void *dev);
 	void* dev;
 	unsigned short port_no, pin_no;
@@ -352,6 +356,9 @@
 
 	port->pins[offset].direction = direction;
 	set__PIO_PCx(port->base, offset, direction);
+
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
 }
 
 
@@ -470,6 +477,10 @@
 
 void stpio_free_pin(struct stpio_pin *pin)
 {
+ 	stpio_configure_pin(pin, STPIO_IN);
+ 	pin->pin_name = NULL;
+ 	pin->func = 0;
+ 	pin->dev = 0;
 	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
 }
 EXPORT_SYMBOL(stpio_free_pin);
@@ -584,6 +595,86 @@
 	set_irq_type(irq, triggertype);
 }
 EXPORT_SYMBOL(stpio_set_irq_type);
+ #ifdef CONFIG_PROC_FS
+ 
+ static struct proc_dir_entry *proc_stpio;
+ 
+ static inline const char *stpio_get_direction_name(unsigned int direction)
+ {
+ 	switch (direction) {
+ 	case STPIO_NONPIO:		return "IN  (pull-up)      ";
+ 	case STPIO_BIDIR:		return "BI  (open-drain)   ";
+ 	case STPIO_OUT:			return "OUT (push-pull)    ";
+ 	case STPIO_IN:			return "IN  (Hi-Z)         ";
+ 	case STPIO_ALT_OUT:		return "Alt-OUT (push-pull)";
+ 	case STPIO_ALT_BIDIR:	return "Alt-BI (open-drain)";
+ 	default:				return "forbidden          ";
+ 	}
+ };
+ 
+ static inline const char *stpio_get_handler_name(void *func)
+ {
+ 	static char sym_name[KSYM_NAME_LEN];
+ 	char *modname;
+ 	unsigned long symbolsize, offset;
+ 	const char *symb;
+ 
+ 	if (func == NULL)
+ 		return "";
+ 
+ 	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+ 			&modname, sym_name);
+ 
+ 	return symb ? symb : "???";
+ }
+ 
+ static int stpio_read_proc(char *page, char **start, off_t off, int count,
+ 		int *eof, void *data_unused)
+ {
+ 	int len;
+ 	int port_no, pin_no;
+	char *name;
+ 	off_t begin = 0;
+ 	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+ 	struct stm_gpio_port *port;
+ 	struct stm_gpio_pin *pin;
+ 
+ 	len = sprintf(page, "  port      name          direction\n");
+ 	for (port_no = 0; port_no < num_ports; port_no++)
+ 	{
+ 		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++) {
+ 
+ 			port = &stm_gpio_ports[port_no];
+ 			if(!port) continue;
+ 
+ 			pin = &port->pins[pin_no];
+ 			if(!pin) continue;
+ 
+ 			*name = (char)(pin->stpio.pin_name ? pin->stpio.pin_name : "");
+ 			len += sprintf(page + len,
+ 					"PIO %d.%d [%-10s] [%s] [%s]\n",
+ 					port_no, pin_no, name,
+ 					stpio_get_direction_name(pin->direction),
+ 					stpio_get_handler_name(pin->stpio.func));
+  			if (len + begin > off + count)
+ 				goto done;
+ 			if (len + begin < off) {
+ 				begin += len;
+ 				len = 0;
+ 			}
+ 		}
+ 	}
+ 
+ 	*eof = 1;
+ 
+ done:
+ 	if (off >= len + begin)
+ 		return 0;
+ 	*start = page + (off - begin);
+ 	return ((count < begin + len - off) ? count : begin + len - off);
+ }
+ 
+ #endif /* CONFIG_PROC_FS */
 
 #endif /* CONFIG_STPIO */
 
@@ -964,7 +1055,11 @@
 static int __init stm_gpio_init(void)
 {
 	int ret;
-
+ #ifdef CONFIG_PROC_FS
+ 	proc_stpio = create_proc_entry("stpio", 0, NULL);
+ 	if (proc_stpio)
+ 		proc_stpio->read_proc = stpio_read_proc;
+ #endif
 	ret = sysdev_class_register(&stm_gpio_sysdev_class);
 	if (ret)
 		return ret;

*** linux-sh4/drivers/net/phy/phy_device.c	2012-03-31 15:26:54.440157990 +0300
--- linux-sh4/drivers/net/phy/phy_device.c.patched	2012-03-31 15:26:54.308158605 +0300
***************
*** 962,968 ****
  		return retval;
  	}
  
! 	pr_debug("%s: Registered new driver\n", new_driver->name);
  
  	return 0;
  }
--- 962,968 ----
  		return retval;
  	}
  
! 	pr_info("%s: Registered new driver (0x%08x)\n", new_driver->name, new_driver->phy_id);
  
  	return 0;
  }

*** linux-sh4/drivers/net/stmmac/stmmac_mdio.c	2012-03-31 15:26:54.233314199 +0300
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c.patched	2012-03-31 15:26:54.531239690 +0300
***************
*** 169,174 ****
--- 169,175 ----
  	priv->mii = new_bus;
  
  	found = 0;
+ 
  	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
***************
*** 191,202 ****
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
! 			    (priv->plat->phy_addr == -1))
  				priv->plat->phy_addr = addr;
  
- 			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
- 				(priv->plat->phy_addr == addr);
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";
--- 192,213 ----
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 
! 			act = 0;
! 
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && (/*(priv->plat->phy_addr == -1) ||*/
! 					(phydev->phy_id == 0x0181b880) || // Davicom DM9161E
! 					(phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
! 					(phydev->phy_id == 0x00181b80) || // Davicom DM9131
! 					(phydev->phy_id == 0x1c040011) || // STe100p
! 					(phydev->phy_id == 0x00061c50) || // STe101p
! 					(phydev->phy_id == 0x00008201) || (phydev->phy_id == 0x0007c0f1) ||
! 					(phydev->phy_id == 0x001cc912)))  // RTL821x
! 			{
  				priv->plat->phy_addr = addr;
+ 				act=1;
+ 			}
  
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";

