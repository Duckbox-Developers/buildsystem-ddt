--- autofs-4.1.4.org/aclocal.m4
+++ autofs-4.1.4/aclocal.m4
@@ -9,6 +9,8 @@
 AC_DEFUN(AF_PATH_INCLUDE,
 [AC_PATH_PROGS($1,$2,$3,$4)
 if test -n "$$1"; then
+  AH_TEMPLATE([HAVE_$1], [Have $2])
+  AH_TEMPLATE([PATH_$1], [Have $2])
   AC_DEFINE(HAVE_$1)
   AC_DEFINE_UNQUOTED(PATH_$1, "$$1")
   HAVE_$1=1
--- autofs-4.1.4.org/configure.in
+++ autofs-4.1.4/configure.in
@@ -134,12 +134,14 @@
 cat > pietest.c <<EOF
 int main(void) { return 0; }
 EOF
+AF_tmp_ldflags="$LDFLAGS"
+AF_tmp_cflags="$CFLAGS"
 CFLAGS=-fPIE
 LDFLAGS=-pie
 DAEMON_CFLAGS=
 DAEMON_LDFLAGS=
 AC_MSG_CHECKING([whether gcc -fPIE works])
-AC_RUN_IFELSE([AC_LANG_PROGRAM([[]], [[int main(void) {return 0;}]])],
+AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[int main(void) {return 0;}]])],
 	      [gcc_supports_pie=yes], [gcc_supports_pie=no])
 AC_MSG_RESULT([$gcc_supports_pie])
 if test $gcc_supports_pie = yes ; then
@@ -149,6 +151,8 @@
 rm -f pietest.c
 AC_SUBST(DAEMON_CFLAGS)
 AC_SUBST(DAEMON_LDFLAGS)
+CFLAGS="${AF_tmp_cflags}"
+LDFLAGS="${AF_tmp_ldflags}"
 
 #
 # Location of init.d directory?
--- autofs-4.1.4.org/daemon/Makefile
+++ autofs-4.1.4/daemon/Makefile
@@ -26,6 +26,6 @@
 
 install: all
 	install -d -m 755 $(INSTALLROOT)$(sbindir)
-	install -c automount -m 755 $(INSTALLROOT)$(sbindir)
+	install -c -m 755 automount $(INSTALLROOT)$(sbindir)
 
 
--- autofs-4.1.4.org/daemon/spawn.c
+++ autofs-4.1.4/daemon/spawn.c
@@ -214,14 +214,15 @@
 	sigfillset(&allsignals);
 	sigprocmask(SIG_BLOCK, &allsignals, &oldsig);
 
-	if (pipe(pipefd))
+	if (pipe(pipefd)) {
+		if (use_lock)
+			release_lock();
+		sigprocmask(SIG_SETMASK, &oldsig, NULL);
 		return -1;
+	}
 
 	f = fork();
-	if (f < 0) {
-		sigprocmask(SIG_SETMASK, &oldsig, NULL);
-		return -1;
-	} else if (f == 0) {
+	if (f == 0) {
 		reset_signals();
 		close(pipefd[0]);
 		dup2(pipefd[1], STDOUT_FILENO);
@@ -243,6 +244,8 @@
 
 		if (f < 0) {
 			close(pipefd[0]);
+			if (use_lock)
+				release_lock();
 			sigprocmask(SIG_SETMASK, &oldsig, NULL);
 			return -1;
 		}
@@ -287,11 +290,11 @@
 		if (waitpid(f, &status, 0) != f)
 			status = -1;	/* waitpid() failed */
 
-		sigprocmask(SIG_SETMASK, &oldsig, NULL);
-
 		if (use_lock)
 			release_lock();
 
+		sigprocmask(SIG_SETMASK, &oldsig, NULL);
+
 		return status;
 	}
 }
--- autofs-4.1.4.org/lib/cache.c
+++ autofs-4.1.4/lib/cache.c
@@ -337,8 +337,10 @@
 		if (!path)
 			return;
 
-		if (is_mounted(_PATH_MOUNTED, path))
+		if (is_mounted(_PATH_MOUNTED, path)) {
+			free(path);
 			continue;
+		}
 
 		if (me->age < age) {
 			mapent_hash[i] = me->next;
--- autofs-4.1.4.org/lib/lock.c
+++ autofs-4.1.4/lib/lock.c
@@ -208,9 +208,6 @@
  */
 static int wait_for_lockf(const char *lockf)
 {
-	struct timespec t = { 0, WAIT_INTERVAL };
-	struct timespec r;
-	int ts_size = sizeof(struct timespec);
 	int tries = WAIT_TRIES;
 	int status = 0;
 	struct stat st;
@@ -218,10 +215,13 @@
 	while (tries-- && !status) {
 		status = stat(lockf, &st);
 		if (!status) {
+			struct timespec t = { 0, WAIT_INTERVAL };
+			struct timespec r;
+
 			while (nanosleep(&t, &r) == -1 && errno == EINTR) {
 				if (got_term)
 					return 0;
-				memcpy(&t, &r, ts_size);
+				memcpy(&t, &r, sizeof(struct timespec));
 			}
 		}
 	}
--- autofs-4.1.4.org/Makefile.conf.in
+++ autofs-4.1.4/Makefile.conf.in
@@ -8,8 +8,8 @@
 #
 
 # Do we build with -fpie?
-DAEMON_CFLAGS  = @DAEMON_CFLAGS@
-DAEMON_LDFLAGS = @DAEMON_LDFLAGS@
+#DAEMON_CFLAGS  = @DAEMON_CFLAGS@
+#DAEMON_LDFLAGS = @DAEMON_LDFLAGS@
 
 # Special parameters for glibc (libc 6)
 LIBNSL    = @LIBNSL@
--- autofs-4.1.4.org/Makefile.rules
+++ autofs-4.1.4/Makefile.rules
@@ -5,7 +5,7 @@
 #
 
 # Root directory contents
-SUBDIRS = lib daemon modules man samples
+SUBDIRS = lib daemon modules
 INCDIRS = include
 INCFILES = COPYING COPYRIGHT NEWS README* TODO Makefile Makefile.rules \
 	   Makefile.conf.in .version .autofs-* configure.in aclocal.m4 \
@@ -18,19 +18,19 @@
 # The STRIP defined here *must not* remove any dynamic-loading symbols
 
 ifdef DEBUG
-CFLAGS    = -O2 -g -DDEBUG
-LDFLAGS   = -g
+CFLAGS    ?= -O2 -g -DDEBUG
+LDFLAGS   ?= -g
 STRIP     = :
 else
-CFLAGS    = -O3 -fomit-frame-pointer -Wall
-LDFLAGS   = -s
-STRIP     = strip --strip-debug
+CFLAGS    ?= -O3 -fomit-frame-pointer -Wall
+LDFLAGS   ?= -s
+STRIP     = ${TARGET}-strip --strip-debug
 endif
 
-CC        = gcc
-CXX       = g++
+CC        ?= ${TARGET}-gcc
+CXX       ?= ${TARGET}-g++
 CXXFLAGS  = $(CFLAGS)
-LD        = ld
+LD        ?= ${TARGET}-ld
 SOLDFLAGS = -shared -Xlinker -rpath -Xlinker $(autofslibdir)
 
 # Standard rules
--- autofs-4.1.4.org/man/Makefile
+++ autofs-4.1.4/man/Makefile
@@ -14,9 +14,9 @@
 
 install: all
 	install -d -m 755 $(INSTALLROOT)$(mandir)/man5
-	install -c *.5 -m 644 $(INSTALLROOT)$(mandir)/man5
+	install -c -m 644 *.5 $(INSTALLROOT)$(mandir)/man5
 	install -d -m 755 $(INSTALLROOT)$(mandir)/man8
-	install -c *.8 -m 644 $(INSTALLROOT)$(mandir)/man8
+	install -c -m 644 *.8 $(INSTALLROOT)$(mandir)/man8
 
 clean:
 	rm -f $(GENFILES)
--- autofs-4.1.4.org/modules/lookup_file.c
+++ autofs-4.1.4/modules/lookup_file.c
@@ -157,6 +157,10 @@
 			break;
 
 		case st_compare:
+			if (kptr - key > KEY_MAX_LEN) {
+				state = st_badent;
+				break;
+			}
 			if (ch == '\n')
 				state = st_begin;
 			else if (isspace(ch) && !escape) {
--- autofs-4.1.4.org/modules/Makefile
+++ autofs-4.1.4/modules/Makefile
@@ -53,7 +53,7 @@
 # mount_smbfs.so is an obsolete module which must be removed
 install: all
 	install -d -m 755 $(INSTALLROOT)$(autofslibdir)
-	install -c $(MODS) -m 755 $(INSTALLROOT)$(autofslibdir)
+	install -c -m 755 $(MODS) $(INSTALLROOT)$(autofslibdir)
 	-rm -f $(INSTALLROOT)$(autofslibdir)/mount_smbfs.so
 ifeq ($(EXT2FS), 1)
  ifeq ($(EXT3FS), 1)
--- autofs-4.1.4.org/modules/mount_nfs.c
+++ autofs-4.1.4/modules/mount_nfs.c
@@ -31,6 +31,7 @@
 #include <netinet/in.h>
 #include <linux/nfs.h>
 #include <linux/nfs2.h>
+#include <ctype.h>
 
 #define MODULE_MOUNT
 #include "automount.h"
@@ -105,28 +106,117 @@
 	
 	return 1;
 }
+
+/*
+ * If the entry doesn't contain a ',' or doesn't contain more than
+ * one ':' then @what is not a replicated server entry.
+ */
+static int inline is_replicated_entry(char *what)
+{
+	return strchr(what, ',') ||
+		(strchr(what, ':') != strrchr(what, ':'));
+}
+
+/*
+ *  Check to see if the 'host:path' or 'host' is on the local machine
+ *  Returns < 0 if there is a host lookup problem, otherwise returns 0
+ *  if it's not a local mount, and returns > 0 if it is a local mount.
+ */
+int is_local_mount(const char *hostpath)
+{
+	struct hostent *he;
+	char **haddr;
+	char *delim;
+	char *hostname;
+	int hostnamelen;
+	int local = 0;
+
+	debug(MODPREFIX "is_local_mount: %s", hostpath);
+	delim = strpbrk(hostpath,":");
+
+	if (delim) 
+		hostnamelen = delim - hostpath; 
+	else 
+		hostnamelen = strlen(hostpath);
+
+	hostname = malloc(hostnamelen+1);
+	strncpy(hostname, hostpath, hostnamelen);
+	hostname[hostnamelen] = '\0';
+	he = gethostbyname(hostname);
+	if (!he) {
+		error(MODPREFIX "host %s: lookup failure", hostname);
+		return -1;
+	}
+
+	for (haddr = he->h_addr_list; *haddr; haddr++) {
+		local = is_local_addr(hostname, *haddr, he->h_length);
+		if (local < 0) 
+			return local;
+ 		if (local) {
+			debug(MODPREFIX "host %s: is localhost",
+					hostname);
+			return local;
+		}
+	}
+	return 0;
+}
+
 /*
  * Given a mount string, return (in the same string) the
- * best mount to use based on weight/locality/rpctime
+ * best mount to use based on locality/weight/rpctime.
+ *
+ * If longtimeout is set to 0 then we only do 100 ms pings to hosts.  In
+ * the event that this fails, we call ourself recursively with the
+ * longtimeout option set to 1.  In this case we ping for up to 10s and
+ * skip logic for detecting if a localhost has been passed. (if a local
+ * host had been passed, we would have returned that mount as the best
+ * mount.  The skipping of local maps in this case is an optimization).
+ *
  * - return -1 and what = '\0' on error,
  *           1 and what = local mount path if local bind,
  *     else  0 and what = remote mount path
  */
-int get_best_mount(char *what, const char *original, int longtimeout, int skiplocal)
+int get_best_mount(char *what, const char *original, int longtimeout)
 {
 	char *p = what;
 	char *winner = NULL;
 	int winner_weight = INT_MAX, local = 0;
 	double winner_time = 0;
-	char *delim;
+	char *delim, *pstrip;
 	int sec = (longtimeout) ? 10 : 0;
 	int micros = (longtimeout) ? 0 : 100000;
+	int skiplocal = longtimeout; /* clearly local is not available */
 
 	if (!p) {
 		*what = '\0';
 		return -1;
 	}
 
+	/*
+	 *  If only one mountpoint has been passed in, we don't need to
+	 *  do anything except strip whitespace from the end of the string.
+	 */
+	if (!is_replicated_entry(p)) {
+		for (pstrip = p+strlen(p) - 1; pstrip >= p; pstrip--) 
+			if (isspace(*pstrip))
+				*pstrip = '\0';
+
+		/* Check if the host is the localhost */
+		if (is_local_mount(p) > 0) {
+			debug(MODPREFIX "host %s: is localhost", p);
+
+			/* Strip off hostname and ':' */
+			delim = strchr(p,':');
+			while (delim && *delim != '\0') {
+				delim++;
+				*what = *delim;
+				what++;
+			}
+			return 1;
+		}
+		return 0;
+	}
+
 	while (p && *p) {
 		char *next;
 		unsigned int ping_stat = 0;
@@ -171,37 +261,17 @@
 		/* p points to a server, "next is our next parse point */
 		if (!skiplocal) {
 			/* Check if it's localhost */
-			struct hostent *he;
-			char **haddr;
-
-			he = gethostbyname(p);
-			if (!he) {
-				error(MODPREFIX "host %s: lookup failure", p);
-				p = next;
-				continue;
-			}
-
-			/* Check each host in round robin list */
-			for (haddr = he->h_addr_list; *haddr; haddr++) {
-				local = is_local_addr(p, *haddr, he->h_length);
-
-				if (local < 0)
-					continue;
-
-				if (local) {
-					winner = p;
-					break;
-				}
-			}
-			
+			local = is_local_mount(p);
 			if (local < 0) {
 				local = 0;
 				p = next;
 				continue;
 			}
 
-			if (local)
+			if (local) {
+				winner = p;
 				break;
+			}
 		}
 
 		/* ping each (or the) entry to see if it's alive. */
@@ -214,6 +284,7 @@
 		/* First unweighted or only host is alive so set winner */
 		if (!winner) {
 			winner = p;
+			winner_time = 1;
 			/* No more to check, return it */
 			if (!next || !*next)
 				break;
@@ -256,7 +327,7 @@
 	 */
 	if (!local && winner_weight == INT_MAX) {
 		/* We had more than one contender and none responded in time */
-		if (winner_time != 0 && winner_time > 500) {
+		if (winner_time == 0 || winner_time > 500) {
 			/* We've already tried a longer timeout */
 			if (!longtimeout) {
 				/* Reset string and try again */
@@ -267,16 +338,14 @@
 				      "retrying with longer timeout",
 				      original);
 
-				return get_best_mount(what, original, 1, 1);
+				return get_best_mount(what, original, 1);
 			}
 		}
 	}
 
-	/* No winner found so bail */
-	if (!winner) {
-		*what = '\0';
-		return 0;
-	}
+	/* No winner found so return first */
+	if (!winner)
+		winner = what;
 
 	/*
 	 * We now have our winner, copy it to the front of the string,
@@ -395,7 +464,7 @@
 		/* No colon, take this as a bind (local) entry */
 		local = 1;
 	} else if (!nosymlink) {
-		local = get_best_mount(whatstr, what, 0, 0);
+		local = get_best_mount(whatstr, what, 0);
 		if (!*whatstr) {
 			warn(MODPREFIX "no host elected");
 			return 1;
--- autofs-4.1.4.org/modules/parse_sun.c
+++ autofs-4.1.4/modules/parse_sun.c
@@ -680,6 +680,10 @@
 	    "mounting root %s, mountpoint %s, what %s, fstype %s, options %s\n",
 	    root, mountpoint, what, fstype, options);
 
+	/* A malformed entry of the form key /xyz will trigger this case */
+	if (!what || *what == '\0')
+		return 1;
+
 	if (!strcmp(fstype, "nfs")) {
 		rv = mount_nfs->mount_mount(root, mountpoint, strlen(mountpoint),
 					    what, fstype, options, mount_nfs->context);
@@ -695,6 +699,18 @@
 	return rv;
 }
 
+static int key_exists(struct multi_mnt *list, char *path, int pathlen)
+{
+	struct multi_mnt *mmptr = list;
+
+	while (mmptr && pathlen == strlen(mmptr->path)) {
+		if (!strncmp(mmptr->path, path, pathlen))
+			return 1;
+		mmptr = mmptr->next;
+	}
+	return 0;
+}
+
 /*
  * Build list of mounts in shortest -> longest order.
  * Pass in list head and return list head.
@@ -725,6 +741,12 @@
 		mmptr = mmptr->next;
 	}
 
+	/* if a multimount entry has duplicate keys, it is invalid */
+	if (key_exists(mmptr, path, plen)) {
+		free(new);
+		return NULL;
+	}
+
 	if (old)
 		old->next = new;
 	new->next = mmptr;
@@ -766,7 +788,16 @@
 {
 	const char *p = (char *) mapent;
 	int multi = 0;
-	int first_chunk = 0;
+	int not_first_chunk = 0;
+
+	if (!p) {
+		crit("check_is_multi: unexpected NULL map entry pointer");
+		return 0;
+	}
+	
+	/* If first character is "/" it's a multi-mount */
+	if (*p == '/')
+		return 1;
 
 	while (*p) {
 		p = skipspace(p);
@@ -779,7 +810,7 @@
 		 * path that begins with '/' indicates a mutil-mount
 		 * entry.
 		 */
-		if (first_chunk) {
+		if (not_first_chunk) {
 			if (*p == '/' || *p == '-') {
 				multi = 1;
 				break;
@@ -796,7 +827,7 @@
 		 * after which it's a multi mount.
 		 */
 		p += chunklen(p, check_colon(p));
-		first_chunk++;
+		not_first_chunk++;
 	}
 
 	return multi;
@@ -883,7 +914,12 @@
 				return 1;
 			}
 
-			path = dequote(p, l = chunklen(p, 0));
+			if (*p != '/') {
+				l = 0;
+				path = dequote("/", 1);
+			} else
+				 path = dequote(p, l = chunklen(p, 0));
+
 			if (!path) {
 				error(MODPREFIX "out of memory");
 				free(myoptions);
--- autofs-4.1.4.org/samples/auto.hotplug
+++ autofs-4.1.4/samples/auto.hotplug
@@ -0,0 +1 @@
+* -fstype=auto,rw,sync :/dev/&
--- autofs-4.1.4.org/samples/auto.net
+++ autofs-4.1.4/samples/auto.net
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/bin/sh
 
 # $Id: auto.net,v 1.8 2005/04/05 13:02:09 raven Exp $
 
@@ -37,7 +37,7 @@
 # Newer distributions get this right
 SHOWMOUNT="$SMNT --no-headers -e $key"
 
-$SHOWMOUNT | LC_ALL=C sort +0 | \
+$SHOWMOUNT | LC_ALL=C sort | \
 	awk -v key="$key" -v opts="$opts" -- '
 	BEGIN	{ ORS=""; first=1 }
 		{ if (first) { print opts; first=0 }; print " \\\n\t" $1, key ":" $1 }
--- autofs-4.1.4.org/samples/auto.smb
+++ autofs-4.1.4/samples/auto.smb
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/bin/sh
 
 # $Id: auto.smb,v 1.3 2005/04/05 13:02:09 raven Exp $
 
--- autofs-4.1.4.org/samples/Makefile
+++ autofs-4.1.4/samples/Makefile
@@ -27,19 +27,21 @@
 install: all
 	install -d -m 755 $(INSTALLROOT)/etc
 	-mv -f $(INSTALLROOT)/etc/auto.master $(INSTALLROOT)/etc/auto.master.old
-	install -c auto.master -m 644 $(INSTALLROOT)/etc
+	install -c -m 644 auto.master $(INSTALLROOT)/etc
 	-mv -f $(INSTALLROOT)/etc/auto.misc $(INSTALLROOT)/etc/auto.misc.old
-	install -c auto.misc   -m 644 $(INSTALLROOT)/etc
+	install -c -m 644 auto.misc $(INSTALLROOT)/etc
 	-mv -f $(INSTALLROOT)/etc/auto.net $(INSTALLROOT)/etc/auto.net.old
-	install -c auto.net    -m 755 $(INSTALLROOT)/etc
+	install -c -m 755 auto.net $(INSTALLROOT)/etc
 	-mv -f $(INSTALLROOT)/etc/auto.smb $(INSTALLROOT)/etc/auto.smb.old
-	install -c auto.smb    -m 755 $(INSTALLROOT)/etc
+	install -c -m 755 auto.smb    $(INSTALLROOT)/etc
+	-mv -f $(INSTALLROOT)/etc/auto.hotplug $(INSTALLROOT)/etc/auto.hotplug.old
+	install -c -m 755 auto.hotplug    $(INSTALLROOT)/etc
 	install -d -m 755 $(INSTALLROOT)$(initdir)
-	install -c rc.autofs   -m 755 $(INSTALLROOT)$(initdir)/autofs
+	install -c -m 755 rc.autofs   $(INSTALLROOT)$(initdir)/autofs
 	install -d -m 755 $(INSTALLROOT)$(autofslibdir)
 	install -d -m 755 $(INSTALLROOT)/var/run/autofs
 ifeq ($(LDAP), 1)
-	install -c autofs-ldap-auto-master -m 755 $(INSTALLROOT)$(autofslibdir)
+	install -c -m 755 autofs-ldap-auto-master $(INSTALLROOT)$(autofslibdir)
 endif
 
 clean):
--- autofs-4.1.4.org/samples/rc.autofs.in
+++ autofs-4.1.4/samples/rc.autofs.in
@@ -43,6 +43,9 @@
 	system=debian
 elif [ -f /etc/redhat-release ]; then
 	system=redhat
+elif [ -f /etc/issue ] && grep -q "^SlugOS" /etc/issue ; then
+	# SlugOS behaves like Debian, at least for autofs purposes.
+	system=debian
 else
 	echo "$0: Unknown system, please port and contact autofs@linux.kernel.org" 1>&2
 	exit 1
